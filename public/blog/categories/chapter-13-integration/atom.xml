<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Chapter 13 - Integration | Spring in Practice]]></title>
  <link href="http://springinpractice.com/blog/categories/chapter-13-integration/atom.xml" rel="self"/>
  <link href="http://springinpractice.com/"/>
  <updated>2013-11-01T21:39:48-07:00</updated>
  <id>http://springinpractice.com/</id>
  <author>
    <name><![CDATA[Willie Wheeler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to pretty print your JSON with Spring and Jackson]]></title>
    <link href="http://springinpractice.com/2013/11/01/how-to-pretty-print-your-json-with-spring-and-jackson/"/>
    <updated>2013-11-01T21:29:00-07:00</updated>
    <id>http://springinpractice.com/2013/11/01/how-to-pretty-print-your-json-with-spring-and-jackson</id>
    <content type="html"><![CDATA[<p>When implementing RESTful web services using Spring Web MVC, by default Spring doesn&rsquo;t pretty print the JSON output. Fortunately this is easy to address when using Java-based configuration. Here&rsquo;s how, using Jackson 2.</p>

<!-- more -->


<pre><code>@Configuration
public class MyAppConfig extends WebMvcConfigurerAdapter {

    @Override
    public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) {
        StringHttpMessageConverter stringConverter = new StringHttpMessageConverter();
        stringConverter.setWriteAcceptCharset(false);
        converters.add(new ByteArrayHttpMessageConverter());
        converters.add(stringConverter);
        converters.add(new ResourceHttpMessageConverter());
        converters.add(new SourceHttpMessageConverter&lt;Source&gt;());
        converters.add(new AllEncompassingFormHttpMessageConverter());
        converters.add(jackson2Converter());
    }

    @Bean
    public MappingJackson2HttpMessageConverter jackson2Converter() {
        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();
        converter.setObjectMapper(objectMapper());
        return converter;
    }

    @Bean
    public ObjectMapper objectMapper() {
        Object objectMapper = new ObjectMapper();
        objectMapper.enable(SerializationFeature.INDENT_OUTPUT);
        return objectMapper;
    }
}
</code></pre>

<p>Here we can see a key advantage of using Java-based configuration, which is that we can easily call the <code>ObjectMapper.enable()</code> method, allowing us to activate pretty printing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to set HTTP request timeouts with Spring RestTemplate]]></title>
    <link href="http://springinpractice.com/2013/10/27/how-to-set-http-request-timeouts-with-spring-resttemplate/"/>
    <updated>2013-10-27T10:31:00-07:00</updated>
    <id>http://springinpractice.com/2013/10/27/how-to-set-http-request-timeouts-with-spring-resttemplate</id>
    <content type="html"><![CDATA[<p>In <a href="http://springinpractice.com/2013/10/27/how-to-send-an-http-header-with-every-request-with-spring-resttemplate/">How to Send an HTTP Header With Every Request With Spring RestTemplate</a>, we looked at how to send a given HTTP header automatically with every request. Here we&rsquo;ll do something similar, which is to automatically apply a request timeout to every request.</p>

<!-- more -->


<p>Here&rsquo;s the Java-based configuration for this technique:</p>

<pre><code>package com.myapp;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

@Configuration
public class MyAppConfig {

    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate(clientHttpRequestFactory());
    }

    private ClientHttpRequestFactory clientHttpRequestFactory() {
        HttpComponentsClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory();
        factory.setReadTimeout(2000);
        factory.setConnectTimeout(2000);
        return factory;
    }
}
</code></pre>

<p>The XML-based configuration is this:</p>

<pre><code>&lt;bean class="org.springframework.web.client.RestTemplate"&gt;
    &lt;constructor-arg&gt;
        &lt;bean class="org.springframework.http.client.HttpComponentsClientHttpRequestFactory"
            p:readTimeout="2000"
            p:connectTimeout="2000" /&gt;
    &lt;/constructor-arg&gt;
&lt;/bean&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to send an HTTP header with every request with Spring RestTemplate]]></title>
    <link href="http://springinpractice.com/2013/10/27/how-to-send-an-http-header-with-every-request-with-spring-resttemplate/"/>
    <updated>2013-10-27T08:34:00-07:00</updated>
    <id>http://springinpractice.com/2013/10/27/how-to-send-an-http-header-with-every-request-with-spring-resttemplate</id>
    <content type="html"><![CDATA[<p>In <a href="http://springinpractice.com/2013/10/25/know-which-apps-are-hitting-your-web-service/">Know Which Apps Are Hitting Your Web Service</a>, I showed how to write a servlet filter that enforces the existence of a special HTTP request header.</p>

<p>From a client perspective, it would be nice to send this header automatically, instead of having to set the header manually with every request. This post shows how we can use Spring&rsquo;s <code>RestTemplate</code> and <code>ClientHttpRequestInterceptor</code> to accomplish this.</p>

<!-- more -->


<p>First we need to implement a <code>ClientHttpRequestInterceptor</code>:</p>

<pre><code>package com.myapp.connector;

import java.io.IOException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpRequest;
import org.springframework.http.client.ClientHttpRequestExecution;
import org.springframework.http.client.ClientHttpRequestInterceptor;
import org.springframework.http.client.ClientHttpResponse;

public class XUserAgentInterceptor implements ClientHttpRequestInterceptor {

    @Override
    public ClientHttpResponse intercept(
            HttpRequest request, byte[] body, ClientHttpRequestExecution execution)
            throws IOException {

        HttpHeaders headers = request.getHeaders();
        headers.add("X-User-Agent", "My App v2.1");
        return execution.execute(request, body);
    }
}
</code></pre>

<p>Now we need to configure our <code>RestTemplate</code> to use it. Here I&rsquo;m using Spring&rsquo;s Java-based configuration, but you can implement the same thing with the XML-based configuration too:</p>

<pre><code>package com.myapp;

import java.util.Collections;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.ClientHttpRequestInterceptor;
import org.springframework.web.client.RestTemplate;
import com.myapp.connector.XUserAgentInterceptor;

@Configuration
public class MyAppConfig {

    @Bean
    public RestTemplate restTemplate() {
        RestTemplate restTemplate = new RestTemplate(clientHttpRequestFactory());
        restTemplate.setInterceptors(Collections.singletonList(new XUserAgentInterceptor()));
        return restTemplate;
    }
}
</code></pre>

<p>With this configuration, any requests you make through the <code>RestTemplate</code> will automatically carry the desired HTTP request header.</p>

<p>To learn how to set request timeouts automatically, see my post <a href="http://springinpractice.com/2013/10/27/how-to-set-http-request-timeouts-with-spring-resttemplate/">How to Set HTTP Request Timeouts With Spring RestTemplate</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Know which apps are hitting your web service]]></title>
    <link href="http://springinpractice.com/2013/10/25/know-which-apps-are-hitting-your-web-service/"/>
    <updated>2013-10-25T00:42:00-07:00</updated>
    <id>http://springinpractice.com/2013/10/25/know-which-apps-are-hitting-your-web-service</id>
    <content type="html"><![CDATA[<p>When creating a web service, it&rsquo;s often useful to know which apps are hitting it. I don&rsquo;t mean which users, but instead which apps. The reason is that you may want to coordinate with some other team on something. For example, maybe the team is being too aggressive about request retries, or maybe you want to alert the team to a change in the API. Whatever the reason, it&rsquo;s good to know which apps are calling your service.</p>

<!-- more -->


<p>HTTP has a <code>User-Agent</code> header that can help here. One possible approach is to make that a required header. Unfortunately, this approach isn&rsquo;t ideal. The problem is that HTTP client libraries usually set that header automatically. So if the client application forgets to set the header explicitly, you end up with user agents like <code>Apache-HttpClient/release (java 1.5)</code>, which isn&rsquo;t much help at all.</p>

<p>An approach I like better is to define a custom header and make it required. I use <code>X-User-Agent</code>, since it really is a user agent we&rsquo;re talking about here.</p>

<p>Here&rsquo;s how to implement this with a servlet filter. No Spring involved here at all; it&rsquo;s just servlet stuff.</p>

<pre><code>package com.myapp.web.filter;

import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class XUserAgentFilter implements Filter {
    private static final String X_USER_AGENT = "X-User-Agent";

    private String errorJson;

    public XUserAgentFilter() {
        String message = 
            "HTTP header '" + X_USER_AGENT + "' is required. Please set it to your application name so we know " +
            "who to contact if there's an issue.";
        this.errorJson = "{ " + wrap("message") + " : " + wrap(message) + " }";
    }

    private String wrap(String s) { return "\"" + s + "\""; }

    @Override
    public void init(FilterConfig config) throws ServletException { }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {

        HttpServletRequest httpRequest = (HttpServletRequest) request;
        HttpServletResponse httpResponse = (HttpServletResponse) response;

        if (httpRequest.getHeader(X_USER_AGENT) == null) {
            httpResponse.setStatus(422);
            httpResponse.getWriter().println(errorJson);
        } else {
            chain.doFilter(request, response);
        }
    }

    @Override
    public void destroy() { }
}
</code></pre>

<p>Of course, you need to configure this filter and a filter mapping in your <code>web.xml</code> file.</p>

<p>In the <a href="http://springinpractice.com/2013/10/27/how-to-send-an-http-header-with-every-request-with-spring-resttemplate/">next post</a> I&rsquo;ll show you how to set up your Spring <code>RestTemplate</code> to send the <code>X-User-Agent</code> header with each request automatically.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating JSON error object responses with Spring Web MVC]]></title>
    <link href="http://springinpractice.com/2013/10/09/generating-json-error-object-responses-with-spring-web-mvc/"/>
    <updated>2013-10-09T00:39:00-07:00</updated>
    <id>http://springinpractice.com/2013/10/09/generating-json-error-object-responses-with-spring-web-mvc</id>
    <content type="html"><![CDATA[<p>The other day I wrote a post called <a href="http://springinpractice.com/2013/10/07/handling-json-error-object-responses-with-springs-resttemplate/">Handling JSON error object responses with Spring&rsquo;s RestTemplate</a>. Judging by the Twitter activity, people found it useful, so this time around I&rsquo;m going to write about the other side of the equation, which is <em>generating</em> the JSON error objects using Spring Web MVC. Something like this:</p>

<pre><code>{
  "code": "InvalidRequest",
  "message": "Invalid doodad",
  "fieldErrors": [
    {
      "resource": "doodadResource",
      "field": "key",
      "code": "NotNull",
      "message": "may not be null"
    },
    {
      "resource": "doodadResource",
      "field": "name",
      "code": "NotNull",
      "message": "may not be null"
    }
  ]
}
</code></pre>

<p>There are various ways to do this, but Spring 3.2 introduces a pretty elegant approach via the <code>@ControllerAdvice</code> annotation. The basic concept here is that we can define AOP-like &ldquo;advice&rdquo; around Spring Web MVC controllers. This advice captures exceptions and then maps them to JSON objects, which the advice sends in the response body. Of course we can also send the appropriate HTTP status code in the headers too.</p>

<!-- more -->


<p>(You can find out more about <code>@ControllerAdvice</code> and <code>@ExceptionHandler</code> in the post <a href="http://www.baeldung.com/2013/01/31/exception-handling-for-rest-with-spring-3-2/">Error Handling for REST with Spring 3</a> by <a href="https://twitter.com/baeldung">Eugen Paraschiv</a>.)</p>

<p>Note that the error-triggering event doesn&rsquo;t really have to be an exception <em>per se</em>. For example, we might want bean validation errors or authorization errors&mdash;neither of which manifests itself as an exception&mdash;to map to JSON error objects. The key is to have these triggers generate exceptions that we can capture using the <code>@ControllerAdvice</code> component.</p>

<p>Let&rsquo;s look at an example involving bean validation. Here we have a controller. If the incoming resource is invalid, we want to generate a JSON error object. So first we do this:</p>

<pre><code>package myapp.web.controller;

... various imports ...

@Controller
@RequestMapping("/doodads")
public class DoodadController {
    @Inject private DoodadService doodadService;

    @RequestMapping(
            value = "/{id}",
            method = RequestMethod.PUT,
            consumes = MediaType.APPLICATION_JSON_VALUE)
    public void updateDoodad(
            @PathVariable Long id,
            @RequestBody @Valid DoodadResource doodad,
            BindingResult bindingResult) {

        if (bindingResult.hasErrors()) {
            throw new InvalidRequestException("Invalid doodad", bindingResult);
        }

        doodadService.updateDoodad(doodad);
    }   
}
</code></pre>

<p>Note that <code>InvalidRequestException</code> is just a custom exception I created that takes an <code>Errors</code> object as an argument. (<code>BindingResult</code> implements <code>Errors</code>.) Just for completeness, here&rsquo;s <code>InvalidRequestException</code>:</p>

<pre><code>package myapp.exception;

import org.springframework.validation.Errors;

@SuppressWarnings("serial")
public class InvalidRequestException extends RuntimeException {
    private Errors errors;

    public InvalidRequestException(String message, Errors errors) {
        super(message);
        this.errors = errors;
    }

    public Errors getErrors() { return errors; }
}
</code></pre>

<p>So far so good. But now we need that <code>@ControllerAdvice</code> to capture the <code>InvalidRequestException</code> and generate the JSON error object:</p>

<pre><code>package myapp.web.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import myapp.binding.ErrorResource;
import myapp.binding.FieldErrorResource;
import myapp.exception.InvalidRequestException;

@ControllerAdvice
public class MyExceptionHandler extends ResponseEntityExceptionHandler {

    @ExceptionHandler({ InvalidRequestException.class })
    protected ResponseEntity&lt;Object&gt; handleInvalidRequest(RuntimeException e, WebRequest request) {
        InvalidRequestException ire = (InvalidRequestException) e;
        List&lt;FieldErrorResource&gt; fieldErrorResources = new ArrayList&lt;&gt;();

        List&lt;FieldError&gt; fieldErrors = ire.getErrors().getFieldErrors();
        for (FieldError fieldError : fieldErrors) {
            FieldErrorResource fieldErrorResource = new FieldErrorResource();
            fieldErrorResource.setResource(fieldError.getObjectName());
            fieldErrorResource.setField(fieldError.getField());
            fieldErrorResource.setCode(fieldError.getCode());
            fieldErrorResource.setMessage(fieldError.getDefaultMessage());
            fieldErrorResources.add(fieldErrorResource);
        }

        ErrorResource error = new ErrorResource("InvalidRequest", ire.getMessage());
        error.setFieldErrors(fieldErrorResources);

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        return handleExceptionInternal(e, error, headers, HttpStatus.UNPROCESSABLE_ENTITY, request);
    }

    ... other handlers for other exceptions ...
}
</code></pre>

<p>The important pieces here are <code>@ControllerAdvice</code> (which derives from <code>@Controller</code>, so we can component scan it), <code>ResponseEntityExceptionHandler</code> (provides the <code>handleExceptionInternal()</code> method), and <code>@ExceptionHandler</code> annotation. <code>@ExceptionHandler</code> accepts an array of match exceptions, and then its implementation builds the JSON error object, which here involves custom <code>ErrorResource</code> and <code>FieldErrorResource</code> beans that can be whatever we want to display to the client. Finally we pass response-related information to <code>handleExceptionInternal()</code>, where the error object ends up as the response body. Here we&rsquo;re using &ldquo;Unprocessable Entity&rdquo; (HTTP 422), a WebDAV extension to HTTP, since &ldquo;Bad Request&rdquo; (HTTP 400) is for syntactic rather than semantic errors. (See <a href="http://www.bennadel.com/blog/2434-HTTP-Status-Codes-For-Invalid-Data-400-vs-422.htm">HTTP Status Codes For Invalid Data: 400 vs. 422</a> by Ben Nadel for more information.)</p>

<p>Again in the interest of completeness, here are the error objects I&rsquo;m using. These are just examples of what&rsquo;s possible; choose error representations that fit your needs. First, the top-level error object:</p>

<pre><code>package myapp.binding;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@JsonIgnoreProperties(ignoreUnknown = true)
public class ErrorResource {
    private String code;
    private String message;
    private List&lt;FieldErrorResource&gt; fieldErrors;

    public ErrorResource() { }

    public ErrorResource(String code, String message) {
        this.code = code;
        this.message = message;
    }

    public String getCode() { return code; }

    public void setCode(String code) { this.code = code; }

    public String getMessage() { return message; }

    public void setMessage(String message) { this.message = message; }

    public List&lt;FieldErrorResource&gt; getFieldErrors() { return fieldErrors; }

    public void setFieldErrors(List&lt;FieldErrorResource&gt; fieldErrors) {
        this.fieldErrors = fieldErrors;
    }
}
</code></pre>

<p>And finally here&rsquo;s a class for field errors:</p>

<pre><code>package myapp.binding;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@JsonIgnoreProperties(ignoreUnknown = true)
public class FieldErrorResource {
    private String resource;
    private String field;
    private String code;
    private String message;

    public String getResource() { return resource; }

    public void setResource(String resource) { this.resource = resource; }

    public String getField() { return field; }

    public void setField(String field) { this.field = field; }

    public String getCode() { return code; }

    public void setCode(String code) { this.code = code; }

    public String getMessage() { return message; }

    public void setMessage(String message) { this.message = message; }
}
</code></pre>

<p>Have fun!</p>
]]></content>
  </entry>
  
</feed>

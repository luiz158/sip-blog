<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Chapter 05 - Web Flow | Spring in Practice]]></title>
  <link href="http://springinpractice.com/blog/categories/chapter-05-web-flow/atom.xml" rel="self"/>
  <link href="http://springinpractice.com/"/>
  <updated>2013-09-20T01:39:49-07:00</updated>
  <id>http://springinpractice.com/</id>
  <author>
    <name><![CDATA[Willie Wheeler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Build a shopping cart with Spring Web Flow 2, part 3]]></title>
    <link href="http://springinpractice.com/2008/05/07/build-a-shopping-cart-with-spring-web-flow-2-part-3/"/>
    <updated>2008-05-07T10:51:39-07:00</updated>
    <id>http://springinpractice.com/2008/05/07/build-a-shopping-cart-with-spring-web-flow-2-part-3</id>
    <content type="html"><![CDATA[<div class="intro">
<span class="icon stickyNote">This post is part of a three-part series: <a href="http://springinpractice.com/2008/05/05/build-a-shopping-cart-with-spring-web-flow-2-part-1/">Part 1</a> | <a href="http://springinpractice.com/2008/05/06/build-a-shopping-cart-with-spring-web-flow-2-part-2/">Part 2</a> | <a href="http://springinpractice.com/2008/05/07/build-a-shopping-cart-with-spring-web-flow-2-part-3/">Part 3</a></span>
</div>




<h3>Building out the application</h3>


<p>Now that we&rsquo;ve gotten Spring MVC and SWF working, it&rsquo;s time to build out the shopping cart application.  Please download the following file before continuing:</p>

<center><span class="icon archive"><a href="http://wheelersoftware.s3.amazonaws.com/articles/spring-web-flow-2.0/mycart3.zip">mycart3.zip</a></span></center>


<p>We won&rsquo;t be looking at every aspect of this application, but I&rsquo;ll highlight the most interesting pieces from a SWF point of view.</p>

<h4>Dependencies for mycart3.zip</h4>


<p>Besides the dependencies we had for <code>mycart2.zip</code>, there are four others you&rsquo;ll need:</p>

<ul class="square">
<li><code>cglib-nodep-2.1_3.jar</code></li>
<li><code>jstl.jar</code></li>
<li><code>standard.jar</code></li>
<li><code>sitemesh-2.3.jar</code> (from <a href="http://www.opensymphony.com/sitemesh/download.action">www.opensymphony.com/sitemesh/download.action</a>)</li>
</ul>


<p>After you download <code>mycart3.zip</code> (and its dependencies), you can deploy it and then point your browser at</p>

<p><p style="text-align:center"><a href="http://localhost:8080/mycart/home.do">http://localhost:8080/mycart/home.do</a></p>

<p>Here are some notes to keep in mind:</p>

<p><ul class="square"></p>

<p><li>My registration and login flows don&rsquo;t actually &ldquo;do&rdquo; anything. They&rsquo;re not hooked up to Spring Security and they&rsquo;re not hooked up to a database.  So when you register you can just hit the submit button,and when you log in you can just hit the login button.  I just wanted to focus on the flows themselves.</li></p>

<p><li>I&rsquo;m using Sitemesh to ensure a unified layout across the pages. Even if you are not familiar with Sitemesh, don&rsquo;t worry: it is very straightforward.  Basically you just put a servlet filter in front of the pages and the filter decorates the pages with a template (<code>/WEB-INF/jsp/pagetemplate.jsp</code> in this case) according to a simple configuration file (<code>/WEB-INF/decorators.xml</code>). If however you don&rsquo;t want to use Sitemesh, simply remove the filter from <code>web.xml</code> and Sitemesh is gone.</li></p>

<p></ul></p>

<p><h3>Multiple flows</h3></p>

<p>Any given app may contain multiple flows, and <code>mycart3</code> is such an app.  We have four different flows:</p>

<p><ul class="square">
<li><code>addToCart</code>: add an item to a shopping cart</li>
<li><code>checkout</code>: shopping cart checkout process</li>
<li><code>login</code>: log into the app</li>
<li><code>register</code>: register for a new user account</li>
</ul></p>

<p>In some of the cases we have what we would intuitively consider a flow in that there are multiple states involved; in other cases there is only one state to speak of and so it may seem strange to regard the flow as being a flow.  However we&rsquo;ll see how that can make sense in the following section.</p>

<p>To create multiple flows, you will need to do the following. First, create the flow definition files and put them in your <code>/WEB-INF/flows</code> directory (or wherever you decided to put them).  Then add the flow locations to the flow registry, and the flow URL mappings to your <code>SimpleUrlHandlerMapping</code> (if that&rsquo;s what you&rsquo;re using), in your Spring application context, like so:</p>

<p><div>
<span class="code-listing">Code listing:</span> <code>/WEB-INF/mycart-servlet.xml</code>
<pre name="code" class="xml">&hellip;</p>

<p>&lt;bean id=&ldquo;flowUrlMappings&rdquo; class=</p>

<pre><code>    "org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"&amp;gt;
&amp;lt;property name="mappings"&amp;gt;
    &amp;lt;value&amp;gt;
        /addToCart.do=flowController
        /checkout.do=flowController
        /account/login.do=flowController
        /account/register.do=flowController
    &amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;property name="alwaysUseFullPath" value="true"/&amp;gt;
</code></pre>

<p>&lt;/bean&gt;</p>

<p>&lt;flow:flow-registry id=&ldquo;flowRegistry&rdquo; flow-builder-services=&ldquo;flowBuilderServices&rdquo;&gt;</p>

<pre><code>&amp;lt;flow:flow-location path="/WEB-INF/flows/addToCart.xml"/&amp;gt;
&amp;lt;flow:flow-location path="/WEB-INF/flows/checkout.xml"/&amp;gt;
&amp;lt;flow:flow-location path="/WEB-INF/flows/login.xml"/&amp;gt;
&amp;lt;flow:flow-location path="/WEB-INF/flows/register.xml"/&amp;gt;
</code></pre>

<p>&lt;/flow:flow-registry&gt;</p>

<p>&hellip;</pre>
</div></p>

<p>Once you have those in place you should be set up for multiple flows.  Point your links at them and try them out!</p>

<p><h3>Subflows</h3></p>

<p>Going hand-in-hand with the idea of multiple flows is the idea that some flows might be subflows of other flows.  In <code>mycart3</code>,all four flows can be independently accessed, but in addition to that we have the <code>addToCart</code>, <code>login</code> and <code>register</code> flows being subflows to the <code>checkout</code> flow.  See Figure 3.</p>

<p><div style="margin:20px 0;text-align:center"></p>

<pre><code>&lt;div&gt;&lt;img src="http://wheelersoftware.s3.amazonaws.com/articles/spring-web-flow-2.0/subflows.jpg" alt="Figure 3. Subflows." /&gt;&lt;/div&gt;
&lt;div class="caption"&gt;Figure 3. Subflows.&lt;/div&gt;
</code></pre>

<p></div></p>

<p>Here&rsquo;s the idea.  The three flows we&rsquo;ve identified as subflows are defined as separate flows because clearly there are use cases where it makes sense for them to be accessed outside of a checkout process. For example, we want to be able to add products to a shopping cart while we&rsquo;re browsing the product catalog.  And of course we want people to be able to register and login even if they&rsquo;re not in a checkout process.</p>

<p>But those are also flows that we might want to include as part of a checkout process too.  During checkout, we might want to recommend products to the customer.  Or if the user hasn&rsquo;t yet logged in or registered, we&rsquo;d want them to do that as part of the checkout process rather than forcing them to do that before they could enter the checkout process.</p>

<p>By defining the login, registration and add-to-cart as flows, we make them available both independently (as top-level flows) and also as part of a larger flow (like the checkout flow).  That&rsquo;s why we have these defined as flows even though they are currently implemented as single-state flows.  (It is however easy to imagine these being multi-state flows.  For example, the login flow may ask you to answer a challenge question if it detects that you&rsquo;re coming in from an unusual IP address, or the add-to-cart flow may ask you to enter a quantity before proceeding.)</p>

<p>So here is the checkout flow:</p>

<p><div>
<span class="code-listing">Code listing:</span> <code>/WEB-INF/flows/checkout.xml</code>
<pre name="code" class="xml">&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?&gt;
&lt;flow xmlns=&ldquo;<a href="http://www.springframework.org/schema/webflow">http://www.springframework.org/schema/webflow</a>&rdquo;</p>

<pre><code>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/webflow
    http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd"&amp;gt;

&amp;lt;!-- Get the products one time, at the beginning of the flow --&amp;gt;
&amp;lt;on-start&amp;gt;
    &amp;lt;set name="flowScope.products" value="cartService.products"/&amp;gt;
    &amp;lt;set name="flowScope.shippingOptions" value="cartService.shippingOptions"/&amp;gt;
&amp;lt;/on-start&amp;gt;

&amp;lt;!-- If not specified, the start state is the first state specified. --&amp;gt;
&amp;lt;view-state id="viewCart" view="viewcart"&amp;gt;
    &amp;lt;!-- cart is available to SWF but not stored on the session under that
         name when using AOP proxy --&amp;gt;
    &amp;lt;on-render&amp;gt;
        &amp;lt;!-- Carry cart from Spring app context to request scope --&amp;gt;
        &amp;lt;set name="requestScope.shoppingCart" value="shoppingCart"/&amp;gt;
        &amp;lt;set name="requestScope.recommendations" value="cartService.recommendations"/&amp;gt;
    &amp;lt;/on-render&amp;gt;
    &amp;lt;transition on="addToCart" to="addProductToCart"/&amp;gt;
    &amp;lt;transition on="register" to="register"/&amp;gt;
    &amp;lt;transition on="login" to="login"/&amp;gt;
&amp;lt;/view-state&amp;gt;

&amp;lt;subflow-state id="addProductToCart" subflow="addToCart"&amp;gt;
    &amp;lt;!-- This is where we go when the subflow returns. productAdded is
         the name of an end-state. --&amp;gt;
    &amp;lt;transition on="productAdded" to="viewCart"/&amp;gt;
&amp;lt;/subflow-state&amp;gt;

&amp;lt;!-- New customers create a new account before moving forward --&amp;gt;
&amp;lt;subflow-state id="register" subflow="register"&amp;gt;
    &amp;lt;transition on="accountAdded" to="paymentAndShipmentOptions"/&amp;gt;
    &amp;lt;transition on="cancelRegistration" to="viewCart"/&amp;gt;
&amp;lt;/subflow-state&amp;gt;

&amp;lt;!-- Existing customers log in before moving forward --&amp;gt;
&amp;lt;subflow-state id="login" subflow="login"&amp;gt;
    &amp;lt!-- This is where we go when the subflow returns. productAdded is
         the name of an end-state. --&amp;gt;
    &amp;lt;transition on="loginOk" to="paymentAndShipmentOptions"/&amp;gt;
&amp;lt;/subflow-state&amp;gt;

&amp;lt;!-- Payment and shipment options --&amp;gt;
&amp;lt;view-state id="paymentAndShipmentOptions" view="options"&amp;gt;
    &amp;lt;transition on="submit" to="confirmOrder"/&amp;gt;
    &amp;lt;transition on="back" to="viewCart"/&amp;gt;
&amp;lt;/view-state&amp;gt;

&amp;lt;!-- Confirm order --&amp;gt;
&amp;lt;view-state id="confirmOrder" view="confirmorder"&amp;gt;
    &amp;lt;on-render&amp;gt;
        &amp;lt;set name="requestScope.shoppingCart" value="shoppingCart"/&amp;gt;
    &amp;lt;/on-render&amp;gt;
    &amp;lt;transition on="continue" to="thankYou"&amp;gt;
        &amp;lt;evaluate expression="cartService.submitOrderForPayment()"/&amp;gt;
    &amp;lt;/transition&amp;gt;
&amp;lt;/view-state&amp;gt;

&amp;lt;!-- Thank you page --&amp;gt;
&amp;lt;view-state id="thankYou" view="thanks"&amp;gt;
    &amp;lt;transition on="continue" to="shop"/&amp;gt;
&amp;lt;/view-state&amp;gt;

&amp;lt;!-- Exit the flow, letting the user return to shopping --&amp;gt;
&amp;lt;end-state id="shop" view="externalRedirect:contextRelative:/home.do"/&amp;gt;

&amp;lt;global-transitions&amp;gt;
    &amp;lt;transition on="cancelCheckout" to="shop"/&amp;gt;
&amp;lt;/global-transitions&amp;gt;
</code></pre>

<p>&lt;/flow&gt;</pre>
</div></p>

<p>In the code above, we are using the <code>&lt;subflow-state&gt;</code> element to call a subflow from a parent flow.  The <code>subflow</code> attribute specifies one of the flows you registered with the flow registry in the Spring configuration.  The flow starts at the subflow&rsquo;s start state, and continues until the subflow hits an end state.  The end state IDs provide keys that you can reference from the calling flow to effect state transitions.  For example, in the flow above,<code>accountAdded</code> is one of the end states for the <code>register</code> flows, and so one of the <code>&lt;transition&gt;</code> elements references that end state.</p>

<p>Recall from <code>register.xml</code> (see <a href="spring-web-flow-2.0-4.html">page 4</a>) that the end states specified a <code>view</code> attribute.  If the <code>register</code> flow is called directly, then SWF will use the <code>view</code> attribute to decide which view to show the user when the flow reaches a given end state.  If, however, the flow is called as part of a subflow (instead of being called directly), SWF will ignore the <code>view</code> attribute and instead follow whatever transition is defined in the calling <code>&lt;subflow-state&gt;</code>.</p>

<p><h3>Using EL to call services</h3></p>

<p>SWF allows you to make calls against service beans using an expression language (EL).  You can use either Unified EL or else OGNL for that, as mentioned earlier in the article.  We happen to be using OGNL though I understand that Unified EL and OGNL are mostly the same,at least where their core syntax is concerned.</p>

<p>There are various places in your flow where you might want to invoke service beans, and SWF provides various mechanisms for doing that.  Here&rsquo;s a table showing how to call services from different locations in your flow definition file:</p>

<p><div class="table-with-caption"></p>

<pre><code>&lt;div class="table"&gt;
    &lt;table&gt;
        &lt;tr&gt;
            &lt;th&gt;Location&lt;/th&gt;
            &lt;th&gt;How to call the service bean&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;On flow start&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;/flow/on-start&lt;/code&gt; element&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;On state entry&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;/flow/view-state/on-entry&lt;/code&gt; element&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Immediately before rendering a view&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;/flow/view-state/on-render&lt;/code&gt; element&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;On state exit&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;/flow/view-state/on-exit&lt;/code&gt; element&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;On state transition&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;/flow/view-state/transition/evaluate&lt;/code&gt; element&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;On flow end&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;/flow/on-end&lt;/code&gt; element&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;div class="caption"&gt;Table 2. How to call service beans from different locations.&lt;/div&gt;
</code></pre>

<p></div></p>

<p>Note that the above does not represent a 100% complete list of places where you can use EL, but it gives you most of the major cases and also the basic idea.</p>

<p>In <code>checkout.xml</code> we&rsquo;ve used a number of the methods above.  For example, we use <code>&lt;on-start&gt;</code> to grab the product catalog and shipping options from the cart service and place them on the flow scope, which allows them to be used for the duration of the flow.  The <code>value</code> attribute on the <code>set</code> element is specified using EL.  (It looks a lot like JSP EL, if you are familiar with that.)  The <code>cartService</code> bean is available because we defined a Spring bean with that ID.</p>

<p>We also use <code>&lt;on-render&gt;</code> to prepare the <code>viewCart</code> state for rendering.  In this case, we place the user&rsquo;s shopping cart on the request scope so the JSP can easily reference it, and we also pull some recommendations off of the cart service and place those on the request scope as well.  Once again the <code>value</code> attribute is specified using EL.</p>

<p><h3>Global transitions</h3></p>

<p>At the end of <code>checkout.xml</code>, you will see that I&rsquo;ve defined a <code>&lt;global-transitions&gt;</code> element.  This allows me to define a transition that applies to all states in the flow.  In this case, any time the user raises the <code>cancelCheckout</code> event, the global transition I&rsquo;ve defined will kick in and carry the user to the <code>shop</code> state. Pretty handy for transitions that occur in multiple places throughout the flow.</p>

<p><h3>That&rsquo;s our whirlwind tour</h3></p>

<p>That concludes this tutorial on Spring Web Flow 2.0.  We&rsquo;ve really only scratched the surface&mdash;for instance, we haven&rsquo;t even touched the new AJAX support that SWF 2.0 introduces&mdash;but this should give you an overall feel for how things work.  The SWF 2.0 distribution comes with a hotel booking sample application that shows you how to get SWF working with form validation and persistence as well (areas I&rsquo;ve suppressed in this article so that I could focus on flow definition).</p>

<p>If you have suggestions and especially corrections to the article or the code, please leave them below.  SWF 2.0 is new so I have no doubt that you will be able to show me places where I could be doing something better.  Thanks!</p>

<p><h3>Resources</h3></p>

<p>A <a href="http://www.springhispano.org/?q=node/319">Maven version of the download</a> is available. The target link is in Spanish but there&rsquo;s a zip file at the bottom called <code>WebFlowExample.zip</code> that you can download. If you want to read the target link in English, you can use <a href="http://babelfish.yahoo.com/translate_txt">Alta Vista&rsquo;s free Babel Fish translation service</a>.</p>

<p><div class="outro">
<span class="icon stickyNote">This post is part of a three-part series: <a href="http://springinpractice.com/2008/05/05/build-a-shopping-cart-with-spring-web-flow-2-part-1/">Part 1</a> | <a href="http://springinpractice.com/2008/05/06/build-a-shopping-cart-with-spring-web-flow-2-part-2/">Part 2</a> | <a href="http://springinpractice.com/2008/05/07/build-a-shopping-cart-with-spring-web-flow-2-part-3/">Part 3</a></span>
</div></p>

<p><div class="endnote">Post migrated from my Wheeler Software site.</div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a shopping cart with Spring Web Flow 2, part 2]]></title>
    <link href="http://springinpractice.com/2008/05/06/build-a-shopping-cart-with-spring-web-flow-2-part-2/"/>
    <updated>2008-05-06T10:50:53-07:00</updated>
    <id>http://springinpractice.com/2008/05/06/build-a-shopping-cart-with-spring-web-flow-2-part-2</id>
    <content type="html"><![CDATA[<div class="intro">
<span class="icon stickyNote">This post is part of a three part series: <a href="http://springinpractice.com/2008/05/05/build-a-shopping-cart-with-spring-web-flow-2-part-1/">Part 1</a> | <a href="http://springinpractice.com/2008/05/06/build-a-shopping-cart-with-spring-web-flow-2-part-2/">Part 2</a> | <a href="http://springinpractice.com/2008/05/07/build-a-shopping-cart-with-spring-web-flow-2-part-3/">Part 3</a></span>
</div>




<h3>Creating a simple flow: Spring application context configuration</h3>


<p>Now we have Spring MVC working, so it&rsquo;s time to expand on that and get Spring Web Flow working too.  We&rsquo;ll start by creating a very simple flow&mdash;one that has only a single view state.  First we&rsquo;ll look at the updated Spring application context configuration.  After that we&rsquo;ll look at the flow definition itself.</p>

<p>To make it easier for you to follow along, here&rsquo;s the updated,one-state version of our shopping cart:</p>

<center><span class="icon archive"><a href="http://wheelersoftware.s3.amazonaws.com/articles/spring-web-flow-2.0/mycart2.zip">mycart2.zip</a></span></center>




<h4>Dependencies for mycart2.zip</h4>


<p>Because we&rsquo;re now using SWF, we have additional dependencies. Here&rsquo;s the full set so far:</p>

<p>These come from the Spring 2.5.4 distribution. <a href="http://www.springframework.org/download">[download]</a></p>

<ul class="square">
<li><code>spring.jar</code> (located in <code>/spring-framework-2.5.4/dist</code>)</li>
<li><code>spring-webmvc.jar</code> (located in <code>/spring-framework-2.5.4/dist/modules</code>)</li>
<li><code>commons-logging.jar</code> (located in <code>/spring-framework-2.5.4/jakarta-commons</code>)</li>
</ul>


<p>You will need the following JARs from the Spring Web Flow 2.0 distribution. <a href="http://www.springframework.org/download">[download]</a></p>

<ul class="square">
<li><code>spring-webflow-2.0.0.jar</code></li>
<li><code>spring-binding-2.0.0.jar</code></li>
<li><code>spring-js-2.0.0.jar</code></li>
</ul>


<p>You will need the following JAR from the <a href="http://www.ognl.org/">OGNL web site</a>:</p>

<ul class="square">
<li><code>ognl-2.6.9.jar</code></li>
</ul>


<p>Spring Web Flow uses either OGNL or Unified EL for parsing expressions.  For this article I arbitrarily picked OGNL though you can use <code>jboss-el.jar</code> (currently the only Unified EL implementation that will work with SWF) too.</p>

<h4>web.xml and mycart.CartController</h4>


<p>For now we aren&rsquo;t making any changes to either of these at all.</p>

<div style="margin:10px 0 20px 20px;float:right">
<div><img src="http://wheelersoftware.s3.amazonaws.com/articles/spring-web-flow-2.0/swf-config.gif" alt="Figure 2. Overview of SWF components." /></div>
<div class="caption">Figure 2. Overview of SWF components.</div>
</div>




<h4>Spring application context overview</h4>


<p>Before jumping into the code, let&rsquo;s do a quick overview of the various components involved.  Please see Figure 2.</p>

<p>We already saw <code>DispatcherServlet</code> in <code>web.xml</code>.  (So it&rsquo;s not part of <code>mycart-servlet.xml</code>; we&rsquo;re discussing it here just to show the relationship between the servlet and the <code>FlowController</code>.)  <code>DispatcherServlet</code> is the Spring MVC front controller and it receives any Spring MVC requests&mdash;including SWF requests, as SWF is based on Spring MVC&mdash;according to your <code>web.xml</code> configuration.</p>

<p>We&rsquo;re using <code>SimpleUrlHandlerMapping</code> to map flow requests from <code>DispatcherServlet</code> to <code>FlowController</code>.</p>

<p>So now <code>FlowController</code> has the request. <code>FlowController</code> is just a Spring MVC controller that receives flow requests and passes them to <code>FlowExecutor</code> for actual processing.</p>

<p><code>FlowExecutor</code> contains the actual logic for processing Spring Web Flow requests.  Among other things it determines for any given request which flow is involved and figures out what state transition to enact, based on the request.</p>

<p>When <code>FlowExecutor</code> needs a flow, it grabs the flow from the <code>FlowRegistry</code>, which is responsible for loading the flow from a flow configuration file and maintaining it on behalf of the <code>FlowExecutor</code>.</p>

<p><code>FlowBuilderServices</code> is just a container for various services that <code>FlowRegistry</code> needs when constructing flows. This includes, for example, a service to provide for the creation of view factories.  In our example, we will see that we&rsquo;re specifically using a <code>MvcViewFactoryCreator</code>, which creates view factories for Spring MVC views.</p>

<p>Finally, we define a <code>ViewResolver</code>, which is a Spring MVC interface that carries logical view names to physical resources (such as JSPs).  For example, a <code>ViewResolver</code> might carry the logical name <code>checkout/viewcart</code> to the physical resource <code>/WEB-INF/jsp/checkout/viewcart.jsp</code>.</p>

<div style="clear:both"></div>




<h4>Spring application context configuration file</h4>


<p>And finally here&rsquo;s the configuration file itself:</p>

<div>
<span class="code-listing">Code listing:</span> <code>/WEB-INF/mycart-servlet.xml</code>
<pre name="code" class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:flow="http://www.springframework.org/schema/webflow-config"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-2.5.xsd
    http://www.springframework.org/schema/webflow-config
    http://www.springframework.org/schema/webflow-config/spring-webflow-config-2.0.xsd"&gt;


    &lt;!-- SPRING MVC STUFF --&gt;

    &lt;!-- This activates post-processors for annotation-based config --&gt;
    &lt;!-- http://www.infoq.com/articles/spring-2.5-part-1 --&gt;
    &lt;context:annotation-config/&gt;

    &lt;context:component-scan base-package="mycart"/&gt;

    &lt;!-- Enables POJO @Controllers (like CartController) --&gt;
    &lt;bean class=
"org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/&gt;
    
    &lt;!-- Maps flow requests from DispatcherServlet to flowController --&gt;
    &lt;bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"&gt;
        &lt;property name="mappings"&gt;
            &lt;value&gt;
                /account/register.do=flowController
            &lt;/value&gt;
        &lt;/property&gt;
        &lt;property name="alwaysUseFullPath" value="true"/&gt;
    &lt;/bean&gt;
    
    &lt;!-- Enables annotated methods on POJO @Controllers (like CartController) --&gt;
    &lt;bean class=
"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/&gt;
    
    &lt;!-- Enables plain Controllers (e.g. FlowController) --&gt;
    &lt;bean class=
"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/&gt;
    
    &lt;!-- Maps a logical view name to a physical resource --&gt;
    &lt;bean id="viewResolver" class=
"org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
        &lt;property name="prefix" value="/WEB-INF/jsp/"/&gt;
        &lt;property name="suffix" value=".jsp"/&gt;
    &lt;/bean&gt;
    
    
    &lt;!-- SPRING WEB FLOW STUFF --&gt;
    
    &lt;bean id="flowController" class=
"org.springframework.webflow.mvc.servlet.FlowController"&gt;
        &lt;property name="flowExecutor" ref="flowExecutor"/&gt;
    &lt;/bean&gt;
    
    &lt;flow:flow-executor id="flowExecutor" flow-registry="flowRegistry"/&gt;
    
    &lt;!-- This creates an XmlFlowRegistryFactory bean --&gt;
    &lt;flow:flow-registry id="flowRegistry"
            flow-builder-services="flowBuilderServices"&gt;
        &lt;flow:flow-location path="/WEB-INF/flows/register.xml"/&gt;
    &lt;/flow:flow-registry&gt;
    
    &lt;flow:flow-builder-services id="flowBuilderServices"
            view-factory-creator="viewFactoryCreator"/&gt;
    
    &lt;bean id="viewFactoryCreator" class=
"org.springframework.webflow.mvc.builder.MvcViewFactoryCreator"&gt;
        &lt;property name="viewResolvers"&gt;
            &lt;list&gt;
                &lt;ref bean="viewResolver"/&gt;
            &lt;/list&gt;
        &lt;/property&gt;
    &lt;/bean&gt;
&lt;/beans&gt;</pre>
</div>


<p>Now let&rsquo;s look at our basic flow definition, which will initially at least be much simpler than the application context file.</p>

<p><h3>Creating a Simple Flow: Flow Definition File and JSPs</h4></p>

<p>We&rsquo;ll now add a SWF flow definition file, update our original home page JSP, and add a new JSP for registering as a new customer.</p>

<p><h4>The flow definition file</h4></p>

<p>Here&rsquo;s a definition for our first flow, which will be a bare-bones registration process.  We&rsquo;ll add more flows to the application but this is our starting point just to get SWF working.  You&rsquo;ll need to create a directory <code>/WEB-INF/flows</code>, and then add the following flow definition file to that directory, naming the file <code>register.xml</code>.</p>

<p><div>
<span class="code-listing">Code listing:</span> <code>/WEB-INF/flows/register.xml</code>
<pre name="code" class="xml">&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?&gt;
&lt;flow xmlns=&ldquo;<a href="http://www.springframework.org/schema/webflow">http://www.springframework.org/schema/webflow</a>&rdquo;
  xmlns:xsi=&ldquo;<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>&rdquo;
  xsi:schemaLocation=&ldquo;<a href="http://www.springframework.org/schema/webflow">http://www.springframework.org/schema/webflow</a></p>

<pre><code>http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd"&amp;gt;

&amp;lt;!-- By default, the first state is the start state. --&amp;gt;
&amp;lt;view-state id="register" view="account/registerForm"&amp;gt;
    &amp;lt;transition on="submitRegistration" to="accountAdded"/&amp;gt;
    &amp;lt;transition on="cancelRegistration" to="cancelRegistration"/&amp;gt;
&amp;lt;/view-state&amp;gt;

&amp;lt;end-state id="accountAdded"
    view="externalRedirect:contextRelative:/home.do"/&amp;gt;
&amp;lt;end-state id="cancelRegistration"
    view="externalRedirect:contextRelative:/home.do"/&amp;gt;
</code></pre>

<p>&lt;/flow&gt;</pre>
</div></p>

<p>Here we have a single state, called a <em>view state</em>, and all it does is show us the hardcoded JSP that we created earlier.  We&rsquo;re identifying the state itself as <code>register</code>, and the logical view name associated with this view state is <code>account/registerForm</code>.  This is the name that the view resolver we defined in the Spring app context file will map to a physical location; in this case the physical location will be <code>/WEB-INF/jsp/account/registerForm.jsp</code>.</p>

<p>By default, SWF interprets the first state in the file as being the <em>start state</em>, or entry point into the flow.  There must be exactly one start state.  The flow itself is called <code>register</code> (this is because we&rsquo;ve named the flow definition file <code>register.xml</code>).  As it happens we&rsquo;ve also named the first state <code>register</code> though there&rsquo;s no requirement for the start state to have the same name as the flow.</p>

<p>I&rsquo;ve defined a couple of transitions out of the <code>register</code> state.  One transition, <code>submitRegistration</code>, responds to registration submission events on the user interface, such as the user clicking a submit button on a registration form.  The other transition, <code>cancelRegistration</code>, responds to cancelation events on the UI, such as the user clicking a cancel link.  Each of these transitions leads to another state in the flow.  In this case, both of the transitions lead to <em>end states</em>, which are exits out of the flow, but transitions can lead to other view states (or even other sorts of state) as well.  As shown there can be multiple end states for a flow.  Here my end states happen to be doing the same thing; they&rsquo;re redirecting the user to a context-relative (as in relative to the servlet context) path <code>/home.do</code>, which you will recall is just the home page.  There are some other relativizations you can do as well:</p>

<p><div class="table-with-caption">
<div class="table">
<table>
<tr>
<th>Relativization</th>
<th>Example</th>
</tr>
<tr>
<td>Servlet mapping-relative</td>
<td><code>externalRedirect:/hotels/index</code></td>
</tr>
<tr>
<td>Servlet-relative path</td>
<td><code>externalRedirect:servletRelative:/hotels/index</code></td>
</tr>
<tr>
<td>Context-relative path</td>
<td><code>externalRedirect:contextRelative:/dispatcher/hotels/index</code></td>
</tr>
<tr>
<td>Server-relative path</td>
<td><code>externalRedirect:serverRelative:/springtravel/dispatcher/hotels/index</code></td>
</tr>
<tr>
<td>Absolute URL</td>
<td><code>externalRedirect:<a href="http://www.paypal.com/">http://www.paypal.com/</a></code></td>
</tr>
</table>
</div>
<div class="caption">Table 1. Relativizations for externalRedirect.</div>
</div></p>

<p>Anyway we&rsquo;re doing the context-relative redirection in this case. This is how we jump out of SWF and return control to the application. (Or how we return control to a calling flow, but we&rsquo;ll get to that.)</p>

<p><h4>The JSPs</h4></p>

<p>Now let&rsquo;s revisit our home page JSP.  It&rsquo;s still pretty similar but I&rsquo;m adding a registration link.</p>

<p><div>
<span class="code-listing">Code listing:</span> <code>/WEB-INF/jsp/home.jsp</code>
<pre name="code" class="html">&lt;!DOCTYPE html PUBLIC &ldquo;&ndash;//W3C//DTD XHTML 1.0 Strict//EN&rdquo;</p>

<pre><code>"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&amp;gt; 
</code></pre>

<p>&lt;html&gt;</p>

<pre><code>&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Products for Geeks - GeekWarez&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Welcome to GeekWarez&amp;lt;/h1&amp;gt;

    &amp;lt;div&amp;gt;&amp;lt;a href="account/register.do"&amp;gt;Register&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
</code></pre>

<p>&lt;/html&gt;</pre>
</div></p>

<p>The registration link takes us into the <code>register</code> flow,since the last path segment is <code>register.do</code>.  In our Spring app context we told the flow registry about <code>register.xml</code>, so SWF will know to map requests for <code>/account/register.do</code> to the <code>register</code> flow.</p>

<p>Now we need a registration form.  The following page is our current version of a registration &ldquo;form&rdquo;, but as you can see it isn&rsquo;t really a form at all (yet).  It is just a couple of links:</p>

<p><div>
<span class="code-listing">Code listing:</span> <code>/WEB-INF/jsp/account/registerForm.jsp</code>
<pre name="code" class="html">&lt;!DOCTYPE html PUBLIC &ldquo;&ndash;//W3C//DTD XHTML 1.0 Strict//EN&rdquo;</p>

<pre><code>"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&amp;gt; 
</code></pre>

<p>&lt;html&gt;</p>

<pre><code>&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Register - GeekWarez&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Register&amp;lt;/h1&amp;gt;

    &amp;lt;div&amp;gt;
        &amp;lt;a href="${flowExecutionUrl}&amp;amp;_eventId=submitRegistration"&amp;gt;Submit&amp;lt;/a&amp;gt; |
        &amp;lt;a href="${flowExecutionUrl}&amp;amp;_eventId=cancelRegistration"&amp;gt;Cancel&amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
</code></pre>

<p>&lt;/html&gt;</pre>
</div></p>

<p>The point of the two links is to give the user a way to generate <code>submitRegistration</code> and <code>cancelRegistration</code> events.  We saw in the flow definition that these two events trigger state transitions.  Of special importance is the URL for each of these links.  Notice that by using <code>${flowExecutionUrl}</code>, we&rsquo;re still pointing the user at the same <code>/account/register.do</code> servlet path. That&rsquo;s because we&rsquo;re still working within the <code>register</code> flow.  The <code>${flowExecutionUrl}</code> URL includes an <code>execution</code> HTTP parameter whose value is a key that SWF uses for flow-tracking purposes.  In addition we add an <code>_eventId</code> parameter that we use to drive state transitions.  The event IDs are what we&rsquo;re referencing when we define transitions in the flow definition file.</p>

<p>So really so far all we can do at this point is move back and forth between the home page and the registration page, but we&rsquo;re doing it with Spring Web Flow.</p>

<p><h3>Milestone 2: Spring Web Flow is working</h3></p>

<p>Point your web browser at</p>

<p><center><code><a href="http://localhost:8080/mycart2/home.do">http://localhost:8080/mycart2/home.do</a></code></center></p>

<p>making any adjustments you need to make for the port or application context.  Also note that the context is now <code>mycart2</code> instead of <code>mycart1</code> like it was in the first version of the code.  If you&rsquo;re able to click back and forth between the home page and the registration page, then congrats, Spring Web Flow 2.0 is working!  Celebrate!</p>

<p><div class="outro">
<span class="icon stickyNote">This post is part of a three part series: <a href="http://springinpractice.com/2008/05/05/build-a-shopping-cart-with-spring-web-flow-2-part-1/">Part 1</a> | <a href="http://springinpractice.com/2008/05/06/build-a-shopping-cart-with-spring-web-flow-2-part-2/">Part 2</a> | <a href="http://springinpractice.com/2008/05/07/build-a-shopping-cart-with-spring-web-flow-2-part-3/">Part 3</a></span>
</div></p>

<p><div class="endnote">Post migrated from my Wheeler Software site.</div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a shopping cart with Spring Web Flow 2, part 1]]></title>
    <link href="http://springinpractice.com/2008/05/05/build-a-shopping-cart-with-spring-web-flow-2-part-1/"/>
    <updated>2008-05-05T10:11:08-07:00</updated>
    <id>http://springinpractice.com/2008/05/05/build-a-shopping-cart-with-spring-web-flow-2-part-1</id>
    <content type="html"><![CDATA[<div class="intro">
<span class="icon stickyNote">This post is part of a three-part series: <a href="http://springinpractice.com/2008/05/05/build-a-shopping-cart-with-spring-web-flow-2-part-1/">Part 1</a> | <a href="http://springinpractice.com/2008/05/06/build-a-shopping-cart-with-spring-web-flow-2-part-2/">Part 2</a> | <a href="http://springinpractice.com/2008/05/07/build-a-shopping-cart-with-spring-web-flow-2-part-3/">Part 3</a></span>
</div>


<p>This is the first in a three-part series of posts showing how to get started with Spring Web Flow (SWF) 2.0 by building a simple shopping cart application. We&rsquo;ll do this as a series of steps:</p>

<ol>
<li>First we'll just get Spring MVC working.</li>
<li>We'll use Spring Web Flow to create a minimal flow with a single state.</li>
<li>Finally we'll build the app out to contain multiple flows and subflows that make calls against backend logic.</li>
</ol>


<p>SWF 2.0 is at the time of this writing very new, and there are several differences as compared to SWF 1.0.x. We will not however spend much time discussing those differences; instead we&rsquo;ll just focus on SWF 2.0.</p>

<p>To get the most out of this post, you should already be familiar with Spring in general and Spring MVC in particular.</p>

<h3>An overview of Spring Web Flow</h3>


<p>Spring Web Flow builds upon Spring MVC to support user-level, application-directed control flows.  For example, an e-commerce application may need to guide the end user through a checkout process that spans several web pages. The flow is not simply a multipage form (Spring MVC itself already supports that); rather it is a multistep <em>process</em> involving standard control flow constructions such as decisions (&ldquo;please confirm or cancel your order&rdquo;), loops (&ldquo;we recommend products x, y, z&hellip; add as many as you like to your order&rdquo;) and subflows (&ldquo;are you a new customer? please create an account&rdquo;). In general, implementing such flows is not trivial.  SWF is an elegant solution to just this sort of problem.</p>

<p>To understand better, contrast application-directed interactions with the user-directed interactions that typically constitute the main part of an application&rsquo;s functionality. In user-directed interactions, the end user picks some function from a set of available functions, provides some parameters around that function, and then asks the application to carry it out.  For instance, the end user tells Photoshop to fill a selected region with <span style="background-color:#0F0">evil green</span>.  The app dutifully does just that, and control returns to the end user.</p>

<p>There are many cases, however, in which we want the application to drive a complex interaction between itself and the end user.  Perhaps the most obvious example is the one I mentioned above: the e-commerce checkout process.  See Figure 1 for one possible flow (and in fact this is the flow we&rsquo;re going to implement):</p>

<div style="margin:20px 0;text-align:center">
<div><img src="http://wheelersoftware.s3.amazonaws.com/articles/spring-web-flow-2.0/flow.jpg" alt="Figure 1. A sample checkout flow." /></div>
<div class="caption">Figure 1. A sample checkout flow.</div>
</div>


<p>In the checkout flow above, we have a starting state, an end state, and several intermediate states.  In the first state, we show the customer the contents of a shopping cart, along with some recommended products that the customer may want to buy.  The customer can add any of those products to the shopping cart, or he might decide to move forward by indicating whether he is a new or returning customer.  If he&rsquo;s a new customer, he&rsquo;ll need to create an account; otherwise he can just log in with his existing account.  In either case, he&rsquo;ll need to select a payment method, provide shipping information, and so forth.  At any step along the way he can cancel out of the checkout process.</p>

<h4>Benefits of using Spring Web Flow</h4>


<p>While you can certainly implement that flow without SWF, there are some challenges involved if you&rsquo;re doing it from scratch.  Let&rsquo;s take a look at some of those.</p>

<p><strong>Understanding flow logic.</strong> For one, because the logic behind the flow itself is reasonably complex, it would be nice to be able to isolate the flow and its logic from the various pieces (like JSP pages, business logic, etc.) that make it up.  But the most straightforward implementation of flow logic would most likely involve distributing the flow logic (such as state transitions) across lots of different files.  So one challenge is that you either have to do a lot of extra work to externalize the flow logic, or else you have to live with that logic being distributed, which makes it much harder to understand.</p>

<p><strong>Reusing flow logic.</strong> Another challenge is related to the fact that a flow has a logical structure that stands on its own, and in many cases you&rsquo;d like to be able to reuse that&mdash;either across multiple apps, or else in multiple places within a single app.  This is hard to accomplish without an easy way to isolate that flow.</p>

<p><strong>Getting the implementation right.</strong> A third challenge is just that it&rsquo;s easy to get the technical details wrong. For instance, what happens if the end user hits the browser&rsquo;s back button in the middle of the flow?  If the previous page had a form, we don&rsquo;t usually want the browser to confuse the user with a warning about resubmitting data or whatever.  Coding up flows from scratch means that you have to handle this sort of thing explicitly.  It would be nice not to have to mess around with this kind of thing&mdash;to have it handled automatically for you.</p>

<p>That&rsquo;s enough of an overview for us to get started.  Let&rsquo;s now look at setting up our sample project.</p>

<h3>Spring MVC setup</h3>


<p>Since Spring Web Flow is build on Spring MVC, let&rsquo;s start by getting Spring MVC working.  We&rsquo;ll create a simple home page for our shopping cart, and we&rsquo;ll serve this up using a plain old Spring controller (well, it will be annotated) rather than serving it using Spring Web Flow.  That&rsquo;s because the home page itself isn&rsquo;t part of any particular flow; it simply provides entry points into various flows, such as creating an account, logging in, adding an item to a shopping cart, and checking out.  Besides allowing us to make sure we have Spring MVC working before moving forward, this approach will also allow us to see how to integrate Spring MVC and Spring Web Flow.</p>

<p>For your convenience, here&rsquo;s a download of the minimalistic
(i.e. only Spring MVC, no SWF) shopping cart we&rsquo;re about to take a look at:</p>

<center><span class="icon archive"><a href="http://wheelersoftware.s3.amazonaws.com/articles/spring-web-flow-2.0/mycart1.zip">mycart1.zip</a></span></center>


<p>The download above does not include its dependencies.  You will need to grab those separately.  I&rsquo;ve provided the links below.</p>

<h4>Dependencies for mycart1.zip</h4>


<p>These are all part of the Spring 2.5.4 distribution. Spring Web Flow 2.0 requires Spring 2.5.4 or higher. <a href="http://www.springframework.org/download">[download]</a></p>

<ul class="square">
<li><code>spring.jar</code> (located in <code>/spring-framework-2.5.4/dist</code>)</li>
<li><code>spring-webmvc.jar</code> (located in <code>/spring-framework-2.5.4/dist/modules</code>)</li>
<li><code>commons-logging.jar</code> (located in <code>/spring-framework-2.5.4/jakarta-commons</code>)</li>
</ul>


<p>We will be adding dependencies as we progress; for the moment we&rsquo;re just getting Spring MVC set up.</p>

<h4>Create a Spring MVC controller</h4>


<p>Here&rsquo;s a very simple Spring MVC controller.  We&rsquo;ll be updating this over the course of the article.</p>

<div>
<span class="code-listing">Code listing:</span> <code>mycart.CartController</code>
<pre>package mycart;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class CartController {

    @RequestMapping("/home.do")
    public void doHome() {
    }
}</pre>
</div>


<p>This controller doesn&rsquo;t do much at all.  Basically we&rsquo;re using annotations to map <code>/home.do</code> requests to a JSP.</p>

<h4>Create a JSP</h4>


<p>Here&rsquo;s the home page JSP I just mentioned.  Like <code>CartController</code>, we&rsquo;ll be updating this.</p>

<div>
<span class="code-listing">Code listing:</span> <code>/WEB-INF/jsp/home.jsp</code>
<pre>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt; 
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Products for Geeks - GeekWarez&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Welcome to GeekWarez&lt;/h1&gt;
    &lt;/body&gt;
&lt;/html&gt;</pre>
</div>




<h4>Create web.xml</h4>


<p>Here&rsquo;s our <code>web.xml</code> file:</p>

<div>
<span class="code-listing">Code listing:</span> <code>/WEB-INF/web.xml</code>
<pre name="code" class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
        http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
    version="2.5"&gt;
    
    &lt;!-- Spring MVC front controller. Automatically loads mycart-servlet.xml
         based on servlet name. --&gt;
    &lt;servlet&gt;
        &lt;servlet-name&gt;mycart&lt;/servlet-name&gt;
        &lt;servlet-class&gt;
            org.springframework.web.servlet.DispatcherServlet
        &lt;/servlet-class&gt;
    &lt;/servlet&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;mycart&lt;/servlet-name&gt;
        &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
&lt;/web-app&gt;</pre>
</div>


<p>All we&rsquo;re doing here is creating the Spring MVC <code>DispatcherServlet</code> front controller.  Because we&rsquo;ve named it <code>mycart</code>, the default behavior for <code>DispatcherServlet</code> is to look for a Spring application context configuration file at <code>/WEB-INF/mycart-servlet.xml</code>, which we are about to see.</p>

<p>Eventually this front controller will handle not only our &ldquo;normal&rdquo; non-SWF requests, but also our SWF requests.  However I&rsquo;m getting ahead of myself.</p>

<h4>Create the Spring application context file</h4>


<p>Here&rsquo;s <code>mycart-servlet.xml</code>, which <code>DispatcherServlet</code> loads as just explained:</p>

<div>
<span class="code-listing">Code listing:</span> <code>/WEB-INF/mycart-servlet.xml</code>
<pre name="code" class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-2.5.xsd"&gt;
    
    &lt;!-- This activates post-processors for annotation-based config --&gt;
    &lt;!-- http://www.infoq.com/articles/spring-2.5-part-1 --&gt;
    &lt;context:annotation-config/&gt;
    
    &lt;context:component-scan base-package="mycart"/&gt;
    
    &lt;!-- Enables POJO @Controllers (like CartController) --&gt;
    &lt;bean class=
"org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/&gt;
    
    &lt;!-- Enables annotated methods on POJO @Controllers (like CartController) --&gt;
    &lt;bean class=
"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/&gt;
    
    &lt;!-- Maps a logical view name to a physical resource --&gt;
    &lt;bean id="viewResolver" class=
"org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
        &lt;property name="prefix" value="/WEB-INF/jsp/"/&gt;
        &lt;property name="suffix" value=".jsp"/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;</pre>
</div>


<p>Nothing special here assuming you already know Spring MVC.</p>

<h3>Milestone 1: Spring MVC is working</h3>


<p>At this point you should be able to deploy the application.  Point your browser at</p>

<center><code>http://localhost:8080/mycart1/home.do</code></center>


<p>and you should get a very simple home page.  If so, congratulations, Spring MVC is working.</p>

<p>Now it&rsquo;s time to create our first flow using Spring Web Flow.</p>

<div class="outro">
<span class="icon stickyNote">This post is part of a three-part series: <a href="http://springinpractice.com/2008/05/05/build-a-shopping-cart-with-spring-web-flow-2-part-1/">Part 1</a> | <a href="http://springinpractice.com/2008/05/06/build-a-shopping-cart-with-spring-web-flow-2-part-2/">Part 2</a> | <a href="http://springinpractice.com/2008/05/07/build-a-shopping-cart-with-spring-web-flow-2-part-3/">Part 3</a></span>
</div>




<div class="endnote">Post migrated from my Wheeler Software site.</div>

]]></content>
  </entry>
  
</feed>

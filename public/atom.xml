<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Spring in Practice]]></title>
  <link href="http://springinpractice.com/atom.xml" rel="self"/>
  <link href="http://springinpractice.com/"/>
  <updated>2013-09-15T00:34:26-07:00</updated>
  <id>http://springinpractice.com/</id>
  <author>
    <name><![CDATA[Willie Wheeler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Optimistic locking with Spring Data REST]]></title>
    <link href="http://springinpractice.com/2013/09/14/optimistic-locking-with-spring-data-rest/"/>
    <updated>2013-09-14T20:43:00-07:00</updated>
    <id>http://springinpractice.com/2013/09/14/optimistic-locking-with-spring-data-rest</id>
    <content type="html"><![CDATA[<p>I&rsquo;m working on a web service for a document management system, where clients grab documents from the web service, modify them and submit the updates. Since multiple clients can all grab the same document at the same time, we needed to implement an <a href="http://c2.com/cgi/wiki?OptimisticLocking">optimistic locking</a> scheme. In this scheme, each document has a version number, and when the client submits an update to the service, the service checks to see whether the submitted version number baseline is still the most recent one in the database. If so, we increment the version number and the update proceeds. Otherwise, we throw an exception indicating a conflict.</p>

<!-- more -->


<p>From a technology perspective we&rsquo;re using <a href="http://projects.spring.io/spring-data-rest/">Spring Data REST</a>, <a href="http://projects.spring.io/spring-data-jpa/">Spring Data JPA</a>, JPA and Hibernate to implement the web service. So I originally tried to use <a href="http://docs.oracle.com/javaee/6/api/javax/persistence/Version.html">JPA&rsquo;s @Version annotation</a>. But for reasons I describe <a href="http://stackoverflow.com/questions/18780621/does-spring-data-rest-support-jpa-version">here</a> it doesn&rsquo;t work. <a href="https://twitter.com/mdeinum">Marten Deinum</a> notes further that this isn&rsquo;t really a problem with Spring Data REST <em>per se</em>; it affects e.g. form submissions too. At Marten&rsquo;s suggestion, I created an <a href="https://jira.springsource.org/browse/DATAREST-160">enhancement request</a>, but since I needed something now, I set out to implement optimisitic locking for Spring Data REST without <code>@Version</code>.</p>

<p>The trick is to listen for events that are fired before the update occurs. Spring Data REST fires such events, but so does JPA, and I decided to use JPA&rsquo;s events instead to ensure that the version number get/test/increment happens as part of a single atomic transaction. (My guess is that the Spring Data REST <a href="http://docs.spring.io/spring-data/rest/docs/1.1.0.M1/reference/htmlsingle/#events-chapter">BeforeSaveEvent</a> fires before entering the transaction.)</p>

<p>Here&rsquo;s the code. First, here&rsquo;s an interface for versioned entities.</p>

<pre><code>package myapp.entity;

public interface VersionedEntity {

    Long getVersion();

    void setVersion(Long version);
}
</code></pre>

<p>Next we have an abstract base class for versioned entities. I could have done a mixin-style implementation here (using, e.g., <a href="http://www.eclipse.org/aspectj/doc/next/progguide/language-interType.html">AspectJ inter-type declarations</a>), but I decided to keep it simple for now.</p>

<pre><code>package myapp.entity;

import javax.persistence.Column;
import javax.persistence.EntityListeners;
import javax.persistence.MappedSuperclass;
import myapp.repo.listener.OptimisticLockListener;

@MappedSuperclass
@EntityListeners(OptimisticLockListener.class)
public abstract class AbstractVersionedEntity implements VersionedEntity {

    @Column(name = "VERSION")
    private Long version;

    @Override
    public Long getVersion() { return version; }

    @Override
    public void setVersion(Long version) { this.version = version; }
}
</code></pre>

<p>Notice the <code>@EntityListener</code> annotation. This tells JPA which class will listen for JPA lifecycle events. Here&rsquo;s the <code>OptimisticLockListener</code>.</p>

<pre><code>package myapp.repo.listener;

import javax.persistence.PreUpdate;
import org.springframework.stereotype.Component;
import myapp.entity.VersionedEntity;
import myapp.util.ApplicationContextProvider;

public class OptimisticLockListener {

    @PreUpdate
    public void preUpdate(Object entity) {
        if (entity instanceof VersionedEntity) {
            getChecker().check((VersionedEntity) entity);
        }
    }

    private OptimisticLockChecker getChecker() {
        return ApplicationContextProvider
            .getApplicationContext()
            .getBean(OptimisticLockChecker.class);
    }
}
</code></pre>

<p>In the listing above we grab an <code>OptimisticLockChecker</code> and then run the check. I&rsquo;ve implemented that as a separate class because I&rsquo;m going to need the application&rsquo;s JPA <code>EntityManager</code> to do the version check, and I need a managed bean to use <code>@PersistenceContext</code> to inject the <code>EntityManager</code>. Unfortunately, <a href="http://stackoverflow.com/questions/12951701/how-to-get-entity-manager-or-transaction-in-jpa-listener">JPA 2.0 doesn&rsquo;t treat entity listeners as managed beans</a> (apparently that will change in JPA 2.1). That&rsquo;s why there&rsquo;s a separate <code>OptimisticLockChecker</code> class.</p>

<p><a href="https://twitter.com/vguhesan">Venkatt Guhesan</a> offers <code>ApplicationContextProvider</code> as a <a href="http://mythinkpond.wordpress.com/2010/03/22/spring-application-context/">clever way to get the app&rsquo;s context from an unmanaged instance</a>. (Note that we can&rsquo;t simply create a new <code>ClassPathXmlApplicationContext</code> from the Spring configuration files since we want to use the same <code>EntityManagerFactory</code> that the rest of the app is using.) Here&rsquo;s the technique.</p>

<pre><code>package myapp.util;

import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

public class ApplicationContextProvider implements ApplicationContextAware {
    private static ApplicationContext applicationContext;

    public static ApplicationContext getApplicationContext() { return applicationContext; }

    @Override
    public void setApplicationContext(ApplicationContext appContext) throws BeansException {
        applicationContext = appContext;
    }
}
</code></pre>

<p>Finally, let&rsquo;s look at the <code>OptimisticLockChecker</code> itself.</p>

<pre><code>package myapp.repo.listener;

import javax.persistence.EntityManager;
import javax.persistence.OptimisticLockException;
import javax.persistence.PersistenceContext;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Component;
import myapp.entity.VersionedEntity;

@Component
public class OptimisticLockChecker {
    @PersistenceContext private EntityManager entityManager;

    public void check(VersionedEntity entity) {
        Long submittedVersion = entity.getVersion();
        if (submittedVersion == null) {
            throw new RuntimeException("Submitted entity must have a version");
        }

        Object copy = BeanUtils.instantiate(entity.getClass());
        BeanUtils.copyProperties(entity, copy);
        entityManager.refresh(entity);
        Long latestVersion = entity.getVersion();
        BeanUtils.copyProperties(copy, entity);

        if (submittedVersion != latestVersion) {
            throw new OptimisticLockException(
                    "Stale entity: submitted version " + submittedVersion
                    + ", but latest version is " + latestVersion);
        }

        entity.setVersion(entity.getVersion() + 1);
    }
}
</code></pre>

<p>Despite appearances, the code is a little tricky because we&rsquo;re trying to compare an entity version in the persistence context with an entity version in the database, and by design JPA hides the database from the developer. While we can certainly use JDBC to grab the entity version in the database, I wanted to avoid having to map all the entities to &ldquo;get-latest-version&rdquo; SQL queries since we already have all the table names mapped in the entity classes. I suppose I could have read the contents of the <code>@Table</code> annotation and created dynamic queries, but I wanted to do something cleaner.</p>

<p>When we get the entity, we cache a copy using Spring&rsquo;s <code>BeanUtils.copyProperties()</code> utility. That allows us to refresh the original entity, which puts it back in its database state, allowing us to see the latest version number in the database. After that, we put the entity back into its modified state by doing another <code>BeanUtils.copyProperties()</code>, this time from the copy to the entity.</p>

<p>(Instead of cloning, I would have preferred to detach the entity, load the database entity into the persistence context, compare the two, and then reattach the entity to the persistence context. Unfortunately, while Hibernate supports reattachment, <a href="http://stackoverflow.com/questions/912659/what-is-the-proper-way-to-re-attach-detached-objects-in-hibernate">JPA doesn&rsquo;t</a>. JPA supports merges, but this leaves the original entity detached, which is no good since that&rsquo;s the reference that JPA is going to try to save after the entity listener&rsquo;s <code>@PreUpdate</code> handler completes its processing. See <a href="http://java.dzone.com/articles/saving_detatched_entities">this article</a> for more information on these topics.)</p>

<p>Now our entity is back to its original state, and we have both the submitted and the latest version numbers. So we compare and either throw an exception or else increment the version number.</p>

<p>Perhaps the Spring Data REST guys will provide more direct support for <code>@Version</code> (or some suitable alternative) at some future point. Uuntil then, I hope the approach above proves useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress migration]]></title>
    <link href="http://springinpractice.com/2013/09/07/octopress-migration/"/>
    <updated>2013-09-07T19:32:00-07:00</updated>
    <id>http://springinpractice.com/2013/09/07/octopress-migration</id>
    <content type="html"><![CDATA[<p>I&rsquo;m in the process of migrating the blog from Wordpress to <a href="http://octopress.org/">Octopress</a>. Octopress is a lot easier to hack and in fact was designed for the hacker crowd. Plus I like being able to manage my posts in source control instead of in a database. Makes sense for all kinds of reasons.</p>

<p>It might take a bit for the dust to settle, but that&rsquo;s what&rsquo;s going on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SeaJUG talk on Spring Data JPA]]></title>
    <link href="http://springinpractice.com/2013/06/08/seajug-talk-on-spring-data-jpa-spring-data-rest-and-spring-hateoas/"/>
    <updated>2013-06-08T16:17:00-07:00</updated>
    <id>http://springinpractice.com/2013/06/08/seajug-talk-on-spring-data-jpa-spring-data-rest-and-spring-hateoas</id>
    <content type="html"><![CDATA[<p><img src="http://springinpractice.s3.amazonaws.com/blog/images/seajug_expedia.jpg" alt="SeaJUG presentation at Expedia" /></p>

<p>Last month I did a talk at Expedia on <a href="http://www.springsource.org/spring-data/jpa">Spring Data JPA</a>, <a href="http://www.springsource.org/spring-data/rest">Spring Data REST</a> and <a href="https://github.com/SpringSource/spring-hateoas">Spring HATEOAS</a> for the <a href="http://www.seajug.org/">Seattle Java User&rsquo;s Group</a>.</p>

<p><a href="http://vimeo.com/66717404">Here&rsquo;s the video.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring in Practice now available]]></title>
    <link href="http://springinpractice.com/2013/05/08/spring-in-practice-now-available/"/>
    <updated>2013-05-08T23:42:00-07:00</updated>
    <id>http://springinpractice.com/2013/05/08/spring-in-practice-now-available</id>
    <content type="html"><![CDATA[<p><img src="http://springinpractice.s3.amazonaws.com/blog/images/sip_on_shelves.jpg" alt="SiP at Barnes &amp; Noble" /></p>

<p>Spring in Practice is now available!</p>

<p>It&rsquo;s also the Deal of the Day today, which means half off if you buy it today (May 8, 2013) from Manning. Use code <strong>dotd0508au</strong> at <a href="http://www.manning.com/wheeler/">www.manning.com/wheeler</a>.</p>

<p>Josh and I hope that everybody enjoys the book. It was a lot of work, but I&rsquo;m very happy with the end result.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Renaming node classes when using Spring Data Neo4j]]></title>
    <link href="http://springinpractice.com/2012/12/09/renaming-node-classes-when-using-spring-data-neo4j/"/>
    <updated>2012-12-09T15:33:00-08:00</updated>
    <id>http://springinpractice.com/2012/12/09/renaming-node-classes-when-using-spring-data-neo4j</id>
    <content type="html"><![CDATA[<p>This is one of those posts where I&rsquo;m just jotting down some notes for my own future use, but someone else may find this useful.</p>

<p>I&rsquo;m going to show how to rename a node entity class when using Spring Data Neo4j. I&rsquo;m talking about the fully-qualified classname here, so it applies when we want to rename a package too.</p>

<!-- more -->


<p>First, suppose my old classname is <code>org.zkybase.cmdb.api.domain.ApplicationEntity</code>. If I go into the Neo4j shell, I can see that I have a couple of nodes of this type:</p>

<pre><code>neo4j-sh (0)$ start n=node:__types__(className="org.zkybase.cmdb.api.domain.ApplicationEntity") return n
+-----------------------------------------------------------------------------------------------------+
| n                                                                                                   |
+-----------------------------------------------------------------------------------------------------+
| Node[36]{__type__-&gt;"org.zkybase.cmdb.api.domain.ApplicationEntity",name-&gt;"Zkybase"}                 |
| Node[49]{name-&gt;"Spring in Practice Blog",__type__-&gt;"org.zkybase.cmdb.api.domain.ApplicationEntity"} |
+-----------------------------------------------------------------------------------------------------+
2 rows, 1 ms
</code></pre>

<p>From the above, it <i>looks like</i> you can just go to the nodes themselves and change their <code>__type__</code> fields:</p>

<pre><code>neo4j-sh (0)$ cd -a 36
neo4j-sh (Zkybase,36)$ ls
*__type__ =[org.zkybase.cmdb.api.domain.ApplicationEntity]
*name     =[Zkybase]
neo4j-sh (Zkybase,36)$ set __type__ "org.zkybase.api.domain.entity.ApplicationEntity"
neo4j-sh (Zkybase,36)$ ls
*__type__ =[org.zkybase.api.domain.entity.ApplicationEntity]
*name     =[Zkybase]
</code></pre>

<p>But then when you try to find the node using the query, it doesn&rsquo;t show up.</p>

<pre><code>neo4j-sh (Zkybase,36)$ start n=node:__types__(className="org.zkybase.api.domain.entity.ApplicationEntity") return n
+---+
| n |
+---+
+---+
0 rows, 1 ms
</code></pre>

<p>Moreover, when you re-run the original query, the node whose <code>__type__</code> we changed still shows up.</p>

<p>The problem is that we need to reindex the nodes. Spring Data Neo4j uses an index called <code>__types__</code>, and we need to replace the old index entries with some new ones.</p>

<p>Let&rsquo;s see what&rsquo;s under the old classname, using <code>index -g</code> to get the relevant nodes from the <code>__types__</code> index:</p>

<pre><code>neo4j-sh (Zkybase,36)$ index -g __types__ className "org.zkybase.cmdb.api.domain.ApplicationEntity"
(me)

(Spring in Practice Blog,49)
</code></pre>

<p>And under the new classname:</p>

<pre><code>neo4j-sh (Zkybase,36)$ index -g __types__ className "org.zkybase.api.domain.entity.ApplicationEntity"
neo4j-sh (Zkybase,36)$ 
</code></pre>

<p>We can fix that using <code>index -i</code>, which indexes the current entity:</p>

<pre><code>neo4j-sh (Zkybase,36)$ index -i __types__ className "org.zkybase.api.domain.entity.ApplicationEntity"
neo4j-sh (Zkybase,36)$ cd -a 49
neo4j-sh (Spring in Practice Blog,49)$ index -i __types__ className "org.zkybase.api.domain.entity.ApplicationEntity"
neo4j-sh (Spring in Practice Blog,49)$ cd -a 36
neo4j-sh (Zkybase,36)$ index -g __types__ className "org.zkybase.api.domain.entity.ApplicationEntity"
(me)

(Spring in Practice Blog,49)
</code></pre>

<p>We still need to clean up the old entries, though, because they&rsquo;re still there. We use <code>index -r</code> to remove the index entry for the current node:</p>

<pre><code>neo4j-sh (Zkybase,36)$ index -r __types__ className "org.zkybase.cmdb.api.domain.ApplicationEntity"
neo4j-sh (Zkybase,36)$ cd -a 49
neo4j-sh (Spring in Practice Blog,49)$ index -r __types__ className "org.zkybase.cmdb.api.domain.ApplicationEntity"
neo4j-sh (Spring in Practice Blog,49)$ index -g __types__ className "org.zkybase.cmdb.api.domain.ApplicationEntity"
neo4j-sh (Spring in Practice Blog,49)$ 
</code></pre>

<p>That&rsquo;s it. This was the result of about 15 minutes of investigation, so there&rsquo;s a good chance there&rsquo;s more going on than what I&rsquo;ve described. Let me know and I&rsquo;ll update the post accordingly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pageable custom queries with Spring Data JPA]]></title>
    <link href="http://springinpractice.com/2012/06/30/pageable-custom-queries-with-spring-data-jpa/"/>
    <updated>2012-06-30T12:41:00-07:00</updated>
    <id>http://springinpractice.com/2012/06/30/pageable-custom-queries-with-spring-data-jpa</id>
    <content type="html"><![CDATA[<p>In previous posts I explained how you can use Spring Data JPA to <a href="http://springinpractice.com/2012/04/24/autogenerate-daos-and-queries-using-spring-data-jpa/">create repositories that support custom queries</a>, as well as to <a href="http://springinpractice.com/2012/05/11/pagination-and-sorting-with-spring-data-jpa/">support paging in your app</a>. You might wonder whether you can use these together.</p>

<p>The answer is yes. It works just like you would expect:</p>

<pre><code>import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;

public interface IncidentRepo extends JpaRepository&lt;Incident, Long&gt; {

    Page&lt;Incident&gt; findByProblemId(Long problemId, Pageable pageable);
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to run JavaScript from Java]]></title>
    <link href="http://springinpractice.com/2012/05/13/how-to-run-javascript-from-java/"/>
    <updated>2012-05-13T11:02:00-07:00</updated>
    <id>http://springinpractice.com/2012/05/13/how-to-run-javascript-from-java</id>
    <content type="html"><![CDATA[<p>Java 6 comes with the <a href="http://www.mozilla.org/rhino/">Rhino JavaScript engine</a>, which makes it easy to run JavaScript from inside your Java app. There are different situations in which you might want to do this. Chapter 9 of <a href="http://www.manning.com/wheeler/">Spring in Practice</a> affords a good example. There we&rsquo;re implementing a rich-text comment engine based on the WMD editor that <a href="http://stackoverflow.com">Stack Overflow</a> uses. We have a <code>showdown.js</code> script that maps Markdown to HTML, and we want to run it in two places:</p>

<ul>
<li>on the client to present a preview pane</li>
<li>on the server to store the Markdown as HTML for easy presentation (as opposed to running the script against every comment dynamically)</li>
</ul>


<p>Here&rsquo;s how we can run it on the server:</p>

<pre><code>import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

...

public final class RichTextFilter implements TextFilter {
    @Inject private File showdownJsFile;

    private String markdownToHtml(String markdown) {
        try {
            ScriptEngineManager mgr = new ScriptEngineManager();
            ScriptEngine engine = mgr.getEngineByName("JavaScript");
            engine.eval(showdownJs);
            engine.eval("var markdown = '" + markdown + "';");
            engine.eval("var converter = new Showdown.converter();");
            engine.eval("var html = converter.makeHtml(markdown);");
            return (String) engine.get("html");
        } catch (ScriptException e) {
            // Shouldn't happen unless somebody breaks the script
            throw new RuntimeException(e);
        }
    }

    ... other stuff ...
}
</code></pre>

<p>To see how to inject the File into the class in Spring, see my post <a href="http://springinpractice.com/2012/05/12/injecting-a-file-from-the-classpath-into-a-bean/">Injecting a file from the classpath into a bean</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Injecting a file from the classpath into a bean]]></title>
    <link href="http://springinpractice.com/2012/05/12/injecting-a-file-from-the-classpath-into-a-bean/"/>
    <updated>2012-05-12T23:29:00-07:00</updated>
    <id>http://springinpractice.com/2012/05/12/injecting-a-file-from-the-classpath-into-a-bean</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a quick tip for you.</p>

<p>Sometimes you need to inject a <code>java.io.File</code> from your classpath into a bean, but you don&rsquo;t want to have to spell out the absolute path (even in a configuration file). Never fear. It&rsquo;s easy:</p>

<pre><code>&lt;bean id="tagProviderResource" class="org.springframework.core.io.ClassPathResource"&gt;
    &lt;constructor-arg value="/htmlcleaner.xml" /&gt;
&lt;/bean&gt;

&lt;util:property-path id="tagProviderFile" path="tagProviderResource.file" /&gt;

&lt;bean id="tagProvider" class="org.htmlcleaner.ConfigFileTagProvider"&gt;
    &lt;constructor-arg ref="tagProviderFile" /&gt;
&lt;/bean&gt;
</code></pre>

<p>In the configuration above, I used <code>ClassPathResource</code> to find the <code>htmlcleaner.xml</code> resource on the classpath. Then I used the handy <code>&lt;util:property-path&gt;</code> tag to assign the resource&rsquo;s <code>file</code> property its own ID. Finally, I inject the <code>File</code> using constructor injection.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pagination and sorting with Spring Data JPA]]></title>
    <link href="http://springinpractice.com/2012/05/11/pagination-and-sorting-with-spring-data-jpa/"/>
    <updated>2012-05-11T01:31:00-07:00</updated>
    <id>http://springinpractice.com/2012/05/11/pagination-and-sorting-with-spring-data-jpa</id>
    <content type="html"><![CDATA[<p>In an <a href="http://springinpractice.com/2012/04/24/autogenerate-daos-and-queries-using-spring-data-jpa/">earlier post</a> I introduced Spring Data JPA, which makes it really easy to create a DAO layer. I didn&rsquo;t get into too much depth, so this time I want to explore a couple of cool features that the DAOs support: pagination and sorting.</p>

<!-- more -->


<p>Pagination and sorting are useful when you have long lists that you want the user to be able to navigate. Here for example is a UI for a runbook app I&rsquo;m building. One of the things it allows the user to do is view deployment logs, which we typically want to see in reverse chronological order. Also, since there are lots of logs, we want to page.</p>

<p><img src="http://springinpractice.s3.amazonaws.com/blog/images/2012-05-11-pagination-and-sorting-with-spring-data-jpa/pagination-1.jpg" alt="Pagination screenshot" /></p>

<p>There are different ways to design a pagination system from a user experience perspective. Here I&rsquo;ve done something pretty typical: I have links for first/previous/next/last, and then I show a bounded set of pages around the current page.</p>

<h2>The repository</h2>

<p>How does Spring Data JPA help? Here&rsquo;s my <code>DeploymentRepo</code> interface:</p>

<pre><code>package com.example.repo;

import org.springframework.data.jpa.repository.JpaRepository;
import com.example.model.Deployment;

public interface DeploymentRepo extends JpaRepository&lt;Deployment, Long&gt; { }
</code></pre>

<p>The <code>JpaRepository</code> interface extends Spring Data&rsquo;s <code>PagingAndSortingRepository</code> interface, so I get some paging/sorting finders for free.</p>

<h2>The service</h2>

<p>I have a simple service bean that calls the repo:</p>

<pre><code>package com.example.service.impl;

import javax.inject.Inject;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.repo.DeploymentRepo;
import com.example.model.Deployment;
import com.example.service.DeploymentLogService;

@Service
@Transactional
public class DeploymentLogServiceImpl implements DeploymentLogService {
    private static final int PAGE_SIZE = 50;

    @Inject private DeploymentRepo deploymentRepo;

    public Page&lt;Deployment&gt; getDeploymentLog(Integer pageNumber) {
        PageRequest request =
            new PageRequest(pageNumber - 1, PAGE_SIZE, Sort.Direction.DESC, "startTime");
        return deploymentRepo.findAll(pageRequest);
    }
}
</code></pre>

<p>Spring Data uses 0-indexed pages, but I want my service interface to use 1-indexed pages (they will be user-visible and I want the page numbers to be intuitive), so I make the appropriate adjustment in the request. I specify the page size (50 deployments per page), sort direction, and also one or more property names to act as sort keys. Here I&rsquo;ve chosen <code>startTime</code>, which is a timestamp for the start of the deployment.</p>

<p>That takes care of the Spring Data JPA part, but just for fun, I&rsquo;ll show you a simplified version of the controller method and JSP too.</p>

<h2>The controller</h2>

<p>Here&rsquo;s the controller method:</p>

<pre><code>@RequestMapping(value = "/pages/{pageNumber}", method = RequestMethod.GET)
public String getRunbookPage(@PathVariable Integer pageNumber, Model model) {
    Page&lt;Deployment&gt; page = deploymentService.getDeploymentLog(pageNumber);

    int current = page.getNumber() + 1;
    int begin = Math.max(1, current - 5);
    int end = Math.min(begin + 10, page.getTotalPages());

    model.addAttribute("deploymentLog", page);
    model.addAttribute("beginIndex", begin);
    model.addAttribute("endIndex", end);
    model.addAttribute("currentIndex", current);

    return "deploymentLog";
}
</code></pre>

<p>Note again that I&rsquo;ve adjusted the page numbers to convert Spring Data&rsquo;s 0-indexing to my app&rsquo;s 1-indexing.</p>

<p>I&rsquo;ve precalculated the begin/end indices because JSTL doesn&rsquo;t have the min and max functions, and anyway, it&rsquo;s cleaner to do this sort of thing in the controller.</p>

<h2>The JSP</h2>

<p>Finally here&rsquo;s the page navigation in the JSP. It uses the <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a> library for the UI, so that&rsquo;s where the various CSS elements come from.</p>

<pre><code>&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;

&lt;c:url var="firstUrl" value="/pages/1" /&gt;
&lt;c:url var="lastUrl" value="/pages/${deploymentLog.totalPages}" /&gt;
&lt;c:url var="prevUrl" value="/pages/${currentIndex - 1}" /&gt;
&lt;c:url var="nextUrl" value="/pages/${currentIndex + 1}" /&gt;

&lt;div class="pagination"&gt;
    &lt;ul&gt;
        &lt;c:choose&gt;
            &lt;c:when test="${currentIndex == 1}"&gt;
                &lt;li class="disabled"&gt;&lt;a href="#"&gt;&amp;lt;&amp;lt;&lt;/a&gt;&lt;/li&gt;
                &lt;li class="disabled"&gt;&lt;a href="#"&gt;&amp;lt;&lt;/a&gt;&lt;/li&gt;
            &lt;/c:when&gt;
            &lt;c:otherwise&gt;
                &lt;li&gt;&lt;a href="${firstUrl}"&gt;&amp;lt;&amp;lt;&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="${prevUrl}"&gt;&amp;lt;&lt;/a&gt;&lt;/li&gt;
            &lt;/c:otherwise&gt;
        &lt;/c:choose&gt;
        &lt;c:forEach var="i" begin="${beginIndex}" end="${endIndex}"&gt;
            &lt;c:url var="pageUrl" value="/pages/${i}" /&gt;
            &lt;c:choose&gt;
                &lt;c:when test="${i == currentIndex}"&gt;
                    &lt;li class="active"&gt;&lt;a href="${pageUrl}"&gt;&lt;c:out value="${i}" /&gt;&lt;/a&gt;&lt;/li&gt;
                &lt;/c:when&gt;
                &lt;c:otherwise&gt;
                    &lt;li&gt;&lt;a href="${pageUrl}"&gt;&lt;c:out value="${i}" /&gt;&lt;/a&gt;&lt;/li&gt;
                &lt;/c:otherwise&gt;
            &lt;/c:choose&gt;
        &lt;/c:forEach&gt;
        &lt;c:choose&gt;
            &lt;c:when test="${currentIndex == deploymentLog.totalPages}"&gt;
                &lt;li class="disabled"&gt;&lt;a href="#"&gt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
                &lt;li class="disabled"&gt;&lt;a href="#"&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
            &lt;/c:when&gt;
            &lt;c:otherwise&gt;
                &lt;li&gt;&lt;a href="${nextUrl}"&gt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="${lastUrl}"&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
            &lt;/c:otherwise&gt;
        &lt;/c:choose&gt;
    &lt;/ul&gt;
&lt;/div&gt;
</code></pre>

<p>Spring Data JPA makes it very nice and simple. And Twitter Bootstrap looks great too.</p>
]]></content>
  </entry>
  
</feed>

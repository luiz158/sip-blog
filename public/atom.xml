<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Spring in Practice]]></title>
  <link href="http://springinpractice.com/atom.xml" rel="self"/>
  <link href="http://springinpractice.com/"/>
  <updated>2013-10-25T01:43:30-07:00</updated>
  <id>http://springinpractice.com/</id>
  <author>
    <name><![CDATA[Willie Wheeler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Know which apps are hitting your web service]]></title>
    <link href="http://springinpractice.com/2013/10/25/know-which-apps-are-hitting-your-web-service/"/>
    <updated>2013-10-25T00:42:00-07:00</updated>
    <id>http://springinpractice.com/2013/10/25/know-which-apps-are-hitting-your-web-service</id>
    <content type="html"><![CDATA[<p>When creating a web service, it&rsquo;s often useful to know which apps are hitting it. I don&rsquo;t mean which users, but instead which apps. The reason is that you may want to coordinate with some other team on something. For example, maybe the team is being too aggressive about request retries, or maybe you want to alert the team to a change in the API. Whatever the reason, it&rsquo;s good to know which apps are calling your service.</p>

<p>HTTP has a <code>User-Agent</code> header that can help here. One possible approach is to make that a required header. Unfortunately, this approach isn&rsquo;t ideal. The problem is that HTTP client libraries usually set that header automatically. So if the client application forgets to set the header explicitly, you end up with user agents like <code>Apache-HttpClient/release (java 1.5)</code>, which isn&rsquo;t much help at all.</p>

<p>An approach I like better is to define a custom header and make it required. I use <code>X-User-Agent</code>, since it really is a user agent we&rsquo;re talking about here.</p>

<p>Here&rsquo;s how to implement this with a servlet filter. No Spring involved here at all; it&rsquo;s just servlet stuff.</p>

<pre><code>package com.myapp.web.filter;

import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class XUserAgentFilter implements Filter {
    private static final String X_USER_AGENT = "X-User-Agent";

    private String errorJson;

    public XUserAgentFilter() {
        String message = 
            "HTTP header '" + X_USER_AGENT + "' is required. Please set it to your application name so we know " +
            "who to contact if there's an issue.";
        this.errorJson = "{ " + wrap("message") + " : " + wrap(message) + " }";
    }

    private String wrap(String s) { return "\"" + s + "\""; }

    @Override
    public void init(FilterConfig config) throws ServletException { }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {

        HttpServletRequest httpRequest = (HttpServletRequest) request;
        HttpServletResponse httpResponse = (HttpServletResponse) response;

        if (httpRequest.getHeader(X_USER_AGENT) == null) {
            httpResponse.setStatus(422);
            httpResponse.getWriter().println(errorJson);
        } else {
            chain.doFilter(request, response);
        }
    }

    @Override
    public void destroy() { }
}
</code></pre>

<p>Of course, you need to configure this filter and a filter mapping in your <code>web.xml</code> file.</p>

<p>In the next post I&rsquo;ll show you how to set up your Spring <code>RestTemplate</code> to send the <code>X-User-Agent</code> header with each request automatically.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating JSON error object responses with Spring Web MVC]]></title>
    <link href="http://springinpractice.com/2013/10/09/generating-json-error-object-responses-with-spring-web-mvc/"/>
    <updated>2013-10-09T00:39:00-07:00</updated>
    <id>http://springinpractice.com/2013/10/09/generating-json-error-object-responses-with-spring-web-mvc</id>
    <content type="html"><![CDATA[<p>The other day I wrote a post called <a href="http://springinpractice.com/2013/10/07/handling-json-error-object-responses-with-springs-resttemplate/">Handling JSON error object responses with Spring&rsquo;s RestTemplate</a>. Judging by the Twitter activity, people found it useful, so this time around I&rsquo;m going to write about the other side of the equation, which is <em>generating</em> the JSON error objects using Spring Web MVC. Something like this:</p>

<pre><code>{
  "code": "InvalidRequest",
  "message": "Invalid doodad",
  "fieldErrors": [
    {
      "resource": "doodadResource",
      "field": "key",
      "code": "NotNull",
      "message": "may not be null"
    },
    {
      "resource": "doodadResource",
      "field": "name",
      "code": "NotNull",
      "message": "may not be null"
    }
  ]
}
</code></pre>

<p>There are various ways to do this, but Spring 3.2 introduces a pretty elegant approach via the <code>@ControllerAdvice</code> annotation. The basic concept here is that we can define AOP-like &ldquo;advice&rdquo; around Spring Web MVC controllers. This advice captures exceptions and then maps them to JSON objects, which the advice sends in the response body. Of course we can also send the appropriate HTTP status code in the headers too.</p>

<!-- more -->


<p>(You can find out more about <code>@ControllerAdvice</code> and <code>@ExceptionHandler</code> in the post <a href="http://www.baeldung.com/2013/01/31/exception-handling-for-rest-with-spring-3-2/">Error Handling for REST with Spring 3</a> by <a href="https://twitter.com/baeldung">Eugen Paraschiv</a>.)</p>

<p>Note that the error-triggering event doesn&rsquo;t really have to be an exception <em>per se</em>. For example, we might want bean validation errors or authorization errors&mdash;neither of which manifests itself as an exception&mdash;to map to JSON error objects. The key is to have these triggers generate exceptions that we can capture using the <code>@ControllerAdvice</code> component.</p>

<p>Let&rsquo;s look at an example involving bean validation. Here we have a controller. If the incoming resource is invalid, we want to generate a JSON error object. So first we do this:</p>

<pre><code>package myapp.web.controller;

... various imports ...

@Controller
@RequestMapping("/doodads")
public class DoodadController {
    @Inject private DoodadService doodadService;

    @RequestMapping(
            value = "/{id}",
            method = RequestMethod.PUT,
            consumes = MediaType.APPLICATION_JSON_VALUE)
    public void updateDoodad(
            @PathVariable Long id,
            @RequestBody @Valid DoodadResource doodad,
            BindingResult bindingResult) {

        if (bindingResult.hasErrors()) {
            throw new InvalidRequestException("Invalid doodad", bindingResult);
        }

        doodadService.updateDoodad(doodad);
    }   
}
</code></pre>

<p>Note that <code>InvalidRequestException</code> is just a custom exception I created that takes an <code>Errors</code> object as an argument. (<code>BindingResult</code> implements <code>Errors</code>.) Just for completeness, here&rsquo;s <code>InvalidRequestException</code>:</p>

<pre><code>package myapp.exception;

import org.springframework.validation.Errors;

@SuppressWarnings("serial")
public class InvalidRequestException extends RuntimeException {
    private Errors errors;

    public InvalidRequestException(String message, Errors errors) {
        super(message);
        this.errors = errors;
    }

    public Errors getErrors() { return errors; }
}
</code></pre>

<p>So far so good. But now we need that <code>@ControllerAdvice</code> to capture the <code>InvalidRequestException</code> and generate the JSON error object:</p>

<pre><code>package myapp.web.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import myapp.binding.ErrorResource;
import myapp.binding.FieldErrorResource;
import myapp.exception.InvalidRequestException;

@ControllerAdvice
public class MyExceptionHandler extends ResponseEntityExceptionHandler {

    @ExceptionHandler({ InvalidRequestException.class })
    protected ResponseEntity&lt;Object&gt; handleInvalidRequest(RuntimeException e, WebRequest request) {
        InvalidRequestException ire = (InvalidRequestException) e;
        List&lt;FieldErrorResource&gt; fieldErrorResources = new ArrayList&lt;&gt;();

        List&lt;FieldError&gt; fieldErrors = ire.getErrors().getFieldErrors();
        for (FieldError fieldError : fieldErrors) {
            FieldErrorResource fieldErrorResource = new FieldErrorResource();
            fieldErrorResource.setResource(fieldError.getObjectName());
            fieldErrorResource.setField(fieldError.getField());
            fieldErrorResource.setCode(fieldError.getCode());
            fieldErrorResource.setMessage(fieldError.getDefaultMessage());
            fieldErrorResources.add(fieldErrorResource);
        }

        ErrorResource error = new ErrorResource("InvalidRequest", ire.getMessage());
        error.setFieldErrors(fieldErrorResources);

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        return handleExceptionInternal(e, error, headers, HttpStatus.UNPROCESSABLE_ENTITY, request);
    }

    ... other handlers for other exceptions ...
}
</code></pre>

<p>The important pieces here are <code>@ControllerAdvice</code> (which derives from <code>@Controller</code>, so we can component scan it), <code>ResponseEntityExceptionHandler</code> (provides the <code>handleExceptionInternal()</code> method), and <code>@ExceptionHandler</code> annotation. <code>@ExceptionHandler</code> accepts an array of match exceptions, and then its implementation builds the JSON error object, which here involves custom <code>ErrorResource</code> and <code>FieldErrorResource</code> beans that can be whatever we want to display to the client. Finally we pass response-related information to <code>handleExceptionInternal()</code>, where the error object ends up as the response body. Here we&rsquo;re using &ldquo;Unprocessable Entity&rdquo; (HTTP 422), a WebDAV extension to HTTP, since &ldquo;Bad Request&rdquo; (HTTP 400) is for syntactic rather than semantic errors. (See <a href="http://www.bennadel.com/blog/2434-HTTP-Status-Codes-For-Invalid-Data-400-vs-422.htm">HTTP Status Codes For Invalid Data: 400 vs. 422</a> by Ben Nadel for more information.)</p>

<p>Again in the interest of completeness, here are the error objects I&rsquo;m using. These are just examples of what&rsquo;s possible; choose error representations that fit your needs. First, the top-level error object:</p>

<pre><code>package myapp.binding;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@JsonIgnoreProperties(ignoreUnknown = true)
public class ErrorResource {
    private String code;
    private String message;
    private List&lt;FieldErrorResource&gt; fieldErrors;

    public ErrorResource() { }

    public ErrorResource(String code, String message) {
        this.code = code;
        this.message = message;
    }

    public String getCode() { return code; }

    public void setCode(String code) { this.code = code; }

    public String getMessage() { return message; }

    public void setMessage(String message) { this.message = message; }

    public List&lt;FieldErrorResource&gt; getFieldErrors() { return fieldErrors; }

    public void setFieldErrors(List&lt;FieldErrorResource&gt; fieldErrors) {
        this.fieldErrors = fieldErrors;
    }
}
</code></pre>

<p>And finally here&rsquo;s a class for field errors:</p>

<pre><code>package myapp.binding;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@JsonIgnoreProperties(ignoreUnknown = true)
public class FieldErrorResource {
    private String resource;
    private String field;
    private String code;
    private String message;

    public String getResource() { return resource; }

    public void setResource(String resource) { this.resource = resource; }

    public String getField() { return field; }

    public void setField(String field) { this.field = field; }

    public String getCode() { return code; }

    public void setCode(String code) { this.code = code; }

    public String getMessage() { return message; }

    public void setMessage(String message) { this.message = message; }
}
</code></pre>

<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling JSON error object responses with Spring's RestTemplate]]></title>
    <link href="http://springinpractice.com/2013/10/07/handling-json-error-object-responses-with-springs-resttemplate/"/>
    <updated>2013-10-07T01:14:00-07:00</updated>
    <id>http://springinpractice.com/2013/10/07/handling-json-error-object-responses-with-springs-resttemplate</id>
    <content type="html"><![CDATA[<p>Some web services return JSON error objects when there&rsquo;s a problem. <a href="http://developer.github.com/v3/#client-errors">GitHub&rsquo;s API</a> is a good case in point, and <a href="https://www.hipchat.com/docs/api">HipChat&rsquo;s API</a> does the same thing. The approach is pretty common. Error objects give the API a way to communicate details beyond what the HTTP status codes indicate. (For more information on how to <em>generate</em> such responses, please see my post <a href="http://springinpractice.com/2013/10/09/generating-json-error-object-responses-with-spring-web-mvc/">Generating JSON Error Object Responses With Spring Web MVC</a>.)</p>

<p>A challenge when using Spring&rsquo;s <a href="http://docs.spring.io/spring/docs/3.2.x/javadoc-api/org/springframework/web/client/RestTemplate.html">RestTemplate</a> is that there&rsquo;s not an obvious way to handle these. Normally when we use the <code>RestTemplate</code>, we indicate a specific type of response payload we expect to see, and so if an error object comes back instead, then it&rsquo;s not clear what to do.</p>

<p>One possible approach is to add error fields to the various resource data transfer objects (DTOs). While this can work, I&rsquo;m not a big fan of this approach as it fails to separate the resource modeling and error reporting concerns, which I take to be distinct.</p>

<p>So let&rsquo;s look at a different approach&mdash;one that does in fact separate resource modeling from error reporting.</p>

<!-- more -->


<h2>The idea</h2>

<p>The concept is to read the response body as a string instead of reading it as an object, and then deserialize the body either as the expected response type or else as an error object, depending on whether the status code was an error (HTTP 400 or 500 series).</p>

<h2>How to do it</h2>

<p>First we need a special <code>RestTemplate</code> configuration. By default <code>RestTemplate</code> contains a default <a href="http://docs.spring.io/spring/docs/3.2.x/javadoc-api/org/springframework/web/client/ResponseErrorHandler.html">ResponseErrorHandler</a> implementation called <a href="http://docs.spring.io/spring/docs/3.2.x/javadoc-api/org/springframework/web/client/DefaultResponseErrorHandler.html">DefaultResponseErrorHandler</a>, which throws an exception when there&rsquo;s an HTTP error. This doesn&rsquo;t work for us, because the exception bubbles out of the <code>RestTemplate</code> call, thus abandoning the error object we want to read. So we just need to replace it with a custom handler that doesn&rsquo;t throw the exception. Here&rsquo;s one:</p>

<pre><code>package myapp.client;

import java.io.IOException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.web.client.ResponseErrorHandler;
import myapp.util.RestUtil;

public class MyResponseErrorHandler implements ResponseErrorHandler {
    private static final Logger log = LoggerFactory.getLogger(MyResponseErrorHandler.class);

    @Override
    public void handleError(ClientHttpResponse response) throws IOException {
        log.error("Response error: {} {}", response.getStatusCode(), response.getStatusText());
    }

    @Override
    public boolean hasError(ClientHttpResponse response) throws IOException {
        return RestUtil.isError(response.getStatusCode());
    }
}
</code></pre>

<p>In the code above, the <code>handleError()</code> method simply logs the error. It doesn&rsquo;t throw an exception, since again we don&rsquo;t want to prevent <code>RestTemplate</code> from reading the error object into a string.</p>

<p>Just for completeness, here&rsquo;s <code>RestUtil</code>:</p>

<pre><code>package myapp.util;

import org.springframework.http.HttpStatus;

public class RestUtil {

    public static boolean isError(HttpStatus status) {
        HttpStatus.Series series = status.series();
        return (HttpStatus.Series.CLIENT_ERROR.equals(series)
                || HttpStatus.Series.SERVER_ERROR.equals(series));
    }
}
</code></pre>

<p>Now we need to configure the <code>RestTemplate</code> to use our custom <code>ResponseErrorHandler</code>:</p>

<pre><code>&lt;bean class="org.springframework.web.client.RestTemplate"&gt;
    &lt;property name="errorHandler"&gt;
        &lt;bean class="myapp.client.MyResponseErrorHandler" /&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</code></pre>

<p>We&rsquo;re going to need an object mapper too (I&rsquo;m assuming <a href="http://wiki.fasterxml.com/JacksonHome">Jackson 2</a> here, though in principle the same approach should work for JAXB or Jackson 1 as well). So here&rsquo;s that:</p>

<pre><code>&lt;bean id="objectMapper" class="com.fasterxml.jackson.databind.ObjectMapper" /&gt;
</code></pre>

<p>Inject the <code>RestTemplate</code> and <code>ObjectMapper</code> into your client code. Now here&rsquo;s how to use them to deal with error objects:</p>

<pre><code>@Inject private RestTemplate restTemplate;
@Inject private ObjectMapper objectMapper;

public DoodadResources getDoodads() {
    HttpHeaders headers = new HttpHeaders();
    headers.add("Accept", MediaType.APPLICATION_JSON_VALUE);
    HttpEntity&lt;String&gt; request = new HttpEntity&lt;String&gt;(headers);
    ResponseEntity&lt;String&gt; response =
            restTemplate.exchange(DOODAD_URL, HttpMethod.GET, request, String.class);
    String responseBody = response.getBody();
    try {
        if (RestUtil.isError(response.getStatusCode())) {
            MyErrorResource error = objectMapper.readValue(responseBody, MyErrorResource.class);
            throw new RestClientException("[" + error.getCode() + "] " + error.getMessage());
        } else {
            DoodadResources doodads = objectMapper.readValue(responseBody, DoodadResources.class);
            return doodads;
        }
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}
</code></pre>

<p>Notice that the call to <code>exchange()</code> specifies that we want to map the response body to a string, which can handle any JSON (or XML) response. Then we use <code>RestUtil</code> again to process the response differently depending on the status series. For errors we parse the response body into a <code>MyErrorResource</code> and use it to throw an exception with an app-specific error code (not simply an HTTP status code) and a descriptive message. Of course we can do whatever we want with the detailed error information; this is just an example.</p>

<p>If there&rsquo;s no error, then we can parse the response body into the expected response type, if there is one, and return it. Here we return a <code>DoodadResources</code>.</p>

<h2>Conclusion</h2>

<p>Note that since we&rsquo;re capturing the JSON as a string, we&rsquo;re essentially buffering the entire response before parsing it into the actual object (whether expected or error). This may be inappropriate in cases involving large response payloads. Streaming works better there.</p>

<p>Personally I&rsquo;d like to see a version of <code>RestTemplate.exchange()</code> that supports two response types instead of just one: one for the expected response type and one for the error response type. This would avoid the need to handle error objects ourselves, and would also allow the <code>RestTemplate</code> to parse the response body (via Jackson) without having to buffer the entire thing first.</p>

<p>Anyway, that&rsquo;s at least one way to do it. If there are better ways I&rsquo;d very much appreciate hearing about them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick tip: Basic authentication with Spring RestTemplate]]></title>
    <link href="http://springinpractice.com/2013/10/02/quick-tip-basic-authentication-with-spring-resttemplate/"/>
    <updated>2013-10-02T02:10:00-07:00</updated>
    <id>http://springinpractice.com/2013/10/02/quick-tip-basic-authentication-with-spring-resttemplate</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a quick tip for using Spring&rsquo;s <a href="http://docs.spring.io/spring/docs/3.2.x/javadoc-api/org/springframework/web/client/RestTemplate.html">RestTemplate</a> to authenticate to a RESTful web service that uses <a href="http://en.wikipedia.org/wiki/Basic_access_authentication">HTTP basic authentication</a>.</p>

<p>There are a couple of things we have to do:</p>

<ul>
<li>First we construct an <code>Authorization</code> request header that contains (among other things) the user&rsquo;s base 64-encoded credentials.</li>
<li>Then we invoke the <code>RestTemplate</code> in such a way as to send that request header to the service.</li>
</ul>


<!-- more -->


<p>Let&rsquo;s start with the <code>Authorization</code> header.</p>

<h2>Authorization header</h2>

<p>For the sake of example, suppose that the username is <code>willie</code> and the password is <code>p@ssword</code>.</p>

<p>The first step is to base 64 encode the string <code>willie:p@ssword</code>. In general we want to do this programmatically. The <a href="http://commons.apache.org/proper/commons-codec/">Apache Commons Codec library</a> is useful for doing this:</p>

<pre><code>import org.apache.commons.codec.binary.Base64;

...

String plainCreds = "willie:p@ssword";
byte[] plainCredsBytes = plainCreds.getBytes();
byte[] base64CredsBytes = Base64.encodeBase64(plainCredsBytes);
String base64Creds = new String(base64CredsBytes);
</code></pre>

<p>Now let&rsquo;s construct our HTTP request headers, including the <code>Authorization</code> header:</p>

<pre><code>import org.springframework.http.HttpHeaders;

...

HttpHeaders headers = new HttpHeaders();
headers.add("Authorization", "Basic " + base64Creds);
</code></pre>

<p>Next, let&rsquo;s use the <code>RestTemplate</code> to issue the request.</p>

<h2>Using RestTemplate to send the request</h2>

<p>The approach is similar to what we did with <a href="http://springinpractice.com/2012/04/08/sending-cookies-with-resttemplate/">Sending Cookies with RestTemplate</a>. We use one of the <code>RestTemplate</code>&rsquo;s <code>exchange()</code> methods to exchange a request for a response. Let&rsquo;s imagine that we want to get account information.</p>

<pre><code>import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

...

HttpEntity&lt;String&gt; request = new HttpEntity&lt;String&gt;(headers);
ResponseEntity&lt;Account&gt; response = restTemplate.exchange(url, HttpMethod.GET, request, Account.class);
Account account = response.getBody();
</code></pre>

<p>In both the request and response, the type parameters represent the body. In the request we aren&rsquo;t sending anything in the body, so we just use <code>String</code> as a default, and pass the headers along by themselves. In the response we expect an account, so that&rsquo;s why we have <code>Account</code> and <code>Account.class</code> there.</p>

<p>Happy basic authenticating.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aggregating TP90 data with Splunk]]></title>
    <link href="http://springinpractice.com/2013/09/25/aggregating-tp90-data-with-splunk/"/>
    <updated>2013-09-25T19:38:00-07:00</updated>
    <id>http://springinpractice.com/2013/09/25/aggregating-tp90-data-with-splunk</id>
    <content type="html"><![CDATA[<p>One of the challenges around <a href="http://stackoverflow.com/questions/17435438/what-do-we-mean-by-top-percentile-or-tp-based-latency">TP90</a> data is aggregating it. I wrote about this <a href="http://stats.stackexchange.com/questions/49017/options-for-aggregating-dispersion-data">here</a>, and offered a solution based on histograms. Here I&rsquo;m going to describe another approach, this time based on weighted averages.</p>

<!-- more -->


<p>To be concrete, suppose we have web page response times, and we&rsquo;ve computed hourly TP90s for them. Now we want to know the TP90 for a week. To get the exact answer, we&rsquo;d need to look at all the response times for the whole week, but that can be pretty expensive for a busy site. The challenge is to estimate the week&rsquo;s TP90 based on the hourlies.</p>

<p>We can do that by computing a <a href="http://en.wikipedia.org/wiki/Weighted_arithmetic_mean">weighted average</a>, where we use counts to establish weights. The weight for any given hour is the number of requests that hour divided by the total number of requests that week. Apply the hourly weights to the hourly TP90s and then sum them all up to get the weighted average over the week.</p>

<p>Here&rsquo;s how to do it in <a href="http://www.splunk.com/">Splunk</a>. The trick here is the <a href="http://docs.splunk.com/Documentation/Splunk/5.0.5/SearchReference/Eventstats">eventstats</a> command, which makes the sum of the hourly counts available on a per-row basis so we can use it to calculate weights.</p>

<pre><code>index=webRequestSummary earliest=-7d@d latest=@d
    | eventstats sum(hourlyCount) as totalCount
    | eval weight = hourlyCount / totalCount
    | eval weightedHourlyTP90 = weight * hourlyTP90
    | sum(weightedHourlyTP90) as weightedAvgTP90
</code></pre>

<p>That&rsquo;s it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimistic locking with Spring Data REST]]></title>
    <link href="http://springinpractice.com/2013/09/14/optimistic-locking-with-spring-data-rest/"/>
    <updated>2013-09-14T20:43:00-07:00</updated>
    <id>http://springinpractice.com/2013/09/14/optimistic-locking-with-spring-data-rest</id>
    <content type="html"><![CDATA[<p>I&rsquo;m working on a web service for a document management system, where clients grab documents from the web service, modify them and submit the updates. Since multiple clients can all grab the same document at the same time, we needed to implement an <a href="http://c2.com/cgi/wiki?OptimisticLocking">optimistic locking</a> scheme. In this scheme, each document has a version number, and when the client submits an update to the service, the service checks to see whether the submitted version number baseline is still the most recent one in the database. If so, we increment the version number and the update proceeds. Otherwise, we throw an exception indicating a conflict.</p>

<!-- more -->


<p>From a technology perspective we&rsquo;re using <a href="http://projects.spring.io/spring-data-rest/">Spring Data REST</a>, <a href="http://projects.spring.io/spring-data-jpa/">Spring Data JPA</a>, JPA and Hibernate to implement the web service. So I originally tried to use <a href="http://docs.oracle.com/javaee/6/api/javax/persistence/Version.html">JPA&rsquo;s @Version annotation</a>. But for reasons I describe <a href="http://stackoverflow.com/questions/18780621/does-spring-data-rest-support-jpa-version">here</a> it doesn&rsquo;t work. <a href="https://twitter.com/mdeinum">Marten Deinum</a> notes further that this isn&rsquo;t really a problem with Spring Data REST <em>per se</em>; it affects e.g. form submissions too. At Marten&rsquo;s suggestion, I created an <a href="https://jira.springsource.org/browse/DATAREST-160">enhancement request</a>, but since I needed something now, I set out to implement optimisitic locking for Spring Data REST without <code>@Version</code>.</p>

<p>The trick is to listen for events that are fired before the update occurs. Spring Data REST fires such events, but so does JPA, and I decided to use JPA&rsquo;s events instead to ensure that the version number get/test/increment happens as part of a single atomic transaction. (My guess is that the Spring Data REST <a href="http://docs.spring.io/spring-data/rest/docs/1.1.0.M1/reference/htmlsingle/#events-chapter">BeforeSaveEvent</a> fires before entering the transaction.)</p>

<p>Here&rsquo;s the code. First, here&rsquo;s an interface for versioned entities.</p>

<pre><code>package myapp.entity;

public interface VersionedEntity {

    Long getVersion();

    void setVersion(Long version);
}
</code></pre>

<p>Next we have an abstract base class for versioned entities. I could have done a mixin-style implementation here (using, e.g., <a href="http://www.eclipse.org/aspectj/doc/next/progguide/language-interType.html">AspectJ inter-type declarations</a>), but I decided to keep it simple for now.</p>

<pre><code>package myapp.entity;

import javax.persistence.Column;
import javax.persistence.EntityListeners;
import javax.persistence.MappedSuperclass;
import myapp.repo.listener.OptimisticLockListener;

@MappedSuperclass
@EntityListeners(OptimisticLockListener.class)
public abstract class AbstractVersionedEntity implements VersionedEntity {

    @Column(name = "VERSION")
    private Long version;

    @Override
    public Long getVersion() { return version; }

    @Override
    public void setVersion(Long version) { this.version = version; }
}
</code></pre>

<p>Notice the <code>@EntityListeners</code> annotation. This tells JPA which class will listen for JPA lifecycle events. Here&rsquo;s the <code>OptimisticLockListener</code>.</p>

<pre><code>package myapp.repo.listener;

import javax.persistence.PreUpdate;
import org.springframework.stereotype.Component;
import myapp.entity.VersionedEntity;
import myapp.util.ApplicationContextProvider;

public class OptimisticLockListener {

    @PreUpdate
    public void preUpdate(Object entity) {
        if (entity instanceof VersionedEntity) {
            getChecker().check((VersionedEntity) entity);
        }
    }

    private OptimisticLockChecker getChecker() {
        return ApplicationContextProvider
            .getApplicationContext()
            .getBean(OptimisticLockChecker.class);
    }
}
</code></pre>

<p>In the listing above we grab an <code>OptimisticLockChecker</code> and then run the check. I&rsquo;ve implemented that as a separate class because I&rsquo;m going to need the application&rsquo;s <code>JdbcTemplate</code> to do the version check, and I need a managed bean to inject the <code>JdbcTemplate</code>. Unfortunately, <a href="http://stackoverflow.com/questions/12951701/how-to-get-entity-manager-or-transaction-in-jpa-listener">JPA 2.0 doesn&rsquo;t treat entity listeners as managed beans</a> (apparently that will change in JPA 2.1). That&rsquo;s why there&rsquo;s a separate <code>OptimisticLockChecker</code> class.</p>

<p><a href="https://twitter.com/vguhesan">Venkatt Guhesan</a> offers <code>ApplicationContextProvider</code> as a <a href="http://mythinkpond.wordpress.com/2010/03/22/spring-application-context/">clever way to get the app&rsquo;s context from an unmanaged instance</a>. Here&rsquo;s the technique.</p>

<pre><code>package myapp.util;

import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

public class ApplicationContextProvider implements ApplicationContextAware {
    private static ApplicationContext applicationContext;

    public static ApplicationContext getApplicationContext() { return applicationContext; }

    @Override
    public void setApplicationContext(ApplicationContext appContext) throws BeansException {
        applicationContext = appContext;
    }
}
</code></pre>

<p>Finally, let&rsquo;s look at the <code>OptimisticLockChecker</code> itself.</p>

<pre><code>package myapp.repo.listener;

import java.lang.reflect.Field;
import javax.persistence.Column;
import javax.persistence.OptimisticLockException;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.beans.BeanUtils;
import org.springframework.core.annotation.AnnotationUtils;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;
import org.springframework.util.ReflectionUtils;
import myapp.entity.VersionedEntity;

@Component
public class OptimisticLockChecker {
    @Inject private JdbcTemplate jdbcTemplate;

    public void check(VersionedEntity entity) {
        Long submittedVersion = entity.getVersion();
        if (submittedVersion == null) {
            throw new RuntimeException("Submitted entity must have a version");
        }

        Class&lt;?&gt; entityClass = entity.getClass();

        Annotation tableAnn = AnnotationUtils.findAnnotation(entityClass, Table.class);
        String tableName = (String) AnnotationUtils.getValue(tableAnn, "name");

        Field idField = ReflectionUtils.findField(entityClass, "id");
        Annotation idColAnn = idField.getAnnotation(Column.class);
        String idColName = (String) AnnotationUtils.getValue(idColAnn, "name");

        String sql = "select version from " + tableName
            + " where " + idColName + "=" + entity.getId();
        Long latestVersion = jdbcTemplate.queryForObject(sql, Long.class);

        if (submittedVersion != latestVersion) {
            throw new OptimisticLockException(
                    "Stale entity: submitted version " + submittedVersion
                    + ", but latest version is " + latestVersion);
        }

        entity.setVersion(entity.getVersion() + 1);
    }
}
</code></pre>

<p>Despite appearances, the code is a little tricky because we&rsquo;re trying to compare an entity version in the persistence context with an entity version in the database, and by design JPA hides the database from the developer. There are different ways to achieve this, but the most straightforward and reliable is probably to use <code>JdbcTemplate</code> to get the latest version in the database. We use Spring&rsquo;s <code>AnnotationUtils</code> and <code>ReflectionUtils</code> to grab the table name and ID column name from the <code>@Table</code> and <code>@Column</code> annotations. (Note that the code above is for a <code>@Column</code> annotation defined on the field itself; if you&rsquo;ve defined <code>@Column</code> on the getter, then you can use <code>AnnotationUtils</code> to get at that.)</p>

<p>After that, we compare and either throw an exception or else increment the version number.</p>

<p>Perhaps the Spring Data REST guys will provide more direct support for <code>@Version</code> (or some suitable alternative) at some future point. Until then, I hope the approach above proves useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress migration]]></title>
    <link href="http://springinpractice.com/2013/09/07/octopress-migration/"/>
    <updated>2013-09-07T19:32:00-07:00</updated>
    <id>http://springinpractice.com/2013/09/07/octopress-migration</id>
    <content type="html"><![CDATA[<p>I&rsquo;m in the process of migrating the blog from Wordpress to <a href="http://octopress.org/">Octopress</a>. Octopress is a lot easier to hack and in fact was designed for the hacker crowd. Plus I like being able to manage my posts in source control instead of in a database. Makes sense for all kinds of reasons.</p>

<p>It might take a bit for the dust to settle, but that&rsquo;s what&rsquo;s going on.</p>

<p>If you&rsquo;re interested in the XSLT script I wrote to migrate the posts, please see <a href="https://github.com/williewheeler/wordpress2octopress">wordpress2octopress</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SeaJUG talk on Spring Data JPA]]></title>
    <link href="http://springinpractice.com/2013/06/08/seajug-talk-on-spring-data-jpa-spring-data-rest-and-spring-hateoas/"/>
    <updated>2013-06-08T16:17:00-07:00</updated>
    <id>http://springinpractice.com/2013/06/08/seajug-talk-on-spring-data-jpa-spring-data-rest-and-spring-hateoas</id>
    <content type="html"><![CDATA[<p><img src="http://springinpractice.s3.amazonaws.com/blog/images/seajug_expedia.jpg" alt="SeaJUG presentation at Expedia" /></p>

<p>Last month I did a talk at Expedia on <a href="http://www.springsource.org/spring-data/jpa">Spring Data JPA</a>, <a href="http://www.springsource.org/spring-data/rest">Spring Data REST</a> and <a href="https://github.com/SpringSource/spring-hateoas">Spring HATEOAS</a> for the <a href="http://www.seajug.org/">Seattle Java User&rsquo;s Group</a>.</p>

<p><a href="http://vimeo.com/66717404">Here&rsquo;s the video.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring in Practice now available]]></title>
    <link href="http://springinpractice.com/2013/05/08/spring-in-practice-now-available/"/>
    <updated>2013-05-08T23:42:00-07:00</updated>
    <id>http://springinpractice.com/2013/05/08/spring-in-practice-now-available</id>
    <content type="html"><![CDATA[<p><img src="http://springinpractice.s3.amazonaws.com/blog/images/sip_on_shelves.jpg" alt="SiP at Barnes &amp; Noble" /></p>

<p>Spring in Practice is now available!</p>

<p>It&rsquo;s also the Deal of the Day today, which means half off if you buy it today (May 8, 2013) from Manning. Use code <strong>dotd0508au</strong> at <a href="http://www.manning.com/wheeler/">www.manning.com/wheeler</a>.</p>

<p>Josh and I hope that everybody enjoys the book. It was a lot of work, but I&rsquo;m very happy with the end result.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Renaming node classes when using Spring Data Neo4j]]></title>
    <link href="http://springinpractice.com/2012/12/09/renaming-node-classes-when-using-spring-data-neo4j/"/>
    <updated>2012-12-09T15:33:00-08:00</updated>
    <id>http://springinpractice.com/2012/12/09/renaming-node-classes-when-using-spring-data-neo4j</id>
    <content type="html"><![CDATA[<p>This is one of those posts where I&rsquo;m just jotting down some notes for my own future use, but someone else may find this useful.</p>

<p>I&rsquo;m going to show how to rename a node entity class when using Spring Data Neo4j. I&rsquo;m talking about the fully-qualified classname here, so it applies when we want to rename a package too.</p>

<!-- more -->


<p>First, suppose my old classname is <code>org.zkybase.cmdb.api.domain.ApplicationEntity</code>. If I go into the Neo4j shell, I can see that I have a couple of nodes of this type:</p>

<pre><code>neo4j-sh (0)$ start n=node:__types__(className="org.zkybase.cmdb.api.domain.ApplicationEntity") return n
+-----------------------------------------------------------------------------------------------------+
| n                                                                                                   |
+-----------------------------------------------------------------------------------------------------+
| Node[36]{__type__-&gt;"org.zkybase.cmdb.api.domain.ApplicationEntity",name-&gt;"Zkybase"}                 |
| Node[49]{name-&gt;"Spring in Practice Blog",__type__-&gt;"org.zkybase.cmdb.api.domain.ApplicationEntity"} |
+-----------------------------------------------------------------------------------------------------+
2 rows, 1 ms
</code></pre>

<p>From the above, it <i>looks like</i> you can just go to the nodes themselves and change their <code>__type__</code> fields:</p>

<pre><code>neo4j-sh (0)$ cd -a 36
neo4j-sh (Zkybase,36)$ ls
*__type__ =[org.zkybase.cmdb.api.domain.ApplicationEntity]
*name     =[Zkybase]
neo4j-sh (Zkybase,36)$ set __type__ "org.zkybase.api.domain.entity.ApplicationEntity"
neo4j-sh (Zkybase,36)$ ls
*__type__ =[org.zkybase.api.domain.entity.ApplicationEntity]
*name     =[Zkybase]
</code></pre>

<p>But then when you try to find the node using the query, it doesn&rsquo;t show up.</p>

<pre><code>neo4j-sh (Zkybase,36)$ start n=node:__types__(className="org.zkybase.api.domain.entity.ApplicationEntity") return n
+---+
| n |
+---+
+---+
0 rows, 1 ms
</code></pre>

<p>Moreover, when you re-run the original query, the node whose <code>__type__</code> we changed still shows up.</p>

<p>The problem is that we need to reindex the nodes. Spring Data Neo4j uses an index called <code>__types__</code>, and we need to replace the old index entries with some new ones.</p>

<p>Let&rsquo;s see what&rsquo;s under the old classname, using <code>index -g</code> to get the relevant nodes from the <code>__types__</code> index:</p>

<pre><code>neo4j-sh (Zkybase,36)$ index -g __types__ className "org.zkybase.cmdb.api.domain.ApplicationEntity"
(me)

(Spring in Practice Blog,49)
</code></pre>

<p>And under the new classname:</p>

<pre><code>neo4j-sh (Zkybase,36)$ index -g __types__ className "org.zkybase.api.domain.entity.ApplicationEntity"
neo4j-sh (Zkybase,36)$ 
</code></pre>

<p>We can fix that using <code>index -i</code>, which indexes the current entity:</p>

<pre><code>neo4j-sh (Zkybase,36)$ index -i __types__ className "org.zkybase.api.domain.entity.ApplicationEntity"
neo4j-sh (Zkybase,36)$ cd -a 49
neo4j-sh (Spring in Practice Blog,49)$ index -i __types__ className "org.zkybase.api.domain.entity.ApplicationEntity"
neo4j-sh (Spring in Practice Blog,49)$ cd -a 36
neo4j-sh (Zkybase,36)$ index -g __types__ className "org.zkybase.api.domain.entity.ApplicationEntity"
(me)

(Spring in Practice Blog,49)
</code></pre>

<p>We still need to clean up the old entries, though, because they&rsquo;re still there. We use <code>index -r</code> to remove the index entry for the current node:</p>

<pre><code>neo4j-sh (Zkybase,36)$ index -r __types__ className "org.zkybase.cmdb.api.domain.ApplicationEntity"
neo4j-sh (Zkybase,36)$ cd -a 49
neo4j-sh (Spring in Practice Blog,49)$ index -r __types__ className "org.zkybase.cmdb.api.domain.ApplicationEntity"
neo4j-sh (Spring in Practice Blog,49)$ index -g __types__ className "org.zkybase.cmdb.api.domain.ApplicationEntity"
neo4j-sh (Spring in Practice Blog,49)$ 
</code></pre>

<p>That&rsquo;s it. This was the result of about 15 minutes of investigation, so there&rsquo;s a good chance there&rsquo;s more going on than what I&rsquo;ve described. Let me know and I&rsquo;ll update the post accordingly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pageable custom queries with Spring Data JPA]]></title>
    <link href="http://springinpractice.com/2012/06/30/pageable-custom-queries-with-spring-data-jpa/"/>
    <updated>2012-06-30T12:41:00-07:00</updated>
    <id>http://springinpractice.com/2012/06/30/pageable-custom-queries-with-spring-data-jpa</id>
    <content type="html"><![CDATA[<p>In previous posts I explained how you can use Spring Data JPA to <a href="http://springinpractice.com/2012/04/24/autogenerate-daos-and-queries-using-spring-data-jpa/">create repositories that support custom queries</a>, as well as to <a href="http://springinpractice.com/2012/05/11/pagination-and-sorting-with-spring-data-jpa/">support paging in your app</a>. You might wonder whether you can use these together.</p>

<p>The answer is yes. It works just like you would expect:</p>

<pre><code>import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;

public interface IncidentRepo extends JpaRepository&lt;Incident, Long&gt; {

    Page&lt;Incident&gt; findByProblemId(Long problemId, Pageable pageable);
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to run JavaScript from Java]]></title>
    <link href="http://springinpractice.com/2012/05/13/how-to-run-javascript-from-java/"/>
    <updated>2012-05-13T11:02:00-07:00</updated>
    <id>http://springinpractice.com/2012/05/13/how-to-run-javascript-from-java</id>
    <content type="html"><![CDATA[<p>Java 6 comes with the <a href="http://www.mozilla.org/rhino/">Rhino JavaScript engine</a>, which makes it easy to run JavaScript from inside your Java app. There are different situations in which you might want to do this. Chapter 9 of <a href="http://www.manning.com/wheeler/">Spring in Practice</a> affords a good example. There we&rsquo;re implementing a rich-text comment engine based on the WMD editor that <a href="http://stackoverflow.com">Stack Overflow</a> uses. We have a <code>showdown.js</code> script that maps Markdown to HTML, and we want to run it in two places:</p>

<ul>
<li>on the client to present a preview pane</li>
<li>on the server to store the Markdown as HTML for easy presentation (as opposed to running the script against every comment dynamically)</li>
</ul>


<p>Here&rsquo;s how we can run it on the server:</p>

<pre><code>import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

...

public final class RichTextFilter implements TextFilter {
    @Inject private File showdownJsFile;

    private String markdownToHtml(String markdown) {
        try {
            ScriptEngineManager mgr = new ScriptEngineManager();
            ScriptEngine engine = mgr.getEngineByName("JavaScript");
            engine.eval(showdownJs);
            engine.eval("var markdown = '" + markdown + "';");
            engine.eval("var converter = new Showdown.converter();");
            engine.eval("var html = converter.makeHtml(markdown);");
            return (String) engine.get("html");
        } catch (ScriptException e) {
            // Shouldn't happen unless somebody breaks the script
            throw new RuntimeException(e);
        }
    }

    ... other stuff ...
}
</code></pre>

<p>To see how to inject the File into the class in Spring, see my post <a href="http://springinpractice.com/2012/05/12/injecting-a-file-from-the-classpath-into-a-bean/">Injecting a file from the classpath into a bean</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Injecting a file from the classpath into a bean]]></title>
    <link href="http://springinpractice.com/2012/05/12/injecting-a-file-from-the-classpath-into-a-bean/"/>
    <updated>2012-05-12T23:29:00-07:00</updated>
    <id>http://springinpractice.com/2012/05/12/injecting-a-file-from-the-classpath-into-a-bean</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a quick tip for you.</p>

<p>Sometimes you need to inject a <code>java.io.File</code> from your classpath into a bean, but you don&rsquo;t want to have to spell out the absolute path (even in a configuration file). Never fear. It&rsquo;s easy:</p>

<pre><code>&lt;bean id="tagProviderResource" class="org.springframework.core.io.ClassPathResource"&gt;
    &lt;constructor-arg value="/htmlcleaner.xml" /&gt;
&lt;/bean&gt;

&lt;util:property-path id="tagProviderFile" path="tagProviderResource.file" /&gt;

&lt;bean id="tagProvider" class="org.htmlcleaner.ConfigFileTagProvider"&gt;
    &lt;constructor-arg ref="tagProviderFile" /&gt;
&lt;/bean&gt;
</code></pre>

<p>In the configuration above, I used <code>ClassPathResource</code> to find the <code>htmlcleaner.xml</code> resource on the classpath. Then I used the handy <code>&lt;util:property-path&gt;</code> tag to assign the resource&rsquo;s <code>file</code> property its own ID. Finally, I inject the <code>File</code> using constructor injection.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pagination and sorting with Spring Data JPA]]></title>
    <link href="http://springinpractice.com/2012/05/11/pagination-and-sorting-with-spring-data-jpa/"/>
    <updated>2012-05-11T01:31:00-07:00</updated>
    <id>http://springinpractice.com/2012/05/11/pagination-and-sorting-with-spring-data-jpa</id>
    <content type="html"><![CDATA[<p>In an <a href="http://springinpractice.com/2012/04/24/autogenerate-daos-and-queries-using-spring-data-jpa/">earlier post</a> I introduced Spring Data JPA, which makes it really easy to create a DAO layer. I didn&rsquo;t get into too much depth, so this time I want to explore a couple of cool features that the DAOs support: pagination and sorting.</p>

<!-- more -->


<p>Pagination and sorting are useful when you have long lists that you want the user to be able to navigate. Here for example is a UI for a runbook app I&rsquo;m building. One of the things it allows the user to do is view deployment logs, which we typically want to see in reverse chronological order. Also, since there are lots of logs, we want to page.</p>

<p><img src="http://springinpractice.s3.amazonaws.com/blog/images/2012-05-11-pagination-and-sorting-with-spring-data-jpa/pagination-1.jpg" alt="Pagination screenshot" /></p>

<p>There are different ways to design a pagination system from a user experience perspective. Here I&rsquo;ve done something pretty typical: I have links for first/previous/next/last, and then I show a bounded set of pages around the current page.</p>

<h2>The repository</h2>

<p>How does Spring Data JPA help? Here&rsquo;s my <code>DeploymentRepo</code> interface:</p>

<pre><code>package com.example.repo;

import org.springframework.data.jpa.repository.JpaRepository;
import com.example.model.Deployment;

public interface DeploymentRepo extends JpaRepository&lt;Deployment, Long&gt; { }
</code></pre>

<p>The <code>JpaRepository</code> interface extends Spring Data&rsquo;s <code>PagingAndSortingRepository</code> interface, so I get some paging/sorting finders for free.</p>

<h2>The service</h2>

<p>I have a simple service bean that calls the repo:</p>

<pre><code>package com.example.service.impl;

import javax.inject.Inject;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.repo.DeploymentRepo;
import com.example.model.Deployment;
import com.example.service.DeploymentLogService;

@Service
@Transactional
public class DeploymentLogServiceImpl implements DeploymentLogService {
    private static final int PAGE_SIZE = 50;

    @Inject private DeploymentRepo deploymentRepo;

    public Page&lt;Deployment&gt; getDeploymentLog(Integer pageNumber) {
        PageRequest request =
            new PageRequest(pageNumber - 1, PAGE_SIZE, Sort.Direction.DESC, "startTime");
        return deploymentRepo.findAll(pageRequest);
    }
}
</code></pre>

<p>Spring Data uses 0-indexed pages, but I want my service interface to use 1-indexed pages (they will be user-visible and I want the page numbers to be intuitive), so I make the appropriate adjustment in the request. I specify the page size (50 deployments per page), sort direction, and also one or more property names to act as sort keys. Here I&rsquo;ve chosen <code>startTime</code>, which is a timestamp for the start of the deployment.</p>

<p>That takes care of the Spring Data JPA part, but just for fun, I&rsquo;ll show you a simplified version of the controller method and JSP too.</p>

<h2>The controller</h2>

<p>Here&rsquo;s the controller method:</p>

<pre><code>@RequestMapping(value = "/pages/{pageNumber}", method = RequestMethod.GET)
public String getRunbookPage(@PathVariable Integer pageNumber, Model model) {
    Page&lt;Deployment&gt; page = deploymentService.getDeploymentLog(pageNumber);

    int current = page.getNumber() + 1;
    int begin = Math.max(1, current - 5);
    int end = Math.min(begin + 10, page.getTotalPages());

    model.addAttribute("deploymentLog", page);
    model.addAttribute("beginIndex", begin);
    model.addAttribute("endIndex", end);
    model.addAttribute("currentIndex", current);

    return "deploymentLog";
}
</code></pre>

<p>Note again that I&rsquo;ve adjusted the page numbers to convert Spring Data&rsquo;s 0-indexing to my app&rsquo;s 1-indexing.</p>

<p>I&rsquo;ve precalculated the begin/end indices because JSTL doesn&rsquo;t have the min and max functions, and anyway, it&rsquo;s cleaner to do this sort of thing in the controller.</p>

<h2>The JSP</h2>

<p>Finally here&rsquo;s the page navigation in the JSP. It uses the <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a> library for the UI, so that&rsquo;s where the various CSS elements come from.</p>

<pre><code>&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;

&lt;c:url var="firstUrl" value="/pages/1" /&gt;
&lt;c:url var="lastUrl" value="/pages/${deploymentLog.totalPages}" /&gt;
&lt;c:url var="prevUrl" value="/pages/${currentIndex - 1}" /&gt;
&lt;c:url var="nextUrl" value="/pages/${currentIndex + 1}" /&gt;

&lt;div class="pagination"&gt;
    &lt;ul&gt;
        &lt;c:choose&gt;
            &lt;c:when test="${currentIndex == 1}"&gt;
                &lt;li class="disabled"&gt;&lt;a href="#"&gt;&amp;lt;&amp;lt;&lt;/a&gt;&lt;/li&gt;
                &lt;li class="disabled"&gt;&lt;a href="#"&gt;&amp;lt;&lt;/a&gt;&lt;/li&gt;
            &lt;/c:when&gt;
            &lt;c:otherwise&gt;
                &lt;li&gt;&lt;a href="${firstUrl}"&gt;&amp;lt;&amp;lt;&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="${prevUrl}"&gt;&amp;lt;&lt;/a&gt;&lt;/li&gt;
            &lt;/c:otherwise&gt;
        &lt;/c:choose&gt;
        &lt;c:forEach var="i" begin="${beginIndex}" end="${endIndex}"&gt;
            &lt;c:url var="pageUrl" value="/pages/${i}" /&gt;
            &lt;c:choose&gt;
                &lt;c:when test="${i == currentIndex}"&gt;
                    &lt;li class="active"&gt;&lt;a href="${pageUrl}"&gt;&lt;c:out value="${i}" /&gt;&lt;/a&gt;&lt;/li&gt;
                &lt;/c:when&gt;
                &lt;c:otherwise&gt;
                    &lt;li&gt;&lt;a href="${pageUrl}"&gt;&lt;c:out value="${i}" /&gt;&lt;/a&gt;&lt;/li&gt;
                &lt;/c:otherwise&gt;
            &lt;/c:choose&gt;
        &lt;/c:forEach&gt;
        &lt;c:choose&gt;
            &lt;c:when test="${currentIndex == deploymentLog.totalPages}"&gt;
                &lt;li class="disabled"&gt;&lt;a href="#"&gt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
                &lt;li class="disabled"&gt;&lt;a href="#"&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
            &lt;/c:when&gt;
            &lt;c:otherwise&gt;
                &lt;li&gt;&lt;a href="${nextUrl}"&gt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="${lastUrl}"&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
            &lt;/c:otherwise&gt;
        &lt;/c:choose&gt;
    &lt;/ul&gt;
&lt;/div&gt;
</code></pre>

<p>Spring Data JPA makes it very nice and simple. And Twitter Bootstrap looks great too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring's constructor namespace is a bad idea]]></title>
    <link href="http://springinpractice.com/2012/05/07/springs-constructor-namespace-is-a-bad-idea/"/>
    <updated>2012-05-07T21:26:00-07:00</updated>
    <id>http://springinpractice.com/2012/05/07/springs-constructor-namespace-is-a-bad-idea</id>
    <content type="html"><![CDATA[<p>The other day I wrote up a post <a href="http://springinpractice.com/2012/04/26/the-spring-constructor-namespace-and-some-deep-thoughts/">explaining how to use Spring&rsquo;s constructor namespace</a>, which is new with Spring 3.1. So the following might be a little surprising:</p>

<p><em>Spring&rsquo;s constructor namespace is a bad idea.</em></p>

<p>I wanted to like it&mdash;honest I did. While I&rsquo;ve always been a little iffy on the whole idea of introspecting on method parameter names, <a href="https://issues.springsource.org/browse/SPR-6500?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel">Juergen Hoeller answered my concerns</a> with respect to <code>@PathVariable</code> and the like. My worries around <a href="http://en.wikipedia.org/wiki/Principle_of_least_astonishment">least surprise</a> were admittedly academic since I always compile binaries in debug mode.</p>

<p>So I tried the constructor namespace out, and it bit me in exactly the way I expected.</p>

<!-- more -->


<h2>The problem</h2>

<p>Just as a quick refresher (or introduction), here&rsquo;s how the constructor namespace works:</p>

<pre><code>&lt;bean class="com.example.Client"
    c:restTemplate-ref-"restTemplate"
    c:baseUrl="http://localhost:8080/service" /&gt;
</code></pre>

<p>The configuration presupposes a constructor that looks like this:</p>

<pre><code>public Client(RestTemplate restTemplate, String baseUrl) { ... }
</code></pre>

<p>Here&rsquo;s the problem. Developers expect changing parameter names to be a local operation. Even in some of the Spring Web MVC cases that Juergen mentions in response to my JIRA issue&mdash;<code>@PathVariable</code>, <code>@RequestParam</code>, <code>@RequestHeader</code> and <code>@CookieValue</code>&mdash;the annotations in question are colocated with the parameters; e.g.</p>

<pre><code>public String getUser(@PathVariable Long id, Model model) { ... }
</code></pre>

<p>so somebody experienced with the framework will know what to do, and somebody less experienced will discover the issue soon enough (the code won&rsquo;t work) and fix it.</p>

<p>But the constructor namespace is totally different. Changing the constructor parameter name has the potential to break client code, and that client code may not be part of your current project. So you might not know you broke someone else&rsquo;s code.</p>

<p>This happened to me today, except it was breaking my own code in a separate project. I have a web service client with a constructor like this:</p>

<pre><code>public Client(RestTemplate restTemplate, String basePath) { ... }
</code></pre>

<p>and I changed that to</p>

<pre><code>public Client(RestTemplate restTemplate, String baseUrl) { ... }
</code></pre>

<p>This broke code in another project that was using the constructor namespace to inject values into the constructor. This is another violation of the principle of least surprise, but this time I don&rsquo;t think it&rsquo;s theoretical in the least. It happened to me the very first time.</p>

<h2>Some possible solutions</h2>

<p>One solution would be for Spring to simply get rid of this feature, as it leads to brittle code.</p>

<p>Another possibility would be for Spring to do something like this instead:</p>

<pre><code>public Client(@Param RestTemplate restTemplate, @Param String baseUrl) { ... }
</code></pre>

<p>and even</p>

<pre><code>public Client(@Param("restTemplate") RestTemplate template, @Param("baseUrl") String url) { ... }
</code></pre>

<p>That would make it more explicit that the constructor parameter names were being exposed as part of an API.</p>

<p>If you&rsquo;re set on using it, you should adopt the practice of documenting your constructors when they support this configuration style. And as an API consumer, you should assume that constructor parameter names are <em>not</em> contractual unless explicitly documented as such. Parameter names in Java have always counted as implementation details, and while I&rsquo;m all for innovation and challenging the status quo, the benefit that the constructor namespace offers here is far too modest to call for revisiting this particular issue.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mavenizing an empty GitHub project in Eclipse]]></title>
    <link href="http://springinpractice.com/2012/05/06/mavenizing-an-empty-github-project-in-eclipse/"/>
    <updated>2012-05-06T12:30:15-07:00</updated>
    <id>http://springinpractice.com/2012/05/06/mavenizing-an-empty-github-project-in-eclipse</id>
    <content type="html"><![CDATA[<p>This post is for myself more than anything else, just because I keep forgetting the steps involved.</p>

<p>I&rsquo;m using SpringSource Tool Suite 2.9.1.RELEASE, which is based on Eclipse 3.7.2 (Indigo). I have the egit and m2e Eclipse plugins installed.</p>

<h3>The scenario</h3>


<p>You have a brand new, pretty-much-empty GitHub project (other than the README, say&mdash;but no Maven stuff yet), and you want to import it into Eclipse as a Maven project.</p>

<h3>The steps</h3>




<ol>

<li>Add the remote GitHub repo to your list of Git repos in Eclipse.</li>

<li>In Eclipse, go to File &rarr; Import &rarr; Git &rarr; Projects from Git. (I&#8217;m on a Mac; the menu may be a little different for other platforms.)</li>

<li>On the &#8220;Select Repository Source&#8221;, choose &#8220;URI&#8221;.</li>

<li>On the &#8220;Source Git Repository&#8221; pane, enter the URI info. It might be something like <code>ssh://git@github.com/williewheeler/sip11.git</code>, for example.</li>

<li>On the &#8220;Branch Selection&#8221; pane, choose the master branch.</li>

<li>On the &#8220;Local Destination&#8221; pane, decide where you want the local copy to live.</li>

<li>Where it asks you to select an import wizard, choose &#8220;Use the New Project wizard&#8221; and click &#8220;Finish&#8221;.</li>

<li>Now you have to choose a New Project wizard. Choose Maven &rarr; Maven Project.</li>

<li>From here just create the project like you would any other new Maven project. Once you&#8217;re done, it will show up in your list of projects in the Package Explorer view, and sharing should be activated.</li>

</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Combined my two blogs]]></title>
    <link href="http://springinpractice.com/2012/05/05/combined-my-two-blogs/"/>
    <updated>2012-05-05T14:39:30-07:00</updated>
    <id>http://springinpractice.com/2012/05/05/combined-my-two-blogs</id>
    <content type="html"><![CDATA[<p>To better focus my Java/Spring blogging, I&rsquo;ve merged my former Wheeler Software blog into this one. There are a few articles that didn&rsquo;t make the cut, but the majority of them did.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating non-Wordpress blog comments into Wordpress]]></title>
    <link href="http://springinpractice.com/2012/05/03/migrating-non-wordpress-blog-comments-into-wordpress/"/>
    <updated>2012-05-03T05:24:51-07:00</updated>
    <id>http://springinpractice.com/2012/05/03/migrating-non-wordpress-blog-comments-into-wordpress</id>
    <content type="html"><![CDATA[<p>This isn&rsquo;t a Spring post, but I&rsquo;m doing something that I think others might find useful, so I&rsquo;m going to share it.</p>

<p>I&rsquo;m in the process of migrating content over from my old Wheeler Software blog to this one, which is a Wordpress blog. Besides the posts themselves, I want to move the comments over.</p>

<p>The slight wrinkle in the plan is that the software and database for the old blog are custom. So getting the comments over involves some SQL scripting. Both databases are MySQL databases, so that helps a bit.</p>

<p>Here&rsquo;s what I&rsquo;m doing.</p>

<!-- more -->




<h3>The old, custom comment table</h3>




<pre>CREATE TABLE `services_comment` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `url` varchar(255) NOT NULL DEFAULT '',
  `name` varchar(50) NOT NULL,
  `email` varchar(50) NOT NULL,
  `web` varchar(100) DEFAULT NULL,
  `text` text NOT NULL,
  `html_text` text,
  `ip_addr` varchar(15) NOT NULL,
  `date_created` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_modified` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `services_comment_idx0` (`url`,`date_created`)
) ENGINE=InnoDB AUTO_INCREMENT=1686 DEFAULT CHARSET=latin1;</pre>




<h3>The Wordpress post table</h3>


<p>This isn&rsquo;t the entire table, but just the columns that we care about for this post:</p>

<pre>CREATE TABLE `wp_posts` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_title` text NOT NULL,
  `comment_count` bigint(20) NOT NULL DEFAULT '0',

  ... other columns that we don't care about for our current purpose ...

) ENGINE=MyISAM AUTO_INCREMENT=1126 DEFAULT CHARSET=utf8;</pre>




<h3>The Wordpress comment table</h3>




<pre>CREATE TABLE `wp_comments` (
  `comment_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_post_ID` bigint(20) unsigned NOT NULL DEFAULT '0',
  `comment_author` tinytext NOT NULL,
  `comment_author_email` varchar(100) NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT '0',
  `comment_approved` varchar(20) NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) NOT NULL DEFAULT '',
  `comment_type` varchar(20) NOT NULL DEFAULT '',
  `comment_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`comment_ID`),
  KEY `comment_approved` (`comment_approved`),
  KEY `comment_post_ID` (`comment_post_ID`),
  KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  KEY `comment_date_gmt` (`comment_date_gmt`),
  KEY `comment_parent` (`comment_parent`)
) ENGINE=MyISAM AUTO_INCREMENT=289 DEFAULT CHARSET=utf8;</pre>




<h3>The copy script</h3>




<div class="alert warning"><strong>WARNING and DISCLAIMER:</strong> Before you try anything like this, back up your database! And it&#8217;s a good idea to experiment with your script on a separate copy of the database before trying it out on the real thing.

You&#8217;ve been warned. I&#8217;m not responsible if you hose your database, and I&#8217;m not going to field support requests!</div>




<h4>Step 1. Copy the old table into the new database.</h4>


<p>I created a copy of my old comment table inside the new Wordpress database to facilitate the copying.</p>

<h4>Step 2. Look up the target Wordpress post&#8217;s ID</h4>


<p>You&rsquo;ll need to have something to attach your comments to. You can use whatever means you like here; I just looked it up by the post title:</p>

<pre>select
  id
from
  wp_posts
where
  post_title = 'Getting started with Hibernate Validator' and
  post_parent = 0
into
  @post_id;</pre>


<p>Note that you want the post with <code>post_parent = 0</code>. Other posts are the various revisions you create over time, and Wordpress has to have a way to attach all the comments to the same single post.</p>

<h4>Step 3. Copy the comments</h4>


<p>This is obviously dependent on the specifics of your source table. In my case the source table is pretty close to the destination table, so that makes things a lot easier.</p>

<p>I didn&rsquo;t really care about getting the date vs. GMT date right, so I just used the same date for both. If you care, I&rsquo;m sure there&rsquo;s a function that can handle that.</p>

<pre>insert into
  wp_comments (comment_post_ID, comment_author, comment_author_email, comment_author_url, comment_author_IP, comment_date, comment_date_gmt, comment_content, comment_approved)
select
  @post_id, name, email, web, ip_addr, date_created, date_created, html_text, 1
from
  services_comment
where
  url = '/hibernate-validator.html'
order by
  date_created;</pre>




<h4>Step 4. Update the post&#8217;s comment count</h4>


<p>Presumably for performance reasons, Wordpress stores the comment count with the post itself. So we have to update that column or else it will say &ldquo;0 comments&rdquo; even though there&rsquo;s a bunch of comments below:</p>

<pre>select count(*) from wp_comments where comment_post_ID = @post_id and comment_approved = 1 into @comment_count;
update wp_posts set comment_count = @comment_count where ID = @post_id;</pre>


<p>It probably wouldn&rsquo;t be a bad idea to wrap these up in a stored procedure if you have a lot of posts. But no biggie either way.</p>

<h4>Step 5. Verify</h4>


<p>Check to see whether your comments showed up. Mine did:</p>

<ul class="square">
<li><a href="http://springinpractice.com/2009/02/02/getting-started-with-hibernate-validator/" target="_blank">Hibernate Validator post</a></li>
<li><a href="http://springinpractice.com/2008/05/05/build-a-shopping-cart-with-spring-web-flow-2-part-1/" target="_blank">Spring Web Flow post</a></li>
</ul>


<p>For some reason the Gravatars don&rsquo;t seem to be showing up as much when there are a lot of comments all on a single page. I don&rsquo;t know if it&rsquo;s rate limited or what.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring Jetty to use Gmail as an SMTP provider]]></title>
    <link href="http://springinpractice.com/2012/04/29/configuring-jetty-to-use-gmail-as-an-smtp-provider/"/>
    <updated>2012-04-29T09:13:34-07:00</updated>
    <id>http://springinpractice.com/2012/04/29/configuring-jetty-to-use-gmail-as-an-smtp-provider</id>
    <content type="html"><![CDATA[<p>In chapter 8 of <a href="http://www.manning.com/wheeler/">Spring in Practice</a>, recipes 8.2 and 8.3 require a JNDI-exposed JavaMail session backed by an SMTP provider. Here I&rsquo;ll show how to set that up in Jetty 6. For SMTP we&rsquo;ll use Gmail, which provides a free SMTP service to anybody with a Gmail account.</p>

<!-- more -->


<p>Here&rsquo;s the <code>jetty-env.xml</code> configuration supporting the goals above.</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE Configure PUBLIC "-//Mort Bay Consulting//DTD Configure//EN" "http://jetty.mortbay.org/configure.dtd"&gt;
&lt;Configure class="org.mortbay.jetty.webapp.WebAppContext"&gt;
    &lt;New id="repository" class="org.mortbay.jetty.plus.naming.Resource"&gt;
        &lt;Arg&gt;mail/Session&lt;/Arg&gt;
        &lt;Arg&gt;
            &lt;New class="org.mortbay.naming.factories.MailSessionReference"&gt;
                &lt;Set name="user"&gt;[your_gmail_username]&lt;/Set&gt;
                &lt;Set name="password"&gt;[your_gmail_password]&lt;/Set&gt;
                &lt;Set name="properties"&gt;
                    &lt;New class="java.util.Properties"&gt;
                        &lt;Put name="mail.user"&gt;[your_gmail_username]&lt;/Put&gt;
                        &lt;Put name="mail.password"&gt;[your_gmail_password]&lt;/Put&gt;
                        &lt;Put name="mail.transport.protocol"&gt;smtp&lt;/Put&gt;
                        &lt;Put name="mail.smtp.host"&gt;smtp.gmail.com&lt;/Put&gt;
                        &lt;Put name="mail.smtp.port"&gt;587&lt;/Put&gt;
                        &lt;Put name="mail.smtp.auth"&gt;true&lt;/Put&gt;
                        &lt;Put name="mail.smtp.starttls.enable"&gt;true&lt;/Put&gt;
                        &lt;Put name="mail.debug"&gt;true&lt;/Put&gt;
                    &lt;/New&gt;
                &lt;/Set&gt;
            &lt;/New&gt;
        &lt;/Arg&gt;
    &lt;/New&gt;

    ... other configuration (e.g. JDBC DataSource) ...
&lt;/Configure&gt;
</code></pre>

<p>This configuration allows us to grab the mail session using the <code>mail/Session</code> name from the Spring configuration file:</p>

<pre><code>&lt;jee:jndi-lookup id="mailSession" jndi-name="mail/Session" resource-ref="true" /&gt;
</code></pre>

<h2>Alternative configurations</h2>

<p>For information about doing the same thing with Tomcat, or information on configuring your JavaMail session directly into the app (along with the SMTP provider details), see my post <a href="http://springinpractice.com/2008/05/15/send-e-mail-using-spring-and-javamail/">Send e-mail using Spring and JavaMail</a>.</p>

<h2>Problems?</h2>

<p>If you run into an error to the effect that there was a PKIX path building problem, then you need to import the remote certificate into your local truststore. See <a href="http://springinpractice.com/2012/04/29/fixing-pkix-path-building-issues-when-using-javamail-and-smtp/">Fixing PKIX path building issues when using JavaMail and SMTP</a> for details on this issue and how to fix it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing PKIX path building issues when using JavaMail and SMTP]]></title>
    <link href="http://springinpractice.com/2012/04/29/fixing-pkix-path-building-issues-when-using-javamail-and-smtp/"/>
    <updated>2012-04-29T06:08:01-07:00</updated>
    <id>http://springinpractice.com/2012/04/29/fixing-pkix-path-building-issues-when-using-javamail-and-smtp</id>
    <content type="html"><![CDATA[<p>I&rsquo;m writing this post in support of <a href="http://springinpractice.com/category/book/chapter-8/">chapter 8</a> in my book <a href="http://www.manning.com/wheeler/">Spring in Practice</a>, which deals with <a href="http://springinpractice.com/2008/05/15/send-e-mail-using-spring-and-javamail/">Spring/JavaMail integration</a>, since it&rsquo;s not always straightforward to <a href="http://springinpractice.com/2012/04/29/configuring-jetty-to-use-gmail-as-an-smtp-provider/">configure an app to use SMTP</a>.</p>

<!-- more -->




<h3>The problem</h3>


<p>Suppose that you&rsquo;ve configured your JavaMail app to send e-mail via an SMTP server, but you get the following error:</p>

<pre>HTTP ERROR 500

Problem accessing /sip/contact.html. Reason:

    Mail server connection failed; nested exception is javax.mail.MessagingException: Can't send command to SMTP host;
  nested exception is:
    javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target. Failed messages: javax.mail.MessagingException: Can't send command to SMTP host;
  nested exception is:
    javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target

Caused by:

org.springframework.mail.MailSendException: Mail server connection failed; nested exception is javax.mail.MessagingException: Can't send command to SMTP host;
  nested exception is:
    javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target. Failed messages: javax.mail.MessagingException: Can't send command to SMTP host;
  nested exception is:
    javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target; message exception details (1) are:
Failed message 1:
javax.mail.MessagingException: Can't send command to SMTP host;
  nested exception is:
    javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    at com.sun.mail.smtp.SMTPTransport.sendCommand(SMTPTransport.java:1420)
    at com.sun.mail.smtp.SMTPTransport.sendCommand(SMTPTransport.java:1408)
    at com.sun.mail.smtp.SMTPTransport.ehlo(SMTPTransport.java:847)
    at com.sun.mail.smtp.SMTPTransport.protocolConnect(SMTPTransport.java:384)
    at javax.mail.Service.connect(Service.java:297)
    at org.springframework.mail.javamail.JavaMailSenderImpl.doSend(JavaMailSenderImpl.java:389)
    at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:340)
    at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:336)

        ... snip ...
</pre>


<p>What&rsquo;s going on, and how do you fix it?</p>

<h3>What&#8217;s going on</h3>


<p>Your Java runtime doesn&rsquo;t trust the certificate.</p>

<p>Normally Java verifies certificates through the standard <a href="http://en.wikipedia.org/wiki/Chain_of_trust">chain of trust</a> mechanism. But if that chain terminates with a certificate that Java doesn&rsquo;t trust, then Java will complain in the way described above.</p>

<h3>How you fix it</h3>




<h4>Step 1. Decide whether you want to &#8220;fix&#8221; it at all</h4>


<p>Before you tell Java to trust the cert, make sure that that&rsquo;s actually the right thing to do. I don&rsquo;t have any guidance to offer on that particular point, but if you&rsquo;re trying to connect to a well-known service (say Google) and your Java runtime gives you the PKIX issue, that&rsquo;s a red flag.</p>

<div class="alert warning">If for whatever reason you think Java ought to trust the certificate, then stop&mdash;you&#8217;re done. Don&#8217;t import the certificate into your truststore until you figure out why it (or one of the certs in the chain) isn&#8217;t already there.</div>




<h4>Step 2. Download the certificate from the remote SMTP server</h4>


<p>You can use <code>openssl</code> to get the cert, at least on Unix/Linux and MacOS. I think Cygwin provides <code>openssl</code> on Windows too.</p>

<p>Here&rsquo;s an example for mail.kattare.com, which is the SMTP server I happen to be using. Kattare uses STARTTLS so I&rsquo;m using the <code>-starttls smtp</code> flag:</p>

<pre>openssl s_client -connect mail.kattare.com:2525 -starttls smtp > kattare-smtp.cer</pre>


<p>The call will look like it&rsquo;s hung for a little while, but it hasn&rsquo;t. You can either wait it out or else just hit Ctrl-C, as the part of the response that we&rsquo;re actually interested in returns immediately.</p>

<p>Now open the file with your favorite text editor and strip out everything other than the certificate itself. Here&rsquo;s what the result looks like for the mail.kattare.com cert:</p>

<pre>-----BEGIN CERTIFICATE-----
MIIDfjCCAuegAwIBAgIDFJoPMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT
MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0
aWZpY2F0ZSBBdXRob3JpdHkwHhcNMTAwOTE5MDEzMDUxWhcNMTIxMTIwMTQ0MjI4
WjCB4TEpMCcGA1UEBRMgRFZxc0c5bkIxUGNleTNZVUFzY3otOFNWV0ZnL2Y1aU8x
CzAJBgNVBAYTAlVTMRYwFAYDVQQKDA0qLmthdHRhcmUuY29tMRMwEQYDVQQLEwpH
VDE3NDM3OTM5MTEwLwYDVQQLEyhTZWUgd3d3LnJhcGlkc3NsLmNvbS9yZXNvdXJj
ZXMvY3BzIChjKTEwMS8wLQYDVQQLEyZEb21haW4gQ29udHJvbCBWYWxpZGF0ZWQg
LSBSYXBpZFNTTChSKTEWMBQGA1UEAwwNKi5rYXR0YXJlLmNvbTCBnzANBgkqhkiG
9w0BAQEFAAOBjQAwgYkCgYEA3E9EOUrXoPLgz/N1MFB4xtld2NyDJK5jzPk313VQ
dldvYY8SOd6XqnO/WAmm/2FaFRjhEZ7HcNPAauVeMXW2YQVGSkimeWd8ZDbKU8o6
vJuFJmnRpfxIIZxS1gzJanFrv7v+TtlIQRDP/YI5OnXkZ0sSLVBb2MK7wHLDbtej
dhECAwEAAaOB1TCB0jAfBgNVHSMEGDAWgBRI5mj5K9KylddH2CMgEE8zmJCf1DAO
BgNVHQ8BAf8EBAMCBPAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMCUG
A1UdEQQeMByCDSoua2F0dGFyZS5jb22CC2thdHRhcmUuY29tMDoGA1UdHwQzMDEw
L6AtoCuGKWh0dHA6Ly9jcmwuZ2VvdHJ1c3QuY29tL2NybHMvc2VjdXJlY2EuY3Js
MB0GA1UdDgQWBBRCAb04OmdhLLLRIAtJGNgYnJKQcjANBgkqhkiG9w0BAQUFAAOB
gQCZQVc8nNHGo5Sr1hh9ZMBK2bcivXqLeJkOVt2pQ0OoMWDsq7/ei4njcN5QJXf0
mK3Qb4bUkdJUemS3QITRXVqNnBZaP0XUAKBxK5htwHJLuQ83q71Td6NkqSj4yS35
jM3JXG7LRkr/G6M24RCxBKONckQy+3j1wdy/jZwfisilPg==
-----END CERTIFICATE-----</pre>




<h4>Step 3. Import the certificate into your local truststore</h4>


<p>You&rsquo;ll want to import the cert into the truststore in your Java home directory. My Java home is at</p>

<pre>/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home</pre>


<p>but yours is probably somewhere else. Anyway, once you find it, the truststore is at <code>/lib/security/jssecacerts</code>, at least if you&rsquo;re using JSSE.</p>

<pre>sudo keytool -import -alias [alias] -file [cert_file] -keystore [java_home]/lib/security/jssecacerts</pre>


<p>For example, for me it&rsquo;s:</p>

<pre>sudo keytool -import -alias mail.kattare.com -file kattare-smtp.cer -keystore /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/security/jssecacerts</pre>


<p>Enter your <code>sudo</code> password and then your keystore password, and then answer yes when it asks you whether to trust the certificate. This will import the cert into the keystore (which doubles as a truststore).</p>

<h4>Step 4. Restart your app and try again</h4>


<p>Hopefully this time it works, or at least gets rid of the PKIX error.</p>

<h3>References</h3>




<ul>
<li><a href="http://serverfault.com/questions/131627/how-to-inspect-remote-smtp-servers-tls-certificate">How to inspect remote SMTP server&#8217;s TLS certificate? [serverfault]</a>: Explains how to get the remote certificate.</li>
<li><a href="http://stackoverflow.com/questions/373295/digital-certificate-how-to-import-cer-file-in-to-truststore-file-using">Digital Certificate: How to import .cer file in to .truststore file using? [stackoverflow]</a>: Explains how to import the certificate into your truststore.</li>
<li><a href="http://en.wikipedia.org/wiki/STARTTLS">STARTTLS [Wikipedia]</a>: Background material on STARTTLS.</li>
</ul>

]]></content>
  </entry>
  
</feed>

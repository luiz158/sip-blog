<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Spring in Practice]]></title>
  <link href="http://springinpractice.com/atom.xml" rel="self"/>
  <link href="http://springinpractice.com/"/>
  <updated>2013-09-24T00:20:15-07:00</updated>
  <id>http://springinpractice.com/</id>
  <author>
    <name><![CDATA[Willie Wheeler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Optimistic locking with Spring Data REST]]></title>
    <link href="http://springinpractice.com/2013/09/14/optimistic-locking-with-spring-data-rest/"/>
    <updated>2013-09-14T20:43:00-07:00</updated>
    <id>http://springinpractice.com/2013/09/14/optimistic-locking-with-spring-data-rest</id>
    <content type="html"><![CDATA[<p>I&rsquo;m working on a web service for a document management system, where clients grab documents from the web service, modify them and submit the updates. Since multiple clients can all grab the same document at the same time, we needed to implement an <a href="http://c2.com/cgi/wiki?OptimisticLocking">optimistic locking</a> scheme. In this scheme, each document has a version number, and when the client submits an update to the service, the service checks to see whether the submitted version number baseline is still the most recent one in the database. If so, we increment the version number and the update proceeds. Otherwise, we throw an exception indicating a conflict.</p>

<!-- more -->


<p>From a technology perspective we&rsquo;re using <a href="http://projects.spring.io/spring-data-rest/">Spring Data REST</a>, <a href="http://projects.spring.io/spring-data-jpa/">Spring Data JPA</a>, JPA and Hibernate to implement the web service. So I originally tried to use <a href="http://docs.oracle.com/javaee/6/api/javax/persistence/Version.html">JPA&rsquo;s @Version annotation</a>. But for reasons I describe <a href="http://stackoverflow.com/questions/18780621/does-spring-data-rest-support-jpa-version">here</a> it doesn&rsquo;t work. <a href="https://twitter.com/mdeinum">Marten Deinum</a> notes further that this isn&rsquo;t really a problem with Spring Data REST <em>per se</em>; it affects e.g. form submissions too. At Marten&rsquo;s suggestion, I created an <a href="https://jira.springsource.org/browse/DATAREST-160">enhancement request</a>, but since I needed something now, I set out to implement optimisitic locking for Spring Data REST without <code>@Version</code>.</p>

<p>The trick is to listen for events that are fired before the update occurs. Spring Data REST fires such events, but so does JPA, and I decided to use JPA&rsquo;s events instead to ensure that the version number get/test/increment happens as part of a single atomic transaction. (My guess is that the Spring Data REST <a href="http://docs.spring.io/spring-data/rest/docs/1.1.0.M1/reference/htmlsingle/#events-chapter">BeforeSaveEvent</a> fires before entering the transaction.)</p>

<p>Here&rsquo;s the code. First, here&rsquo;s an interface for versioned entities.</p>

<pre><code>package myapp.entity;

public interface VersionedEntity {

    Long getVersion();

    void setVersion(Long version);
}
</code></pre>

<p>Next we have an abstract base class for versioned entities. I could have done a mixin-style implementation here (using, e.g., <a href="http://www.eclipse.org/aspectj/doc/next/progguide/language-interType.html">AspectJ inter-type declarations</a>), but I decided to keep it simple for now.</p>

<pre><code>package myapp.entity;

import javax.persistence.Column;
import javax.persistence.EntityListeners;
import javax.persistence.MappedSuperclass;
import myapp.repo.listener.OptimisticLockListener;

@MappedSuperclass
@EntityListeners(OptimisticLockListener.class)
public abstract class AbstractVersionedEntity implements VersionedEntity {

    @Column(name = "VERSION")
    private Long version;

    @Override
    public Long getVersion() { return version; }

    @Override
    public void setVersion(Long version) { this.version = version; }
}
</code></pre>

<p>Notice the <code>@EntityListener</code> annotation. This tells JPA which class will listen for JPA lifecycle events. Here&rsquo;s the <code>OptimisticLockListener</code>.</p>

<pre><code>package myapp.repo.listener;

import javax.persistence.PreUpdate;
import org.springframework.stereotype.Component;
import myapp.entity.VersionedEntity;
import myapp.util.ApplicationContextProvider;

public class OptimisticLockListener {

    @PreUpdate
    public void preUpdate(Object entity) {
        if (entity instanceof VersionedEntity) {
            getChecker().check((VersionedEntity) entity);
        }
    }

    private OptimisticLockChecker getChecker() {
        return ApplicationContextProvider
            .getApplicationContext()
            .getBean(OptimisticLockChecker.class);
    }
}
</code></pre>

<p>In the listing above we grab an <code>OptimisticLockChecker</code> and then run the check. I&rsquo;ve implemented that as a separate class because I&rsquo;m going to need the application&rsquo;s JPA <code>EntityManager</code> to do the version check, and I need a managed bean to use <code>@PersistenceContext</code> to inject the <code>EntityManager</code>. Unfortunately, <a href="http://stackoverflow.com/questions/12951701/how-to-get-entity-manager-or-transaction-in-jpa-listener">JPA 2.0 doesn&rsquo;t treat entity listeners as managed beans</a> (apparently that will change in JPA 2.1). That&rsquo;s why there&rsquo;s a separate <code>OptimisticLockChecker</code> class.</p>

<p><a href="https://twitter.com/vguhesan">Venkatt Guhesan</a> offers <code>ApplicationContextProvider</code> as a <a href="http://mythinkpond.wordpress.com/2010/03/22/spring-application-context/">clever way to get the app&rsquo;s context from an unmanaged instance</a>. (Note that we can&rsquo;t simply create a new <code>ClassPathXmlApplicationContext</code> from the Spring configuration files since we want to use the same <code>EntityManagerFactory</code> that the rest of the app is using.) Here&rsquo;s the technique.</p>

<pre><code>package myapp.util;

import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

public class ApplicationContextProvider implements ApplicationContextAware {
    private static ApplicationContext applicationContext;

    public static ApplicationContext getApplicationContext() { return applicationContext; }

    @Override
    public void setApplicationContext(ApplicationContext appContext) throws BeansException {
        applicationContext = appContext;
    }
}
</code></pre>

<p>Finally, let&rsquo;s look at the <code>OptimisticLockChecker</code> itself.</p>

<pre><code>package myapp.repo.listener;

import javax.persistence.EntityManager;
import javax.persistence.OptimisticLockException;
import javax.persistence.PersistenceContext;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Component;
import myapp.entity.VersionedEntity;

@Component
public class OptimisticLockChecker {
    @PersistenceContext private EntityManager entityManager;
    @Inject private JdbcTemplate jdbcTemplate;

    public void check(VersionedEntity entity) {
        Long submittedVersion = entity.getVersionId();
        if (submittedVersion == null) {
            throw new RuntimeException("Submitted entity must have a version");
        }

        Class&lt;?&gt; entityClass = entity.getClass();

        Annotation tableAnn = AnnotationUtils.findAnnotation(entityClass, Table.class);
        String tableName = (String) AnnotationUtils.getValue(tableAnn, "name");

        Field idField = ReflectionUtils.findField(entityClass, "id");
        Annotation idColAnn = idField.getAnnotation(Column.class);
        String idColName = (String) AnnotationUtils.getValue(idColAnn, "name");

        String sql = "select version from " + tableName
            + " where " + idColName + "=" + entity.getId();
        Long latestVersion = jdbcTemplate.queryForObject(sql, Long.class);

        if (submittedVersion != latestVersion) {
            throw new OptimisticLockException(
                    "Stale entity: submitted version " + submittedVersion
                    + ", but latest version is " + latestVersion);
        }

        entity.setVersion(entity.getVersion() + 1);
    }
}
</code></pre>

<p>Despite appearances, the code is a little tricky because we&rsquo;re trying to compare an entity version in the persistence context with an entity version in the database, and by design JPA hides the database from the developer. There are different ways to achieve this, but the most straightforward and reliable is probably to use <code>JdbcTemplate</code> to get the latest version in the database. We use Spring&rsquo;s <code>AnnotationUtils</code> and <code>ReflectionUtils</code> to grab the table name and ID column name from the <code>@Table</code> and <code>@Column</code> annotations. (Note that the code above is for a <code>@Column</code> annotation defined on the field itself; if you&rsquo;ve defined <code>@Column</code> on the getter, then you can use <code>AnnotationUtils</code> to get at that.)</p>

<p>After that, we compare and either throw an exception or else increment the version number.</p>

<p>Perhaps the Spring Data REST guys will provide more direct support for <code>@Version</code> (or some suitable alternative) at some future point. Until then, I hope the approach above proves useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress migration]]></title>
    <link href="http://springinpractice.com/2013/09/07/octopress-migration/"/>
    <updated>2013-09-07T19:32:00-07:00</updated>
    <id>http://springinpractice.com/2013/09/07/octopress-migration</id>
    <content type="html"><![CDATA[<p>I&rsquo;m in the process of migrating the blog from Wordpress to <a href="http://octopress.org/">Octopress</a>. Octopress is a lot easier to hack and in fact was designed for the hacker crowd. Plus I like being able to manage my posts in source control instead of in a database. Makes sense for all kinds of reasons.</p>

<p>It might take a bit for the dust to settle, but that&rsquo;s what&rsquo;s going on.</p>

<p>If you&rsquo;re interested in the XSLT script I wrote to migrate the posts, please see <a href="https://github.com/williewheeler/wordpress2octopress">wordpress2octopress</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SeaJUG talk on Spring Data JPA]]></title>
    <link href="http://springinpractice.com/2013/06/08/seajug-talk-on-spring-data-jpa-spring-data-rest-and-spring-hateoas/"/>
    <updated>2013-06-08T16:17:00-07:00</updated>
    <id>http://springinpractice.com/2013/06/08/seajug-talk-on-spring-data-jpa-spring-data-rest-and-spring-hateoas</id>
    <content type="html"><![CDATA[<p><img src="http://springinpractice.s3.amazonaws.com/blog/images/seajug_expedia.jpg" alt="SeaJUG presentation at Expedia" /></p>

<p>Last month I did a talk at Expedia on <a href="http://www.springsource.org/spring-data/jpa">Spring Data JPA</a>, <a href="http://www.springsource.org/spring-data/rest">Spring Data REST</a> and <a href="https://github.com/SpringSource/spring-hateoas">Spring HATEOAS</a> for the <a href="http://www.seajug.org/">Seattle Java User&rsquo;s Group</a>.</p>

<p><a href="http://vimeo.com/66717404">Here&rsquo;s the video.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring in Practice now available]]></title>
    <link href="http://springinpractice.com/2013/05/08/spring-in-practice-now-available/"/>
    <updated>2013-05-08T23:42:00-07:00</updated>
    <id>http://springinpractice.com/2013/05/08/spring-in-practice-now-available</id>
    <content type="html"><![CDATA[<p><img src="http://springinpractice.s3.amazonaws.com/blog/images/sip_on_shelves.jpg" alt="SiP at Barnes &amp; Noble" /></p>

<p>Spring in Practice is now available!</p>

<p>It&rsquo;s also the Deal of the Day today, which means half off if you buy it today (May 8, 2013) from Manning. Use code <strong>dotd0508au</strong> at <a href="http://www.manning.com/wheeler/">www.manning.com/wheeler</a>.</p>

<p>Josh and I hope that everybody enjoys the book. It was a lot of work, but I&rsquo;m very happy with the end result.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Renaming node classes when using Spring Data Neo4j]]></title>
    <link href="http://springinpractice.com/2012/12/09/renaming-node-classes-when-using-spring-data-neo4j/"/>
    <updated>2012-12-09T15:33:00-08:00</updated>
    <id>http://springinpractice.com/2012/12/09/renaming-node-classes-when-using-spring-data-neo4j</id>
    <content type="html"><![CDATA[<p>This is one of those posts where I&rsquo;m just jotting down some notes for my own future use, but someone else may find this useful.</p>

<p>I&rsquo;m going to show how to rename a node entity class when using Spring Data Neo4j. I&rsquo;m talking about the fully-qualified classname here, so it applies when we want to rename a package too.</p>

<!-- more -->


<p>First, suppose my old classname is <code>org.zkybase.cmdb.api.domain.ApplicationEntity</code>. If I go into the Neo4j shell, I can see that I have a couple of nodes of this type:</p>

<pre><code>neo4j-sh (0)$ start n=node:__types__(className="org.zkybase.cmdb.api.domain.ApplicationEntity") return n
+-----------------------------------------------------------------------------------------------------+
| n                                                                                                   |
+-----------------------------------------------------------------------------------------------------+
| Node[36]{__type__-&gt;"org.zkybase.cmdb.api.domain.ApplicationEntity",name-&gt;"Zkybase"}                 |
| Node[49]{name-&gt;"Spring in Practice Blog",__type__-&gt;"org.zkybase.cmdb.api.domain.ApplicationEntity"} |
+-----------------------------------------------------------------------------------------------------+
2 rows, 1 ms
</code></pre>

<p>From the above, it <i>looks like</i> you can just go to the nodes themselves and change their <code>__type__</code> fields:</p>

<pre><code>neo4j-sh (0)$ cd -a 36
neo4j-sh (Zkybase,36)$ ls
*__type__ =[org.zkybase.cmdb.api.domain.ApplicationEntity]
*name     =[Zkybase]
neo4j-sh (Zkybase,36)$ set __type__ "org.zkybase.api.domain.entity.ApplicationEntity"
neo4j-sh (Zkybase,36)$ ls
*__type__ =[org.zkybase.api.domain.entity.ApplicationEntity]
*name     =[Zkybase]
</code></pre>

<p>But then when you try to find the node using the query, it doesn&rsquo;t show up.</p>

<pre><code>neo4j-sh (Zkybase,36)$ start n=node:__types__(className="org.zkybase.api.domain.entity.ApplicationEntity") return n
+---+
| n |
+---+
+---+
0 rows, 1 ms
</code></pre>

<p>Moreover, when you re-run the original query, the node whose <code>__type__</code> we changed still shows up.</p>

<p>The problem is that we need to reindex the nodes. Spring Data Neo4j uses an index called <code>__types__</code>, and we need to replace the old index entries with some new ones.</p>

<p>Let&rsquo;s see what&rsquo;s under the old classname, using <code>index -g</code> to get the relevant nodes from the <code>__types__</code> index:</p>

<pre><code>neo4j-sh (Zkybase,36)$ index -g __types__ className "org.zkybase.cmdb.api.domain.ApplicationEntity"
(me)

(Spring in Practice Blog,49)
</code></pre>

<p>And under the new classname:</p>

<pre><code>neo4j-sh (Zkybase,36)$ index -g __types__ className "org.zkybase.api.domain.entity.ApplicationEntity"
neo4j-sh (Zkybase,36)$ 
</code></pre>

<p>We can fix that using <code>index -i</code>, which indexes the current entity:</p>

<pre><code>neo4j-sh (Zkybase,36)$ index -i __types__ className "org.zkybase.api.domain.entity.ApplicationEntity"
neo4j-sh (Zkybase,36)$ cd -a 49
neo4j-sh (Spring in Practice Blog,49)$ index -i __types__ className "org.zkybase.api.domain.entity.ApplicationEntity"
neo4j-sh (Spring in Practice Blog,49)$ cd -a 36
neo4j-sh (Zkybase,36)$ index -g __types__ className "org.zkybase.api.domain.entity.ApplicationEntity"
(me)

(Spring in Practice Blog,49)
</code></pre>

<p>We still need to clean up the old entries, though, because they&rsquo;re still there. We use <code>index -r</code> to remove the index entry for the current node:</p>

<pre><code>neo4j-sh (Zkybase,36)$ index -r __types__ className "org.zkybase.cmdb.api.domain.ApplicationEntity"
neo4j-sh (Zkybase,36)$ cd -a 49
neo4j-sh (Spring in Practice Blog,49)$ index -r __types__ className "org.zkybase.cmdb.api.domain.ApplicationEntity"
neo4j-sh (Spring in Practice Blog,49)$ index -g __types__ className "org.zkybase.cmdb.api.domain.ApplicationEntity"
neo4j-sh (Spring in Practice Blog,49)$ 
</code></pre>

<p>That&rsquo;s it. This was the result of about 15 minutes of investigation, so there&rsquo;s a good chance there&rsquo;s more going on than what I&rsquo;ve described. Let me know and I&rsquo;ll update the post accordingly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pageable custom queries with Spring Data JPA]]></title>
    <link href="http://springinpractice.com/2012/06/30/pageable-custom-queries-with-spring-data-jpa/"/>
    <updated>2012-06-30T12:41:00-07:00</updated>
    <id>http://springinpractice.com/2012/06/30/pageable-custom-queries-with-spring-data-jpa</id>
    <content type="html"><![CDATA[<p>In previous posts I explained how you can use Spring Data JPA to <a href="http://springinpractice.com/2012/04/24/autogenerate-daos-and-queries-using-spring-data-jpa/">create repositories that support custom queries</a>, as well as to <a href="http://springinpractice.com/2012/05/11/pagination-and-sorting-with-spring-data-jpa/">support paging in your app</a>. You might wonder whether you can use these together.</p>

<p>The answer is yes. It works just like you would expect:</p>

<pre><code>import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;

public interface IncidentRepo extends JpaRepository&lt;Incident, Long&gt; {

    Page&lt;Incident&gt; findByProblemId(Long problemId, Pageable pageable);
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to run JavaScript from Java]]></title>
    <link href="http://springinpractice.com/2012/05/13/how-to-run-javascript-from-java/"/>
    <updated>2012-05-13T11:02:00-07:00</updated>
    <id>http://springinpractice.com/2012/05/13/how-to-run-javascript-from-java</id>
    <content type="html"><![CDATA[<p>Java 6 comes with the <a href="http://www.mozilla.org/rhino/">Rhino JavaScript engine</a>, which makes it easy to run JavaScript from inside your Java app. There are different situations in which you might want to do this. Chapter 9 of <a href="http://www.manning.com/wheeler/">Spring in Practice</a> affords a good example. There we&rsquo;re implementing a rich-text comment engine based on the WMD editor that <a href="http://stackoverflow.com">Stack Overflow</a> uses. We have a <code>showdown.js</code> script that maps Markdown to HTML, and we want to run it in two places:</p>

<ul>
<li>on the client to present a preview pane</li>
<li>on the server to store the Markdown as HTML for easy presentation (as opposed to running the script against every comment dynamically)</li>
</ul>


<p>Here&rsquo;s how we can run it on the server:</p>

<pre><code>import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

...

public final class RichTextFilter implements TextFilter {
    @Inject private File showdownJsFile;

    private String markdownToHtml(String markdown) {
        try {
            ScriptEngineManager mgr = new ScriptEngineManager();
            ScriptEngine engine = mgr.getEngineByName("JavaScript");
            engine.eval(showdownJs);
            engine.eval("var markdown = '" + markdown + "';");
            engine.eval("var converter = new Showdown.converter();");
            engine.eval("var html = converter.makeHtml(markdown);");
            return (String) engine.get("html");
        } catch (ScriptException e) {
            // Shouldn't happen unless somebody breaks the script
            throw new RuntimeException(e);
        }
    }

    ... other stuff ...
}
</code></pre>

<p>To see how to inject the File into the class in Spring, see my post <a href="http://springinpractice.com/2012/05/12/injecting-a-file-from-the-classpath-into-a-bean/">Injecting a file from the classpath into a bean</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Injecting a file from the classpath into a bean]]></title>
    <link href="http://springinpractice.com/2012/05/12/injecting-a-file-from-the-classpath-into-a-bean/"/>
    <updated>2012-05-12T23:29:00-07:00</updated>
    <id>http://springinpractice.com/2012/05/12/injecting-a-file-from-the-classpath-into-a-bean</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a quick tip for you.</p>

<p>Sometimes you need to inject a <code>java.io.File</code> from your classpath into a bean, but you don&rsquo;t want to have to spell out the absolute path (even in a configuration file). Never fear. It&rsquo;s easy:</p>

<pre><code>&lt;bean id="tagProviderResource" class="org.springframework.core.io.ClassPathResource"&gt;
    &lt;constructor-arg value="/htmlcleaner.xml" /&gt;
&lt;/bean&gt;

&lt;util:property-path id="tagProviderFile" path="tagProviderResource.file" /&gt;

&lt;bean id="tagProvider" class="org.htmlcleaner.ConfigFileTagProvider"&gt;
    &lt;constructor-arg ref="tagProviderFile" /&gt;
&lt;/bean&gt;
</code></pre>

<p>In the configuration above, I used <code>ClassPathResource</code> to find the <code>htmlcleaner.xml</code> resource on the classpath. Then I used the handy <code>&lt;util:property-path&gt;</code> tag to assign the resource&rsquo;s <code>file</code> property its own ID. Finally, I inject the <code>File</code> using constructor injection.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pagination and sorting with Spring Data JPA]]></title>
    <link href="http://springinpractice.com/2012/05/11/pagination-and-sorting-with-spring-data-jpa/"/>
    <updated>2012-05-11T01:31:00-07:00</updated>
    <id>http://springinpractice.com/2012/05/11/pagination-and-sorting-with-spring-data-jpa</id>
    <content type="html"><![CDATA[<p>In an <a href="http://springinpractice.com/2012/04/24/autogenerate-daos-and-queries-using-spring-data-jpa/">earlier post</a> I introduced Spring Data JPA, which makes it really easy to create a DAO layer. I didn&rsquo;t get into too much depth, so this time I want to explore a couple of cool features that the DAOs support: pagination and sorting.</p>

<!-- more -->


<p>Pagination and sorting are useful when you have long lists that you want the user to be able to navigate. Here for example is a UI for a runbook app I&rsquo;m building. One of the things it allows the user to do is view deployment logs, which we typically want to see in reverse chronological order. Also, since there are lots of logs, we want to page.</p>

<p><img src="http://springinpractice.s3.amazonaws.com/blog/images/2012-05-11-pagination-and-sorting-with-spring-data-jpa/pagination-1.jpg" alt="Pagination screenshot" /></p>

<p>There are different ways to design a pagination system from a user experience perspective. Here I&rsquo;ve done something pretty typical: I have links for first/previous/next/last, and then I show a bounded set of pages around the current page.</p>

<h2>The repository</h2>

<p>How does Spring Data JPA help? Here&rsquo;s my <code>DeploymentRepo</code> interface:</p>

<pre><code>package com.example.repo;

import org.springframework.data.jpa.repository.JpaRepository;
import com.example.model.Deployment;

public interface DeploymentRepo extends JpaRepository&lt;Deployment, Long&gt; { }
</code></pre>

<p>The <code>JpaRepository</code> interface extends Spring Data&rsquo;s <code>PagingAndSortingRepository</code> interface, so I get some paging/sorting finders for free.</p>

<h2>The service</h2>

<p>I have a simple service bean that calls the repo:</p>

<pre><code>package com.example.service.impl;

import javax.inject.Inject;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.repo.DeploymentRepo;
import com.example.model.Deployment;
import com.example.service.DeploymentLogService;

@Service
@Transactional
public class DeploymentLogServiceImpl implements DeploymentLogService {
    private static final int PAGE_SIZE = 50;

    @Inject private DeploymentRepo deploymentRepo;

    public Page&lt;Deployment&gt; getDeploymentLog(Integer pageNumber) {
        PageRequest request =
            new PageRequest(pageNumber - 1, PAGE_SIZE, Sort.Direction.DESC, "startTime");
        return deploymentRepo.findAll(pageRequest);
    }
}
</code></pre>

<p>Spring Data uses 0-indexed pages, but I want my service interface to use 1-indexed pages (they will be user-visible and I want the page numbers to be intuitive), so I make the appropriate adjustment in the request. I specify the page size (50 deployments per page), sort direction, and also one or more property names to act as sort keys. Here I&rsquo;ve chosen <code>startTime</code>, which is a timestamp for the start of the deployment.</p>

<p>That takes care of the Spring Data JPA part, but just for fun, I&rsquo;ll show you a simplified version of the controller method and JSP too.</p>

<h2>The controller</h2>

<p>Here&rsquo;s the controller method:</p>

<pre><code>@RequestMapping(value = "/pages/{pageNumber}", method = RequestMethod.GET)
public String getRunbookPage(@PathVariable Integer pageNumber, Model model) {
    Page&lt;Deployment&gt; page = deploymentService.getDeploymentLog(pageNumber);

    int current = page.getNumber() + 1;
    int begin = Math.max(1, current - 5);
    int end = Math.min(begin + 10, page.getTotalPages());

    model.addAttribute("deploymentLog", page);
    model.addAttribute("beginIndex", begin);
    model.addAttribute("endIndex", end);
    model.addAttribute("currentIndex", current);

    return "deploymentLog";
}
</code></pre>

<p>Note again that I&rsquo;ve adjusted the page numbers to convert Spring Data&rsquo;s 0-indexing to my app&rsquo;s 1-indexing.</p>

<p>I&rsquo;ve precalculated the begin/end indices because JSTL doesn&rsquo;t have the min and max functions, and anyway, it&rsquo;s cleaner to do this sort of thing in the controller.</p>

<h2>The JSP</h2>

<p>Finally here&rsquo;s the page navigation in the JSP. It uses the <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a> library for the UI, so that&rsquo;s where the various CSS elements come from.</p>

<pre><code>&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;

&lt;c:url var="firstUrl" value="/pages/1" /&gt;
&lt;c:url var="lastUrl" value="/pages/${deploymentLog.totalPages}" /&gt;
&lt;c:url var="prevUrl" value="/pages/${currentIndex - 1}" /&gt;
&lt;c:url var="nextUrl" value="/pages/${currentIndex + 1}" /&gt;

&lt;div class="pagination"&gt;
    &lt;ul&gt;
        &lt;c:choose&gt;
            &lt;c:when test="${currentIndex == 1}"&gt;
                &lt;li class="disabled"&gt;&lt;a href="#"&gt;&amp;lt;&amp;lt;&lt;/a&gt;&lt;/li&gt;
                &lt;li class="disabled"&gt;&lt;a href="#"&gt;&amp;lt;&lt;/a&gt;&lt;/li&gt;
            &lt;/c:when&gt;
            &lt;c:otherwise&gt;
                &lt;li&gt;&lt;a href="${firstUrl}"&gt;&amp;lt;&amp;lt;&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="${prevUrl}"&gt;&amp;lt;&lt;/a&gt;&lt;/li&gt;
            &lt;/c:otherwise&gt;
        &lt;/c:choose&gt;
        &lt;c:forEach var="i" begin="${beginIndex}" end="${endIndex}"&gt;
            &lt;c:url var="pageUrl" value="/pages/${i}" /&gt;
            &lt;c:choose&gt;
                &lt;c:when test="${i == currentIndex}"&gt;
                    &lt;li class="active"&gt;&lt;a href="${pageUrl}"&gt;&lt;c:out value="${i}" /&gt;&lt;/a&gt;&lt;/li&gt;
                &lt;/c:when&gt;
                &lt;c:otherwise&gt;
                    &lt;li&gt;&lt;a href="${pageUrl}"&gt;&lt;c:out value="${i}" /&gt;&lt;/a&gt;&lt;/li&gt;
                &lt;/c:otherwise&gt;
            &lt;/c:choose&gt;
        &lt;/c:forEach&gt;
        &lt;c:choose&gt;
            &lt;c:when test="${currentIndex == deploymentLog.totalPages}"&gt;
                &lt;li class="disabled"&gt;&lt;a href="#"&gt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
                &lt;li class="disabled"&gt;&lt;a href="#"&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
            &lt;/c:when&gt;
            &lt;c:otherwise&gt;
                &lt;li&gt;&lt;a href="${nextUrl}"&gt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="${lastUrl}"&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
            &lt;/c:otherwise&gt;
        &lt;/c:choose&gt;
    &lt;/ul&gt;
&lt;/div&gt;
</code></pre>

<p>Spring Data JPA makes it very nice and simple. And Twitter Bootstrap looks great too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring's constructor namespace is a bad idea]]></title>
    <link href="http://springinpractice.com/2012/05/07/springs-constructor-namespace-is-a-bad-idea/"/>
    <updated>2012-05-07T21:26:00-07:00</updated>
    <id>http://springinpractice.com/2012/05/07/springs-constructor-namespace-is-a-bad-idea</id>
    <content type="html"><![CDATA[<p>The other day I wrote up a post <a href="http://springinpractice.com/2012/04/26/the-spring-constructor-namespace-and-some-deep-thoughts/">explaining how to use Spring&rsquo;s constructor namespace</a>, which is new with Spring 3.1. So the following might be a little surprising:</p>

<p><em>Spring&rsquo;s constructor namespace is a bad idea.</em></p>

<p>I wanted to like it&mdash;honest I did. While I&rsquo;ve always been a little iffy on the whole idea of introspecting on method parameter names, <a href="https://issues.springsource.org/browse/SPR-6500?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel">Juergen Hoeller answered my concerns</a> with respect to <code>@PathVariable</code> and the like. My worries around <a href="http://en.wikipedia.org/wiki/Principle_of_least_astonishment">least surprise</a> were admittedly academic since I always compile binaries in debug mode.</p>

<p>So I tried the constructor namespace out, and it bit me in exactly the way I expected.</p>

<!-- more -->


<h2>The problem</h2>

<p>Just as a quick refresher (or introduction), here&rsquo;s how the constructor namespace works:</p>

<pre><code>&lt;bean class="com.example.Client"
    c:restTemplate-ref-"restTemplate"
    c:baseUrl="http://localhost:8080/service" /&gt;
</code></pre>

<p>The configuration presupposes a constructor that looks like this:</p>

<pre><code>public Client(RestTemplate restTemplate, String baseUrl) { ... }
</code></pre>

<p>Here&rsquo;s the problem. Developers expect changing parameter names to be a local operation. Even in some of the Spring Web MVC cases that Juergen mentions in response to my JIRA issue&mdash;<code>@PathVariable</code>, <code>@RequestParam</code>, <code>@RequestHeader</code> and <code>@CookieValue</code>&mdash;the annotations in question are colocated with the parameters; e.g.</p>

<pre><code>public String getUser(@PathVariable Long id, Model model) { ... }
</code></pre>

<p>so somebody experienced with the framework will know what to do, and somebody less experienced will discover the issue soon enough (the code won&rsquo;t work) and fix it.</p>

<p>But the constructor namespace is totally different. Changing the constructor parameter name has the potential to break client code, and that client code may not be part of your current project. So you might not know you broke someone else&rsquo;s code.</p>

<p>This happened to me today, except it was breaking my own code in a separate project. I have a web service client with a constructor like this:</p>

<pre><code>public Client(RestTemplate restTemplate, String basePath) { ... }
</code></pre>

<p>and I changed that to</p>

<pre><code>public Client(RestTemplate restTemplate, String baseUrl) { ... }
</code></pre>

<p>This broke code in another project that was using the constructor namespace to inject values into the constructor. This is another violation of the principle of least surprise, but this time I don&rsquo;t think it&rsquo;s theoretical in the least. It happened to me the very first time.</p>

<h2>Some possible solutions</h2>

<p>One solution would be for Spring to simply get rid of this feature, as it leads to brittle code.</p>

<p>Another possibility would be for Spring to do something like this instead:</p>

<pre><code>public Client(@Param RestTemplate restTemplate, @Param String baseUrl) { ... }
</code></pre>

<p>and even</p>

<pre><code>public Client(@Param("restTemplate") RestTemplate template, @Param("baseUrl") String url) { ... }
</code></pre>

<p>That would make it more explicit that the constructor parameter names were being exposed as part of an API.</p>

<p>If you&rsquo;re set on using it, you should adopt the practice of documenting your constructors when they support this configuration style. And as an API consumer, you should assume that constructor parameter names are <em>not</em> contractual unless explicitly documented as such. Parameter names in Java have always counted as implementation details, and while I&rsquo;m all for innovation and challenging the status quo, the benefit that the constructor namespace offers here is far too modest to call for revisiting this particular issue.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mavenizing an empty GitHub project in Eclipse]]></title>
    <link href="http://springinpractice.com/2012/05/06/mavenizing-an-empty-github-project-in-eclipse/"/>
    <updated>2012-05-06T12:30:15-07:00</updated>
    <id>http://springinpractice.com/2012/05/06/mavenizing-an-empty-github-project-in-eclipse</id>
    <content type="html"><![CDATA[<p>This post is for myself more than anything else, just because I keep forgetting the steps involved.</p>

<p>I&rsquo;m using SpringSource Tool Suite 2.9.1.RELEASE, which is based on Eclipse 3.7.2 (Indigo). I have the egit and m2e Eclipse plugins installed.</p>

<h3>The scenario</h3>


<p>You have a brand new, pretty-much-empty GitHub project (other than the README, say&mdash;but no Maven stuff yet), and you want to import it into Eclipse as a Maven project.</p>

<h3>The steps</h3>




<ol>

<li>Add the remote GitHub repo to your list of Git repos in Eclipse.</li>

<li>In Eclipse, go to File &rarr; Import &rarr; Git &rarr; Projects from Git. (I&#8217;m on a Mac; the menu may be a little different for other platforms.)</li>

<li>On the &#8220;Select Repository Source&#8221;, choose &#8220;URI&#8221;.</li>

<li>On the &#8220;Source Git Repository&#8221; pane, enter the URI info. It might be something like <code>ssh://git@github.com/williewheeler/sip11.git</code>, for example.</li>

<li>On the &#8220;Branch Selection&#8221; pane, choose the master branch.</li>

<li>On the &#8220;Local Destination&#8221; pane, decide where you want the local copy to live.</li>

<li>Where it asks you to select an import wizard, choose &#8220;Use the New Project wizard&#8221; and click &#8220;Finish&#8221;.</li>

<li>Now you have to choose a New Project wizard. Choose Maven &rarr; Maven Project.</li>

<li>From here just create the project like you would any other new Maven project. Once you&#8217;re done, it will show up in your list of projects in the Package Explorer view, and sharing should be activated.</li>

</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Combined my two blogs]]></title>
    <link href="http://springinpractice.com/2012/05/05/combined-my-two-blogs/"/>
    <updated>2012-05-05T14:39:30-07:00</updated>
    <id>http://springinpractice.com/2012/05/05/combined-my-two-blogs</id>
    <content type="html"><![CDATA[<p>To better focus my Java/Spring blogging, I&rsquo;ve merged my former Wheeler Software blog into this one. There are a few articles that didn&rsquo;t make the cut, but the majority of them did.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating non-Wordpress blog comments into Wordpress]]></title>
    <link href="http://springinpractice.com/2012/05/03/migrating-non-wordpress-blog-comments-into-wordpress/"/>
    <updated>2012-05-03T05:24:51-07:00</updated>
    <id>http://springinpractice.com/2012/05/03/migrating-non-wordpress-blog-comments-into-wordpress</id>
    <content type="html"><![CDATA[<p>This isn&rsquo;t a Spring post, but I&rsquo;m doing something that I think others might find useful, so I&rsquo;m going to share it.</p>

<p>I&rsquo;m in the process of migrating content over from my old Wheeler Software blog to this one, which is a Wordpress blog. Besides the posts themselves, I want to move the comments over.</p>

<p>The slight wrinkle in the plan is that the software and database for the old blog are custom. So getting the comments over involves some SQL scripting. Both databases are MySQL databases, so that helps a bit.</p>

<p>Here&rsquo;s what I&rsquo;m doing.</p>

<!-- more -->




<h3>The old, custom comment table</h3>




<pre>CREATE TABLE `services_comment` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `url` varchar(255) NOT NULL DEFAULT '',
  `name` varchar(50) NOT NULL,
  `email` varchar(50) NOT NULL,
  `web` varchar(100) DEFAULT NULL,
  `text` text NOT NULL,
  `html_text` text,
  `ip_addr` varchar(15) NOT NULL,
  `date_created` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_modified` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `services_comment_idx0` (`url`,`date_created`)
) ENGINE=InnoDB AUTO_INCREMENT=1686 DEFAULT CHARSET=latin1;</pre>




<h3>The Wordpress post table</h3>


<p>This isn&rsquo;t the entire table, but just the columns that we care about for this post:</p>

<pre>CREATE TABLE `wp_posts` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_title` text NOT NULL,
  `comment_count` bigint(20) NOT NULL DEFAULT '0',

  ... other columns that we don't care about for our current purpose ...

) ENGINE=MyISAM AUTO_INCREMENT=1126 DEFAULT CHARSET=utf8;</pre>




<h3>The Wordpress comment table</h3>




<pre>CREATE TABLE `wp_comments` (
  `comment_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_post_ID` bigint(20) unsigned NOT NULL DEFAULT '0',
  `comment_author` tinytext NOT NULL,
  `comment_author_email` varchar(100) NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT '0',
  `comment_approved` varchar(20) NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) NOT NULL DEFAULT '',
  `comment_type` varchar(20) NOT NULL DEFAULT '',
  `comment_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`comment_ID`),
  KEY `comment_approved` (`comment_approved`),
  KEY `comment_post_ID` (`comment_post_ID`),
  KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  KEY `comment_date_gmt` (`comment_date_gmt`),
  KEY `comment_parent` (`comment_parent`)
) ENGINE=MyISAM AUTO_INCREMENT=289 DEFAULT CHARSET=utf8;</pre>




<h3>The copy script</h3>




<div class="alert warning"><strong>WARNING and DISCLAIMER:</strong> Before you try anything like this, back up your database! And it&#8217;s a good idea to experiment with your script on a separate copy of the database before trying it out on the real thing.

You&#8217;ve been warned. I&#8217;m not responsible if you hose your database, and I&#8217;m not going to field support requests!</div>




<h4>Step 1. Copy the old table into the new database.</h4>


<p>I created a copy of my old comment table inside the new Wordpress database to facilitate the copying.</p>

<h4>Step 2. Look up the target Wordpress post&#8217;s ID</h4>


<p>You&rsquo;ll need to have something to attach your comments to. You can use whatever means you like here; I just looked it up by the post title:</p>

<pre>select
  id
from
  wp_posts
where
  post_title = 'Getting started with Hibernate Validator' and
  post_parent = 0
into
  @post_id;</pre>


<p>Note that you want the post with <code>post_parent = 0</code>. Other posts are the various revisions you create over time, and Wordpress has to have a way to attach all the comments to the same single post.</p>

<h4>Step 3. Copy the comments</h4>


<p>This is obviously dependent on the specifics of your source table. In my case the source table is pretty close to the destination table, so that makes things a lot easier.</p>

<p>I didn&rsquo;t really care about getting the date vs. GMT date right, so I just used the same date for both. If you care, I&rsquo;m sure there&rsquo;s a function that can handle that.</p>

<pre>insert into
  wp_comments (comment_post_ID, comment_author, comment_author_email, comment_author_url, comment_author_IP, comment_date, comment_date_gmt, comment_content, comment_approved)
select
  @post_id, name, email, web, ip_addr, date_created, date_created, html_text, 1
from
  services_comment
where
  url = '/hibernate-validator.html'
order by
  date_created;</pre>




<h4>Step 4. Update the post&#8217;s comment count</h4>


<p>Presumably for performance reasons, Wordpress stores the comment count with the post itself. So we have to update that column or else it will say &ldquo;0 comments&rdquo; even though there&rsquo;s a bunch of comments below:</p>

<pre>select count(*) from wp_comments where comment_post_ID = @post_id and comment_approved = 1 into @comment_count;
update wp_posts set comment_count = @comment_count where ID = @post_id;</pre>


<p>It probably wouldn&rsquo;t be a bad idea to wrap these up in a stored procedure if you have a lot of posts. But no biggie either way.</p>

<h4>Step 5. Verify</h4>


<p>Check to see whether your comments showed up. Mine did:</p>

<ul class="square">
<li><a href="http://springinpractice.com/2009/02/02/getting-started-with-hibernate-validator/" target="_blank">Hibernate Validator post</a></li>
<li><a href="http://springinpractice.com/2008/05/05/build-a-shopping-cart-with-spring-web-flow-2-part-1/" target="_blank">Spring Web Flow post</a></li>
</ul>


<p>For some reason the Gravatars don&rsquo;t seem to be showing up as much when there are a lot of comments all on a single page. I don&rsquo;t know if it&rsquo;s rate limited or what.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring Jetty to use Gmail as an SMTP provider]]></title>
    <link href="http://springinpractice.com/2012/04/29/configuring-jetty-to-use-gmail-as-an-smtp-provider/"/>
    <updated>2012-04-29T09:13:34-07:00</updated>
    <id>http://springinpractice.com/2012/04/29/configuring-jetty-to-use-gmail-as-an-smtp-provider</id>
    <content type="html"><![CDATA[<p>In chapter 8 of <a href="http://www.manning.com/wheeler/">Spring in Practice</a>, recipes 8.2 and 8.3 require a JNDI-exposed JavaMail session backed by an SMTP provider. Here I&rsquo;ll show how to set that up in Jetty 6. For SMTP we&rsquo;ll use Gmail, which provides a free SMTP service to anybody with a Gmail account.</p>

<!-- more -->


<p>Here&rsquo;s the <code>jetty-env.xml</code> configuration supporting the goals above.</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE Configure PUBLIC "-//Mort Bay Consulting//DTD Configure//EN" "http://jetty.mortbay.org/configure.dtd"&gt;
&lt;Configure class="org.mortbay.jetty.webapp.WebAppContext"&gt;
    &lt;New id="repository" class="org.mortbay.jetty.plus.naming.Resource"&gt;
        &lt;Arg&gt;mail/Session&lt;/Arg&gt;
        &lt;Arg&gt;
            &lt;New class="org.mortbay.naming.factories.MailSessionReference"&gt;
                &lt;Set name="user"&gt;[your_gmail_username]&lt;/Set&gt;
                &lt;Set name="password"&gt;[your_gmail_password]&lt;/Set&gt;
                &lt;Set name="properties"&gt;
                    &lt;New class="java.util.Properties"&gt;
                        &lt;Put name="mail.user"&gt;[your_gmail_username]&lt;/Put&gt;
                        &lt;Put name="mail.password"&gt;[your_gmail_password]&lt;/Put&gt;
                        &lt;Put name="mail.transport.protocol"&gt;smtp&lt;/Put&gt;
                        &lt;Put name="mail.smtp.host"&gt;smtp.gmail.com&lt;/Put&gt;
                        &lt;Put name="mail.smtp.port"&gt;587&lt;/Put&gt;
                        &lt;Put name="mail.smtp.auth"&gt;true&lt;/Put&gt;
                        &lt;Put name="mail.smtp.starttls.enable"&gt;true&lt;/Put&gt;
                        &lt;Put name="mail.debug"&gt;true&lt;/Put&gt;
                    &lt;/New&gt;
                &lt;/Set&gt;
            &lt;/New&gt;
        &lt;/Arg&gt;
    &lt;/New&gt;

    ... other configuration (e.g. JDBC DataSource) ...
&lt;/Configure&gt;
</code></pre>

<p>This configuration allows us to grab the mail session using the <code>mail/Session</code> name from the Spring configuration file:</p>

<pre><code>&lt;jee:jndi-lookup id="mailSession" jndi-name="mail/Session" resource-ref="true" /&gt;
</code></pre>

<h2>Alternative configurations</h2>

<p>For information about doing the same thing with Tomcat, or information on configuring your JavaMail session directly into the app (along with the SMTP provider details), see my post <a href="http://springinpractice.com/2008/05/15/send-e-mail-using-spring-and-javamail/">Send e-mail using Spring and JavaMail</a>.</p>

<h2>Problems?</h2>

<p>If you run into an error to the effect that there was a PKIX path building problem, then you need to import the remote certificate into your local truststore. See <a href="http://springinpractice.com/2012/04/29/fixing-pkix-path-building-issues-when-using-javamail-and-smtp/">Fixing PKIX path building issues when using JavaMail and SMTP</a> for details on this issue and how to fix it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing PKIX path building issues when using JavaMail and SMTP]]></title>
    <link href="http://springinpractice.com/2012/04/29/fixing-pkix-path-building-issues-when-using-javamail-and-smtp/"/>
    <updated>2012-04-29T06:08:01-07:00</updated>
    <id>http://springinpractice.com/2012/04/29/fixing-pkix-path-building-issues-when-using-javamail-and-smtp</id>
    <content type="html"><![CDATA[<p>I&rsquo;m writing this post in support of <a href="http://springinpractice.com/category/book/chapter-8/">chapter 8</a> in my book <a href="http://www.manning.com/wheeler/">Spring in Practice</a>, which deals with <a href="http://springinpractice.com/2008/05/15/send-e-mail-using-spring-and-javamail/">Spring/JavaMail integration</a>, since it&rsquo;s not always straightforward to <a href="http://springinpractice.com/2012/04/29/configuring-jetty-to-use-gmail-as-an-smtp-provider/">configure an app to use SMTP</a>.</p>

<!-- more -->




<h3>The problem</h3>


<p>Suppose that you&rsquo;ve configured your JavaMail app to send e-mail via an SMTP server, but you get the following error:</p>

<pre>HTTP ERROR 500

Problem accessing /sip/contact.html. Reason:

    Mail server connection failed; nested exception is javax.mail.MessagingException: Can't send command to SMTP host;
  nested exception is:
    javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target. Failed messages: javax.mail.MessagingException: Can't send command to SMTP host;
  nested exception is:
    javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target

Caused by:

org.springframework.mail.MailSendException: Mail server connection failed; nested exception is javax.mail.MessagingException: Can't send command to SMTP host;
  nested exception is:
    javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target. Failed messages: javax.mail.MessagingException: Can't send command to SMTP host;
  nested exception is:
    javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target; message exception details (1) are:
Failed message 1:
javax.mail.MessagingException: Can't send command to SMTP host;
  nested exception is:
    javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    at com.sun.mail.smtp.SMTPTransport.sendCommand(SMTPTransport.java:1420)
    at com.sun.mail.smtp.SMTPTransport.sendCommand(SMTPTransport.java:1408)
    at com.sun.mail.smtp.SMTPTransport.ehlo(SMTPTransport.java:847)
    at com.sun.mail.smtp.SMTPTransport.protocolConnect(SMTPTransport.java:384)
    at javax.mail.Service.connect(Service.java:297)
    at org.springframework.mail.javamail.JavaMailSenderImpl.doSend(JavaMailSenderImpl.java:389)
    at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:340)
    at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:336)

        ... snip ...
</pre>


<p>What&rsquo;s going on, and how do you fix it?</p>

<h3>What&#8217;s going on</h3>


<p>Your Java runtime doesn&rsquo;t trust the certificate.</p>

<p>Normally Java verifies certificates through the standard <a href="http://en.wikipedia.org/wiki/Chain_of_trust">chain of trust</a> mechanism. But if that chain terminates with a certificate that Java doesn&rsquo;t trust, then Java will complain in the way described above.</p>

<h3>How you fix it</h3>




<h4>Step 1. Decide whether you want to &#8220;fix&#8221; it at all</h4>


<p>Before you tell Java to trust the cert, make sure that that&rsquo;s actually the right thing to do. I don&rsquo;t have any guidance to offer on that particular point, but if you&rsquo;re trying to connect to a well-known service (say Google) and your Java runtime gives you the PKIX issue, that&rsquo;s a red flag.</p>

<div class="alert warning">If for whatever reason you think Java ought to trust the certificate, then stop&mdash;you&#8217;re done. Don&#8217;t import the certificate into your truststore until you figure out why it (or one of the certs in the chain) isn&#8217;t already there.</div>




<h4>Step 2. Download the certificate from the remote SMTP server</h4>


<p>You can use <code>openssl</code> to get the cert, at least on Unix/Linux and MacOS. I think Cygwin provides <code>openssl</code> on Windows too.</p>

<p>Here&rsquo;s an example for mail.kattare.com, which is the SMTP server I happen to be using. Kattare uses STARTTLS so I&rsquo;m using the <code>-starttls smtp</code> flag:</p>

<pre>openssl s_client -connect mail.kattare.com:2525 -starttls smtp > kattare-smtp.cer</pre>


<p>The call will look like it&rsquo;s hung for a little while, but it hasn&rsquo;t. You can either wait it out or else just hit Ctrl-C, as the part of the response that we&rsquo;re actually interested in returns immediately.</p>

<p>Now open the file with your favorite text editor and strip out everything other than the certificate itself. Here&rsquo;s what the result looks like for the mail.kattare.com cert:</p>

<pre>-----BEGIN CERTIFICATE-----
MIIDfjCCAuegAwIBAgIDFJoPMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT
MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0
aWZpY2F0ZSBBdXRob3JpdHkwHhcNMTAwOTE5MDEzMDUxWhcNMTIxMTIwMTQ0MjI4
WjCB4TEpMCcGA1UEBRMgRFZxc0c5bkIxUGNleTNZVUFzY3otOFNWV0ZnL2Y1aU8x
CzAJBgNVBAYTAlVTMRYwFAYDVQQKDA0qLmthdHRhcmUuY29tMRMwEQYDVQQLEwpH
VDE3NDM3OTM5MTEwLwYDVQQLEyhTZWUgd3d3LnJhcGlkc3NsLmNvbS9yZXNvdXJj
ZXMvY3BzIChjKTEwMS8wLQYDVQQLEyZEb21haW4gQ29udHJvbCBWYWxpZGF0ZWQg
LSBSYXBpZFNTTChSKTEWMBQGA1UEAwwNKi5rYXR0YXJlLmNvbTCBnzANBgkqhkiG
9w0BAQEFAAOBjQAwgYkCgYEA3E9EOUrXoPLgz/N1MFB4xtld2NyDJK5jzPk313VQ
dldvYY8SOd6XqnO/WAmm/2FaFRjhEZ7HcNPAauVeMXW2YQVGSkimeWd8ZDbKU8o6
vJuFJmnRpfxIIZxS1gzJanFrv7v+TtlIQRDP/YI5OnXkZ0sSLVBb2MK7wHLDbtej
dhECAwEAAaOB1TCB0jAfBgNVHSMEGDAWgBRI5mj5K9KylddH2CMgEE8zmJCf1DAO
BgNVHQ8BAf8EBAMCBPAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMCUG
A1UdEQQeMByCDSoua2F0dGFyZS5jb22CC2thdHRhcmUuY29tMDoGA1UdHwQzMDEw
L6AtoCuGKWh0dHA6Ly9jcmwuZ2VvdHJ1c3QuY29tL2NybHMvc2VjdXJlY2EuY3Js
MB0GA1UdDgQWBBRCAb04OmdhLLLRIAtJGNgYnJKQcjANBgkqhkiG9w0BAQUFAAOB
gQCZQVc8nNHGo5Sr1hh9ZMBK2bcivXqLeJkOVt2pQ0OoMWDsq7/ei4njcN5QJXf0
mK3Qb4bUkdJUemS3QITRXVqNnBZaP0XUAKBxK5htwHJLuQ83q71Td6NkqSj4yS35
jM3JXG7LRkr/G6M24RCxBKONckQy+3j1wdy/jZwfisilPg==
-----END CERTIFICATE-----</pre>




<h4>Step 3. Import the certificate into your local truststore</h4>


<p>You&rsquo;ll want to import the cert into the truststore in your Java home directory. My Java home is at</p>

<pre>/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home</pre>


<p>but yours is probably somewhere else. Anyway, once you find it, the truststore is at <code>/lib/security/jssecacerts</code>, at least if you&rsquo;re using JSSE.</p>

<pre>sudo keytool -import -alias [alias] -file [cert_file] -keystore [java_home]/lib/security/jssecacerts</pre>


<p>For example, for me it&rsquo;s:</p>

<pre>sudo keytool -import -alias mail.kattare.com -file kattare-smtp.cer -keystore /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/security/jssecacerts</pre>


<p>Enter your <code>sudo</code> password and then your keystore password, and then answer yes when it asks you whether to trust the certificate. This will import the cert into the keystore (which doubles as a truststore).</p>

<h4>Step 4. Restart your app and try again</h4>


<p>Hopefully this time it works, or at least gets rid of the PKIX error.</p>

<h3>References</h3>




<ul>
<li><a href="http://serverfault.com/questions/131627/how-to-inspect-remote-smtp-servers-tls-certificate">How to inspect remote SMTP server&#8217;s TLS certificate? [serverfault]</a>: Explains how to get the remote certificate.</li>
<li><a href="http://stackoverflow.com/questions/373295/digital-certificate-how-to-import-cer-file-in-to-truststore-file-using">Digital Certificate: How to import .cer file in to .truststore file using? [stackoverflow]</a>: Explains how to import the certificate into your truststore.</li>
<li><a href="http://en.wikipedia.org/wiki/STARTTLS">STARTTLS [Wikipedia]</a>: Background material on STARTTLS.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Spring constructor namespace]]></title>
    <link href="http://springinpractice.com/2012/04/26/the-spring-constructor-namespace-and-some-deep-thoughts/"/>
    <updated>2012-04-26T05:14:51-07:00</updated>
    <id>http://springinpractice.com/2012/04/26/the-spring-constructor-namespace-and-some-deep-thoughts</id>
    <content type="html"><![CDATA[<p>You know the <code>p</code> namespace? It&rsquo;s the one that cleans up your Spring configuration files by providing a shorthand for injecting beans and values:</p>

<pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation=
       "http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"&gt;
    
    &lt;bean id="sessionFactory"
        class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"
        p:dataSource-ref="dataSource"
        p:packagesToScan="com.springinpractice.ch10.model" /&gt;

    ... other beans ...

&lt;/beans&gt;</pre>


<p>Did you know that Spring 3.1 introduces an analogous namespace for constructor injection? Yup&mdash;it&rsquo;s the <code>c</code> namespace:</p>

<!-- more -->




<pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:c="http://www.springframework.org/schema/c"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation=
       "http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd"&gt;
        
    &lt;bean id="connectionFactoryLocator"
        class="org.springframework.social.connect.support.ConnectionFactoryRegistry"&gt;
        &lt;property name="connectionFactories"&gt;
            &lt;list&gt;
                &lt;bean class="org.springframework.social.github.connect.GitHubConnectionFactory"
                    c:clientId="${gitHub.clientId}"
                    c:clientSecret="${gitHub.clientSecret}" /&gt;
            &lt;/list&gt;
        &lt;/property&gt;
    &lt;/bean&gt;
    
    &lt;bean id="usersConnectionRepository"
        class="org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository"
        c:dataSource-ref="dataSource"
        c:connectionFactoryLocator-ref="connectionFactoryLocator"
        c:textEncryptor-ref="textEncryptor" /&gt;
    
    ... other beans ...

&lt;/beans&gt;</pre>


<p>It works pretty much the same way, but for constructors. You can inject values, or else you can inject references using the <code>-ref</code> suffix.</p>

<p>With <code>p</code>, the XML element name comes from the bean property name, but with constructors that&rsquo;s not available. Instead, for <code>c</code> we use the name of the constructor parameter itself. So for <code>JdbcUsersConnectionRepository</code> we&rsquo;re calling a constructor that looks like this:</p>

<p><code>public JdbcUsersConnectionRepository(DataSource dataSource, ConnectionFactoryLocator connectionFactoryLocator, TextEncryptor textEncryptor)</code></p>

<p>where it&rsquo;s the parameter names themselves (rather than the parameter types) driving the XML element names.</p>

<h3>But keep this in mind&#8230;</h3>


<p>The <code>c</code> namespace is great, but there&rsquo;s something you may not have considered. Because the XML element names come from the constructor parameter names, we have to compile the app in debug mode if we want to use this feature (otherwise the local variable names aren&rsquo;t in the class files), and we want to pay attention to the parameter names we choose. So, for instance, <code>ds</code>, <code>cfl</code> and <code>te</code> wouldn&rsquo;t be very good constructor parameter names.</p>

<p>Note that Spring (especially Spring Web MVC) has been using parameter names in this fashion for a long time, so that&rsquo;s nothing new. The <code>@PathVariable</code> and <code>@RequestParam</code> annotations, for example, default to using parameter names when explicit names aren&rsquo;t specified. But in the case of the <code>c</code> namespace, a bean that supports <code>c</code>-based injection ought to publish the constructor parameter names, and they become in effect part of the API.</p>

<h3>Update</h3>


<p>I&rsquo;ve had a bit of a change of heart regarding the constructor namespace. Here&rsquo;s why I think <a href="http://springinpractice.com/2012/05/07/springs-constructor-namespace-is-a-bad-idea/">the Spring constructor namespace is a bad idea</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic DAOs and queries using Spring Data JPA]]></title>
    <link href="http://springinpractice.com/2012/04/24/autogenerate-daos-and-queries-using-spring-data-jpa/"/>
    <updated>2012-04-24T16:18:27-07:00</updated>
    <id>http://springinpractice.com/2012/04/24/autogenerate-daos-and-queries-using-spring-data-jpa</id>
    <content type="html"><![CDATA[<p>For a long time, creating a DAO layer in Spring has been a largely manual process:</p>

<ol>
    <li>Create a base generic DAO interface.</li>
    <li>Create a generic abstract DAO implementation with general-purpose CRUD methods and common queries (e.g., <code>findAll</code>()).</li>
    <li>For each DAO we want, extend the base DAO interface with an entity-specific interface (e.g., <code>CustomerDao</code>).</li>
    <li>For each DAO we want, extend the abstract DAO class with an entity-specific concrete class (e.g., <code>HibernateCustomerDao</code>).</li>
</ol>


<p>Items 1 and 2 amount to creating a homegrown DAO framework, and items 3 and 4 amount to using it to implement DAOs.</p>

<p>Now there&rsquo;s a better way to do things.</p>

<!-- more -->


<p>The <a href="http://www.springsource.org/spring-data">Spring Data</a> family of projects provides a ready-made DAO framework. There are different projects, such as <a href="http://www.springsource.org/spring-data/jpa">Spring Data JPA</a>, <a href="http://www.springsource.org/spring-data/neo4j">Spring Data Neo4j</a> and <a href="http://www.springsource.org/spring-data/mongodb">Spring Data MongoDB</a>. Something they all have in common is that they provide framework code so we don&rsquo;t have to implement it ourselves.</p>

<p>Moreover, Spring Data is able to generate concrete DAO implementations and custom queries automatically. So even step 4 above goes away in many cases. With Spring Data JPA you can create DAO tiers by defining interfaces.</p>

<p>In this post we&rsquo;ll learn how to use Spring Data JPA to clean up our DAO tier. Let&rsquo;s get the POM and configuration out of the way first. Then we&rsquo;ll get into the actual repository code. We won&rsquo;t get into the details of mapping actual entities (via JPA annotations or otherwise) as that&rsquo;s outside the scope of what we want to cover here.</p>

<h3>POM</h3>


<p>First we need to choose which JPA provider and which package versions we want to work with. For the JPA provider, we&rsquo;ll use Hibernate. For the package versions, we&rsquo;ll use Spring 3.1.1, Spring Data JPA 1.0.3 and Hibernate 4.1.1 since those are current at the time I&rsquo;m writing this.</p>

<p>Here are the relevant Maven dependencies for <code>pom.xml</code>:</p>

<pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project ...&gt;

    ...

    &lt;!-- Use whatever versions make sense for your project. --&gt;
    &lt;properties&gt;
        &lt;hibernate.version&gt;4.1.1.Final&lt;/hibernate.version&gt;
        &lt;spring.version&gt;3.1.1.RELEASE&lt;/spring.version&gt;
        &lt;spring.data.version&gt;1.0.3.RELEASE&lt;/spring.data.version&gt;
    &lt;/properties&gt;

    &lt;dependencies&gt;

        ... standard Spring dependencies (beans, context, core, etc.) ...

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;
            &lt;artifactId&gt;spring-data-jpa&lt;/artifactId&gt;
            &lt;version&gt;${spring.data.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
            &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;
            &lt;version&gt;${hibernate.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
            &lt;artifactId&gt;hibernate-entitymanager&lt;/artifactId&gt;
            &lt;version&gt;${hibernate.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
            &lt;artifactId&gt;hibernate-ehcache&lt;/artifactId&gt;
            &lt;version&gt;${hibernate.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    ...

&lt;/project&gt;
</pre>




<h3>JPA configuration</h3>


<p>The JPA configuration goes here: <code>/src/main/resources/META-INF/persistence.xml</code>. Here&rsquo;s the configuration itself. (Adjust as necessary if you&rsquo;re not using MySQL.)</p>

<pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;persistence xmlns="http://java.sun.com/xml/ns/persistence"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd"
    version="1.0"&gt;
   
    &lt;persistence-unit name="RunbookManager" transaction-type="RESOURCE_LOCAL"&gt;
        &lt;description&gt;This unit manages runbooks.&lt;/description&gt;
        &lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;
        &lt;jta-data-source&gt;jdbc/RunbookDS&lt;/jta-data-source&gt;
        &lt;properties&gt;
            &lt;property name="hibernate.dialect" value="org.hibernate.dialect.MySQL5Dialect" /&gt;
            &lt;property name="hibernate.show_sql" value="false" /&gt;
        &lt;/properties&gt;
    &lt;/persistence-unit&gt;
&lt;/persistence&gt;</pre>


<p>The configuration above is where we declare Hibernate as our JPA provider.</p>

<p>Now let&rsquo;s look at the Spring configuration.</p>

<h3>Spring configuration</h3>




<pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd"&gt;
        
    &lt;jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/RunbookDS" resource-ref="true" /&gt;
    
    &lt;bean id="entityManagerFactory"
        class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
        p:persistenceUnitName="RunbookManager"
        p:dataSource-ref="dataSource" /&gt;

    &lt;bean id="transactionManager"
        class="org.springframework.orm.jpa.JpaTransactionManager"
        p:entityManagerFactory-ref="entityManagerFactory" /&gt;

    &lt;jpa:repositories base-package="com.example.runbooks.repo" /&gt;
    
    &lt;tx:annotation-driven /&gt;

    ... other beans ...

&lt;/beans&gt;
</pre>


<p>Note the use of the <code>jpa</code> namespace to declare a package containing the repositories. This package contains the various interfaces we&rsquo;re about to define. The <code>&lt;jpa:repositories&gt;</code> configuration tells Spring to scan for interfaces and create the repository implementations, magically.</p>

<h3>Repository interfaces</h3>


<p>OK, now we&rsquo;ve made it to the good stuff. We&rsquo;ll look at a few examples here.</p>

<p>To create a new DAO, we simply extend the <code>JpaRepository</code> interface, which is part of Spring Data JPA. It takes two type parameters: the relevant entity type, and its ID type. The interface comes with a bunch of standard CRUD operations and queries; see the <a href="http://static.springsource.org/spring-data/data-jpa/docs/current/api/org/springframework/data/jpa/repository/JpaRepository.html">JpaRepository API documentation</a> for details on those.</p>

<h4>Example 1: A barebones repo</h4>


<p>First, the most barebones example would be where we&rsquo;re perfectly happy with the standard CRUD and query operations that the Spring Data <code>JpaRepository</code> already provides. In that case, all we have to do is extend the interface and we&rsquo;re done.</p>

<pre>package com.example.runbooks.repo;

import org.springframework.data.jpa.repository.JpaRepository;
import com.example.runbooks.model.RunbookGroup;

public interface RunbookGroupRepo
    extends JpaRepository&lt;RunbookGroup, Long&gt; { }</pre>


<p>With that simple interface definition, Spring Data JPA will be able to create an implementation dynamically that gives us methods like <code>count()</code>, <code>findAll()</code>, <code>findOne()</code>, <code>save()</code>, <code>delete()</code>, <code>deleteAll()</code>, <code>deleteInBatch()</code> and more for free.</p>

<h4>Example 2. A simple custom query</h4>


<p>Say we have a <code>ChapterType</code> entity with a <code>key</code> property, and we want a query that can find chapter types by key. No problem. We can use conventions around method names to tell Spring Data JPA which query we&rsquo;d like to see:</p>

<pre>package com.example.runbooks.repo;

import org.springframework.data.jpa.repository.JpaRepository;
import com.example.runbooks.model.ChapterType;

public interface ChapterTypeRepo
    extends JpaRepository&lt;ChapterType, Long&gt; {

    ChapterType findByKey(String key);
}</pre>


<p>Spring Data maps the method to a query that effectively accomplishes</p>

<blockquote>
<code>from ChapterType where key = :key</code>
</blockquote>




<h4>Example 3. A more complex custom query</h4>


<p>The scheme from example 2 above extends to cases where the properties in question are complex, in a couple of different ways: first, they might involve multiple conditions in the &ldquo;where&rdquo; clause; second, they might involve joins. Suppose, for instance, that we want to find a chapter having a certain runbook ID and a certain chapter number. Suppose also that the JPQL would be</p>

<blockquote>
<code>from Chapter c where c.runbook.id = :runbookId and<br />
c.chapterType.number = :chapterNumber</code>
</blockquote>


<p>Here&rsquo;s how to build a repo supporting that query:</p>

<pre>package com.example.runbooks.repo;

import org.springframework.data.jpa.repository.JpaRepository;
import com.example.runbooks.model.Chapter;

public interface ChapterRepo
    extends JpaRepository&lt;Chapter, Long&gt; {

    Chapter findByRunbookIdAndChapterTypeNumber(
        Long runbookId, Integer chapterNumber);
}</pre>


<p>The convention implicit in the method name is fairly obvious, especially in light of the JPQL query. The convention can admittedly lead to some awkward method names, as it does in this case. (A better name might be <code>findByRunbookIdAndChapterNumber()</code>.) But the convenience is tough to beat.</p>

<div class="endnote">Interested in learning more about Spring Data JPA? See my post <a href="http://springinpractice.com/2012/05/11/pagination-and-sorting-with-spring-data-jpa/">Pagination and sorting with Spring Data JPA</a>.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending cookies with RestTemplate]]></title>
    <link href="http://springinpractice.com/2012/04/08/sending-cookies-with-resttemplate/"/>
    <updated>2012-04-08T14:06:18-07:00</updated>
    <id>http://springinpractice.com/2012/04/08/sending-cookies-with-resttemplate</id>
    <content type="html"><![CDATA[<p>Sometimes it is necessary to send cookies along with requests to a RESTful API. One such example is the JIRA 4.3 API, which requires sending the <code>JSESSIONID</code> to JIRA for session management and authentication purposes. REST purists point out that such usages are not properly RESTful (see <a href="http://blog.mikepearce.net/2010/08/24/cookies-and-the-restful-api/" target="_blank"><a href="http://blog.mikepearce.net/2010/08/24/cookies-and-the-restful-api/">http://blog.mikepearce.net/2010/08/24/cookies-and-the-restful-api/</a></a> for a good discussion), and indeed the <code>RestTemplate</code> doesn&rsquo;t directly support sending cookies.</p>

<p>But in the real world, we need to make things work, and so in this quick post I&rsquo;ll show how to send cookies with <code>RestTemplate</code>.</p>

<!-- more -->


<p>The first thing to bear in mind is that we implement cookies as HTTP headers: the service uses a <code>Set-Cookie</code> response header to tell the client to set a cookie, and the client uses the <code>Cookie</code> request header for subsequent requests. And <code>RestTemplate</code> certainly supports setting request headers.</p>

<p>Here&rsquo;s how I&rsquo;m pulling down an access-controlled RSS feed from JIRA 4.3:</p>

<pre>HttpHeaders requestHeaders = new HttpHeaders();
requestHeaders.add("Cookie", "JSESSIONID=" + session.getValue());
HttpEntity requestEntity = new HttpEntity(null, requestHeaders);
ResponseEntity rssResponse = restTemplate.exchange(
    "https://jira.example.com/sr/jira.issueviews:searchrequest-xml/18107/SearchRequest-18107.xml?tempMax=1000",
    HttpMethod.GET,
    requestEntity,
    Rss.class);
Rss rss = rssResponse.getBody();</pre>


<p>The trick here is to use the <code>RestTemplate</code>&rsquo;s <code>exchange()</code> method, as this gives us more control over the request, including request headers. We just encode the cookie as a <code>JSESSIONID=[session ID]</code> request header and send it along.</p>

<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Spring Social GitHub to access secured GitHub data]]></title>
    <link href="http://springinpractice.com/2012/03/06/using-spring-social-github-to-access-secured-github-data-code/"/>
    <updated>2012-03-06T04:40:28-08:00</updated>
    <id>http://springinpractice.com/2012/03/06/using-spring-social-github-to-access-secured-github-data-code</id>
    <content type="html"><![CDATA[<p>In <a href="http://springinpractice.com/2012/03/06/zkybase-now-supports-authorized-access-to-github-via-spring-social-github/">this post</a>, I shared some screenshots of an open source, Spring-based CMDB I&rsquo;m building called <a title="Zkybase GitHub site" href="https://github.com/williewheeler/zkybase">Zkybase</a>. In the current post I want to show some of the code and configuration that&rsquo;s required to make OAuth2-authorized Spring/GitHub integration work.</p>

<!-- more -->


<p><img src="http://springinpractice.s3.amazonaws.com/blog/images/2012-03-06-using-spring-social-github-to-access-secured-github-data-code/hooks2.png" alt="Zkybase screenshot" /></p>

<h3>Spring application configuration</h3>


<p>This goes in the app context. I lifted it more or less as-is from the Spring Social reference documentation, except that I&rsquo;m using GitHub as the provider instead of Facebook, Twitter or LinkedIn.</p>

<pre>&lt;bean id="connectionFactoryLocator" class="org.springframework.social.connect.support.ConnectionFactoryRegistry"&gt;
    &lt;property name="connectionFactories"&gt;
        &lt;list&gt;
            &lt;bean class="org.springframework.social.github.connect.GitHubConnectionFactory"&gt;
                &lt;constructor-arg value="${gitHub.clientId}" /&gt;
                &lt;constructor-arg value="${gitHub.clientSecret}" /&gt;
            &lt;/bean&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;

&lt;bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" factory-method="noOpText" /&gt;

&lt;bean id="usersConnectionRepository" class="org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository"&gt;
    &lt;constructor-arg ref="dataSource" /&gt;
    &lt;constructor-arg ref="connectionFactoryLocator" /&gt;
    &lt;constructor-arg ref="textEncryptor" /&gt;
&lt;/bean&gt;

&lt;!-- This requires authentication via Spring Security --&gt;
&lt;bean id="connectionRepository"
    factory-bean="usersConnectionRepository"
    factory-method="createConnectionRepository" 
    scope="request"&gt;
    
    &lt;constructor-arg value="#{request.userPrincipal.name}" /&gt;
    &lt;aop:scoped-proxy proxy-target-class="false" /&gt;
&lt;/bean&gt;</pre>




<h3>Spring web configuration</h3>




<pre>&lt;bean class="org.springframework.social.connect.web.ConnectController" /&gt;</pre>




<h3>Service code for the user account page</h3>


<p>Here&rsquo;s how I&rsquo;m looking up the GitHub user profile information:</p>

<pre>package org.skydingo.zkybase.service.impl;

import javax.inject.Inject;

import org.skydingo.zkybase.model.UserAccount;
import org.skydingo.zkybase.repository.UserAccountRepository;
import org.skydingo.zkybase.service.UserAccountService;
import org.springframework.social.connect.Connection;
import org.springframework.social.connect.ConnectionRepository;
import org.springframework.social.github.api.GitHub;
import org.springframework.social.github.api.GitHubUserProfile;
import org.springframework.social.github.api.impl.GitHubTemplate;
import org.springframework.stereotype.Service;

@Service
public class UserAccountServiceImpl extends AbstractCIService implements UserAccountService {
    @Inject private ConnectionRepository connectionRepo;
    
    public GitHubUserProfile getCurrentUserProfile() {
        if (gitHub().isAuthorized()) {
            return gitHub().userOperations().getUserProfile();
        } else {
            return null;
        }
    }
    
    private GitHub gitHub() {
        Connection conn = connectionRepo.findPrimaryConnection(GitHub.class);
        return (conn != null ? conn.getApi() : new GitHubTemplate());
    }

    ... other methods ...
}</pre>


<p>In the <code>gitHub()</code> method you can see that I return an existing <code>GitHub</code> object if the connection exists; otherwise I just create a new <code>GitHub</code> (in the form of the template, which implements <code>GitHub</code>) so that the app can at least perform non-sensitive read operations.</p>

<h3>Service to get the GitHub service hooks</h3>


<p>This one&rsquo;s pretty similar to the above.</p>

<pre>package org.skydingo.zkybase.service.impl;

import java.util.List;
import javax.inject.Inject;
import org.skydingo.zkybase.model.Application;
import org.skydingo.zkybase.service.ApplicationService;
import org.springframework.social.connect.Connection;
import org.springframework.social.connect.ConnectionRepository;
import org.springframework.social.github.api.GitHub;
import org.springframework.social.github.api.GitHubHook;
import org.springframework.social.github.api.impl.GitHubTemplate;
import org.springframework.stereotype.Service;

@Service
public class ApplicationServiceImpl extends AbstractCIService implements ApplicationService {
    @Inject private ConnectionRepository connectionRepo;
    
    public List findHooks(String user, String repo) {
        return gitHub().repoOperations().getHooks(user, repo);
    }

    private GitHub gitHub() {
        Connection conn = connectionRepo.findPrimaryConnection(GitHub.class);
        return (conn != null ? conn.getApi() : new GitHubTemplate());
    }

    ... various other methods ...
}</pre>


<p>I should probably factor out that common <code>gitHub()</code> method. :&ndash;)</p>

<h3>User account JSP</h3>


<p>Here&rsquo;s the JSP code for rendering the connect/disconnect buttons. The CSS classes come from <a title="Twitter Bootstrap" href="http://twitter.github.com/bootstrap/">Bootstrap 2.0</a>, in case you were wondering.</p>

<pre>&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;
&lt;%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %&gt;
&lt;%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %&gt;
&lt;%@ taglib prefix="social" uri="http://www.springframework.org/spring-social/social/tags" %&gt;

&lt;c:url var="connectUrl" value="/connect" /&gt;
&lt;c:url var="githubUrl" value="/connect/github" /&gt;

&lt;sec:authentication var="user" property="principal" /&gt;

&lt;h1&gt;Account details&lt;/h1&gt;

&lt;section class="first"&gt;
    &lt;div class="well"&gt;
        &lt;table class="grid"&gt;
            &lt;tr&gt;
                &lt;td&gt;Username:&lt;/td&gt;
                &lt;td&gt;&lt;c:out value="${user.username}" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;/section&gt;

&lt;section&gt;
    &lt;h2&gt;GitHub&lt;/h2&gt;

    &lt;social:connected provider="github"&gt;
        &lt;p&gt;Your Zkybase and GitHub accounts are connected.&lt;/p&gt;
        &lt;div class="well"&gt;
            &lt;table class="grid"&gt;
                &lt;tr&gt;
                    &lt;td&gt;Blog:&lt;/td&gt;
                    &lt;td&gt;&lt;c:out value="${gitHubUserProfile.blog}" default="None" /&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;Location:&lt;/td&gt;
                    &lt;td&gt;&lt;c:out value="${gitHubUserProfile.location}" default="None" /&gt;&lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;
        &lt;form method="post" action="${githubUrl}"&gt;
            &lt;input type="hidden" name="_method" value="delete" /&gt;
            &lt;input class="btn btn-danger" type="submit" value="Disconnect from GitHub" /&gt;
        &lt;/form&gt;
    &lt;/social:connected&gt;

    &lt;social:notConnected provider="github"&gt;
        &lt;p&gt;Your Zkybase and GitHub accounts are not yet connected. Connect them for additional Zkybase features.&lt;/p&gt;
        &lt;form method="post" action="${githubUrl}"&gt;
            &lt;input type="hidden" name="scope" value="user, repo, gist" /&gt;
            &lt;input class="btn btn-primary" type="submit" value="Connect to GitHub" /&gt;
        &lt;/form&gt;
    &lt;/social:notConnected&gt;
&lt;/section&gt;</pre>


<p>Note the use of the Spring Social <code>&lt;social:connected&gt;</code> and <code>&lt;social:notConnected&gt;</code> tags to show different content based on whether the user is or isn&rsquo;t connected to the provider in question.</p>

<p>Notice also that the connect button sends a hidden <code>scope</code> parameter to the GitHub URL. This allows us to specify the kinds of operation we want the user to authorize.</p>

<p>Anyway, there you have it. This post was a bit quick, so let me know if I left anything important out and I&rsquo;m happy to add it. Have fun.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Neo4j 1.6.1 Cypher query examples when using Spring Data Neo4j 2.0]]></title>
    <link href="http://springinpractice.com/2012/03/06/neo4j-1-6-1-cypher-query-examples-when-using-spring-data-neo4j-2-0/"/>
    <updated>2012-03-06T04:36:56-08:00</updated>
    <id>http://springinpractice.com/2012/03/06/neo4j-1-6-1-cypher-query-examples-when-using-spring-data-neo4j-2-0</id>
    <content type="html"><![CDATA[<p>This post shows how to perform various sample Cypher queries when using Neo4j 1.6.1 and Spring Data Neo4j (SDN) 2.0.</p>

<!-- more -->


<p>SDN 2.0 assumes Neo4j 1.6, and it imposes specific structures on databases that it creates. For example, SDN uses the <code><strong>type</strong></code> property on nodes to store the associated Java class, and it names its indexes using the Java class&#8217; simple name.</p>

<p>In the examples below, I&rsquo;m using the Neo4j shell, though you can of course run Cypher queries outside of the shell (e.g., from within the app itself). See <a href="http://springinpractice.com/2012/02/12/working-with-the-neo4j-shell/" title="Working with the Neo4j shell">my earlier blog post</a> if you&rsquo;re interested in learning how to use the shell.</p>

<p>I&rsquo;ll probably add more examples to this post from time to time.</p>

<h4>Return a single node with a given ID</h4>




<pre>neo4j-sh (Skybase,1)$ start n=node(1) return n
+------------------------------------------------------------------------------------------------------------------+
| n                                                                                                                |
+------------------------------------------------------------------------------------------------------------------+
| Node[1]{__type__-&gt;"org.skydingo.skybase.model.Application",name-&gt;"Skybase",shortDescription-&gt;"Cloud-based CMDB"} |
+------------------------------------------------------------------------------------------------------------------+</pre>




<h4>Return multiple nodes, looked up by ID</h4>




<pre>neo4j-sh (Skybase,1)$ start n=node(1,4,5) return n
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| n                                                                                                                                                                                  |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Node[1]{__type__-&gt;"org.skydingo.skybase.model.Application",name-&gt;"Skybase",shortDescription-&gt;"Cloud-based CMDB"}                                                                   |
| Node[4]{__type__-&gt;"org.skydingo.skybase.model.Module",name-&gt;"Domain",shortDescription-&gt;"Domain model",moduleId-&gt;"org.skydingo.skybase.domain",groupId-&gt;"org.skydingo.skybase"}     |
| Node[5]{moduleId-&gt;"org.skydingo.skybase.service",name-&gt;"Service",groupId-&gt;"org.skydingo.skybase",shortDescription-&gt;"Service module",__type__-&gt;"org.skydingo.skybase.model.Module"} |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</pre>




<h4>Find all nodes of a given type</h4>




<pre>neo4j-sh[readonly] (Maven,3)$ start n=node:__types__(className="org.skydingo.skybase.model.Module") return n
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| n                                                                                                                                                                                  |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Node[3]{__type__-&gt;"org.skydingo.skybase.model.Module",name-&gt;"Maven",shortDescription-&gt;"Maven plugins",moduleId-&gt;"skybase-maven-plugin",groupId-&gt;"org.skydingo.skybase"}            |
| Node[4]{__type__-&gt;"org.skydingo.skybase.model.Module",name-&gt;"Domain",shortDescription-&gt;"Domain model",moduleId-&gt;"org.skydingo.skybase.domain",groupId-&gt;"org.skydingo.skybase"}     |
| Node[5]{moduleId-&gt;"org.skydingo.skybase.service",name-&gt;"Service",groupId-&gt;"org.skydingo.skybase",shortDescription-&gt;"Service module",__type__-&gt;"org.skydingo.skybase.model.Module"} |
| Node[7]{moduleId-&gt;"org.skydingo.skybase.client",name-&gt;"Client",groupId-&gt;"org.skydingo.skybase",shortDescription-&gt;"Client module",__type__-&gt;"org.skydingo.skybase.model.Module"}    |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</pre>




<h4>Find all instances of a class having a certain property</h4>


<p>Say we have a <code>org.skydingo.skybase.model.Module</code> class with a <code>groupId</code> property and a <code>moduleId</code> property, both annotated with SDN&rsquo;s <code>@Indexed</code> annotation. Then SDN will create an index for this class called <code>Module</code>. Here&rsquo;s how to find modules in a given group:</p>

<pre>neo4j-sh (Skybase,1)$ start n=node:Module("groupId:org.skydingo.skybase") return n
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| n                                                                                                                                                                                  |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Node[3]{__type__-&gt;"org.skydingo.skybase.model.Module",name-&gt;"Maven",shortDescription-&gt;"Maven plugins",moduleId-&gt;"skybase-maven-plugin",groupId-&gt;"org.skydingo.skybase"}            |
| Node[4]{__type__-&gt;"org.skydingo.skybase.model.Module",name-&gt;"Domain",shortDescription-&gt;"Domain model",moduleId-&gt;"org.skydingo.skybase.domain",groupId-&gt;"org.skydingo.skybase"}     |
| Node[5]{moduleId-&gt;"org.skydingo.skybase.service",name-&gt;"Service",groupId-&gt;"org.skydingo.skybase",shortDescription-&gt;"Service module",__type__-&gt;"org.skydingo.skybase.model.Module"} |
| Node[7]{moduleId-&gt;"org.skydingo.skybase.client",name-&gt;"Client",groupId-&gt;"org.skydingo.skybase",shortDescription-&gt;"Client module",__type__-&gt;"org.skydingo.skybase.model.Module"}    |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</pre>


<p>Here&rsquo;s an alternative syntax for doing exactly the same thing:</p>

<pre>neo4j-sh (Skybase,1)$ start n=node:Module(groupId = 'org.skydingo.skybase') return n
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| n                                                                                                                                                                                  |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Node[3]{__type__-&gt;"org.skydingo.skybase.model.Module",name-&gt;"Maven",shortDescription-&gt;"Maven plugins",moduleId-&gt;"skybase-maven-plugin",groupId-&gt;"org.skydingo.skybase"}            |
| Node[4]{__type__-&gt;"org.skydingo.skybase.model.Module",name-&gt;"Domain",shortDescription-&gt;"Domain model",moduleId-&gt;"org.skydingo.skybase.domain",groupId-&gt;"org.skydingo.skybase"}     |
| Node[5]{moduleId-&gt;"org.skydingo.skybase.service",name-&gt;"Service",groupId-&gt;"org.skydingo.skybase",shortDescription-&gt;"Service module",__type__-&gt;"org.skydingo.skybase.model.Module"} |
| Node[7]{moduleId-&gt;"org.skydingo.skybase.client",name-&gt;"Client",groupId-&gt;"org.skydingo.skybase",shortDescription-&gt;"Client module",__type__-&gt;"org.skydingo.skybase.model.Module"}    |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</pre>




<h4>Find all nodes having a certain set of property values</h4>




<pre>neo4j-sh[readonly] (Maven,3)$ start n=node:Module("groupId:org.skydingo.skybase, moduleId:skybase-maven-plugin") return n  
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| n                                                                                                                                                                       |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Node[3]{__type__-&gt;"org.skydingo.skybase.model.Module",name-&gt;"Maven",shortDescription-&gt;"Maven plugins",moduleId-&gt;"skybase-maven-plugin",groupId-&gt;"org.skydingo.skybase"} |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</pre>




<h4>Find all nodes in a specified relationship to a given node</h4>




<pre>neo4j-sh (Skybase,1)$ start app=node(1) match app-[:APPLICATION_MODULE]-&gt;module return module
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| module                                                                                                                                                                             |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Node[7]{moduleId-&gt;"org.skydingo.skybase.client",name-&gt;"Client",groupId-&gt;"org.skydingo.skybase",shortDescription-&gt;"Client module",__type__-&gt;"org.skydingo.skybase.model.Module"}    |
| Node[5]{moduleId-&gt;"org.skydingo.skybase.service",name-&gt;"Service",groupId-&gt;"org.skydingo.skybase",shortDescription-&gt;"Service module",__type__-&gt;"org.skydingo.skybase.model.Module"} |
| Node[4]{__type__-&gt;"org.skydingo.skybase.model.Module",name-&gt;"Domain",shortDescription-&gt;"Domain model",moduleId-&gt;"org.skydingo.skybase.domain",groupId-&gt;"org.skydingo.skybase"}     |
| Node[3]{__type__-&gt;"org.skydingo.skybase.model.Module",name-&gt;"Maven",shortDescription-&gt;"Maven plugins",moduleId-&gt;"skybase-maven-plugin",groupId-&gt;"org.skydingo.skybase"}            |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</pre>




<h3>Reader-contributed</h3>


<p>I&rsquo;ll just add queries here if people send them. It&rsquo;s useful to have examples of queries around.</p>

<h4>Return a user&#8217;s events (of specific types), ordered by date</h4>


<p><a href="https://twitter.com/#!/bytor99999">Mark Spritzler</a> sent me the following query, which he noted that <a href="https://twitter.com/#!/mesirii">Michael Hunger</a> mostly wrote:</p>

<pre>START user=node({0})
MATCH user-[r]-event
WHERE type(r) = "ATTENDING"
OR type(r) = "INVITED"
OR type(r) = "HOSTING"
RETURN ID(event) as eventId, event.eventDate as eventDate, event.title as eventName, type(r) as eventUserType
ORDER BY event.eventDate desc</pre>

]]></content>
  </entry>
  
</feed>
